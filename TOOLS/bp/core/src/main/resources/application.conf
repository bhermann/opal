org.opalj {
	//analysisMode = "desktop application"
	analysisMode = "JEE6 web application"
	// analysisMode = "library with open packages assumption"
	
	bugpicker.analysisParameter {
		maxEvalTime = 10000						// default = 10000
		maxEvalFactor = 1.75d					// default = 1.75d
		maxCardinalityOfIntegerRanges = 16		// default = 16
		maxCardinalityOfLongSets = 2			// default = 2
		// We probably have to redesign the registry
		fpcfAnalyses = [
			"[MethodAccessibilityAnalysis] Computes the project accessibility property of methods w.r.t. clients.",
			"[FactoryMethodAnalysis] Determines if a static method is an accessible factory method w.r.t. clients.",
			"[InstantiabilityAnalysis] Computes if a class can (possibly) be instantiated.",
			"[CallableFromClassesInOtherPackagesAnalysis] Computes whether a non-static method can be called via an super or subclass.",
			"[LibraryEntryPointAnalysis] Computes the entry points of a library.",
			"[FieldMutatedAnalysis] Determines if private non-static non-final fields are effectively final.",
			"[PurityAnalysis] Determines if a method is pure (~ has no side effects)."]	
	}
	
	bugpicker.analysis {
		RootBugPickerAnalysisDomain {
			maxCallChainLength = 1 // default = 1
		}
		
		FallbackBugPickerAnalysisDomain {
			maxCardinalityOfIntegerRanges = 8
		    maxCardinalityOfLongSets = 3
		}
	}
	
	callgraph {
		# specify additional entry points (e.g. called in native code, via reflection or by an framework)
		entryPoints = []
	}
}
/*
 * generated by Xtext
 */
package org.opalj.bdl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.opalj.bdl.services.BDLGrammarAccess;

public class BDLParser extends AbstractContentAssistParser {
	
	@Inject
	private BDLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.opalj.bdl.ui.contentassist.antlr.internal.InternalBDLParser createParser() {
		org.opalj.bdl.ui.contentassist.antlr.internal.InternalBDLParser result = new org.opalj.bdl.ui.contentassist.antlr.internal.InternalBDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAnalysisElementAccess().getAlternatives_1(), "rule__AnalysisElement__Alternatives_1");
					put(grammarAccess.getParameterElementAccess().getAlternatives(), "rule__ParameterElement__Alternatives");
					put(grammarAccess.getParameterKeyValueElementAccess().getAlternatives_1(), "rule__ParameterKeyValueElement__Alternatives_1");
					put(grammarAccess.getIssueSuppressCommentAccess().getValueAlternatives_1_0(), "rule__IssueSuppressComment__ValueAlternatives_1_0");
					put(grammarAccess.getIssueTypesAccess().getAlternatives(), "rule__IssueTypes__Alternatives");
					put(grammarAccess.getIssueCategoriesAccess().getAlternatives(), "rule__IssueCategories__Alternatives");
					put(grammarAccess.getIssueKindsAccess().getAlternatives(), "rule__IssueKinds__Alternatives");
					put(grammarAccess.getAnyValuesAccess().getAlternatives(), "rule__AnyValues__Alternatives");
					put(grammarAccess.getAnalysisTitleAccess().getAlternatives(), "rule__AnalysisTitle__Alternatives");
					put(grammarAccess.getModelContainerAccess().getGroup(), "rule__ModelContainer__Group__0");
					put(grammarAccess.getAnalysisElementAccess().getGroup(), "rule__AnalysisElement__Group__0");
					put(grammarAccess.getParameterContainerAccess().getGroup(), "rule__ParameterContainer__Group__0");
					put(grammarAccess.getParameterKeyValueElementAccess().getGroup(), "rule__ParameterKeyValueElement__Group__0");
					put(grammarAccess.getParameterKeyElementAccess().getGroup(), "rule__ParameterKeyElement__Group__0");
					put(grammarAccess.getIssuesContainerAccess().getGroup(), "rule__IssuesContainer__Group__0");
					put(grammarAccess.getIssueElementAccess().getGroup(), "rule__IssueElement__Group__0");
					put(grammarAccess.getIssueElementAccess().getGroup_1(), "rule__IssueElement__Group_1__0");
					put(grammarAccess.getIssueSuppressCommentAccess().getGroup(), "rule__IssueSuppressComment__Group__0");
					put(grammarAccess.getIssueCategoryElementAccess().getGroup(), "rule__IssueCategoryElement__Group__0");
					put(grammarAccess.getIssueCategoryElementAccess().getGroup_2(), "rule__IssueCategoryElement__Group_2__0");
					put(grammarAccess.getIssueKindElementAccess().getGroup(), "rule__IssueKindElement__Group__0");
					put(grammarAccess.getIssueKindElementAccess().getGroup_2(), "rule__IssueKindElement__Group_2__0");
					put(grammarAccess.getIssueRelevanceElementAccess().getGroup(), "rule__IssueRelevanceElement__Group__0");
					put(grammarAccess.getIssuePackageElementAccess().getGroup(), "rule__IssuePackageElement__Group__0");
					put(grammarAccess.getIssueClassElementAccess().getGroup(), "rule__IssueClassElement__Group__0");
					put(grammarAccess.getIssueClassAccess().getGroup(), "rule__IssueClass__Group__0");
					put(grammarAccess.getIssueClassAccess().getGroup_1(), "rule__IssueClass__Group_1__0");
					put(grammarAccess.getIssueClassAccess().getGroup_2(), "rule__IssueClass__Group_2__0");
					put(grammarAccess.getAnyValuesAccess().getGroup_2(), "rule__AnyValues__Group_2__0");
					put(grammarAccess.getAnyValuesAccess().getGroup_3(), "rule__AnyValues__Group_3__0");
					put(grammarAccess.getFilePathAccess().getGroup(), "rule__FilePath__Group__0");
					put(grammarAccess.getFilePathAccess().getGroup_3(), "rule__FilePath__Group_3__0");
					put(grammarAccess.getFilePathAccess().getGroup_4(), "rule__FilePath__Group_4__0");
					put(grammarAccess.getSlashPathAccess().getGroup(), "rule__SlashPath__Group__0");
					put(grammarAccess.getSlashPathAccess().getGroup_1(), "rule__SlashPath__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_2(), "rule__QualifiedName__Group_2__0");
					put(grammarAccess.getModelContainerAccess().getNameAssignment_0(), "rule__ModelContainer__NameAssignment_0");
					put(grammarAccess.getModelContainerAccess().getParameterAssignment_1(), "rule__ModelContainer__ParameterAssignment_1");
					put(grammarAccess.getModelContainerAccess().getIssuesAssignment_2(), "rule__ModelContainer__IssuesAssignment_2");
					put(grammarAccess.getParameterContainerAccess().getNameAssignment_0(), "rule__ParameterContainer__NameAssignment_0");
					put(grammarAccess.getParameterContainerAccess().getElementsAssignment_1(), "rule__ParameterContainer__ElementsAssignment_1");
					put(grammarAccess.getParameterKeyValueElementAccess().getNameAssignment_0(), "rule__ParameterKeyValueElement__NameAssignment_0");
					put(grammarAccess.getParameterKeyValueElementAccess().getValueAssignment_2(), "rule__ParameterKeyValueElement__ValueAssignment_2");
					put(grammarAccess.getParameterKeyElementAccess().getNameAssignment_0(), "rule__ParameterKeyElement__NameAssignment_0");
					put(grammarAccess.getIssuesContainerAccess().getElementsAssignment_1(), "rule__IssuesContainer__ElementsAssignment_1");
					put(grammarAccess.getIssuesTitleElementAccess().getNameAssignment(), "rule__IssuesTitleElement__NameAssignment");
					put(grammarAccess.getIssueElementAccess().getNameAssignment_0(), "rule__IssueElement__NameAssignment_0");
					put(grammarAccess.getIssueElementAccess().getNameAssignment_1_1(), "rule__IssueElement__NameAssignment_1_1");
					put(grammarAccess.getIssueElementAccess().getCommentAssignment_2(), "rule__IssueElement__CommentAssignment_2");
					put(grammarAccess.getIssueElementAccess().getMessageAssignment_4(), "rule__IssueElement__MessageAssignment_4");
					put(grammarAccess.getIssueElementAccess().getCategoriesAssignment_5(), "rule__IssueElement__CategoriesAssignment_5");
					put(grammarAccess.getIssueElementAccess().getKindsAssignment_6(), "rule__IssueElement__KindsAssignment_6");
					put(grammarAccess.getIssueElementAccess().getRelevanceAssignment_7(), "rule__IssueElement__RelevanceAssignment_7");
					put(grammarAccess.getIssueElementAccess().getPackageAssignment_8(), "rule__IssueElement__PackageAssignment_8");
					put(grammarAccess.getIssueElementAccess().getClassAssignment_9(), "rule__IssueElement__ClassAssignment_9");
					put(grammarAccess.getIssueSuppressCommentAccess().getValueAssignment_1(), "rule__IssueSuppressComment__ValueAssignment_1");
					put(grammarAccess.getIssueCategoryElementAccess().getNameAssignment_0(), "rule__IssueCategoryElement__NameAssignment_0");
					put(grammarAccess.getIssueCategoryElementAccess().getElementsAssignment_1(), "rule__IssueCategoryElement__ElementsAssignment_1");
					put(grammarAccess.getIssueCategoryElementAccess().getElementsAssignment_2_1(), "rule__IssueCategoryElement__ElementsAssignment_2_1");
					put(grammarAccess.getIssueKindElementAccess().getNameAssignment_0(), "rule__IssueKindElement__NameAssignment_0");
					put(grammarAccess.getIssueKindElementAccess().getElementsAssignment_1(), "rule__IssueKindElement__ElementsAssignment_1");
					put(grammarAccess.getIssueKindElementAccess().getElementsAssignment_2_1(), "rule__IssueKindElement__ElementsAssignment_2_1");
					put(grammarAccess.getIssueRelevanceElementAccess().getNameAssignment_0(), "rule__IssueRelevanceElement__NameAssignment_0");
					put(grammarAccess.getIssueRelevanceElementAccess().getRelevanceAssignment_1(), "rule__IssueRelevanceElement__RelevanceAssignment_1");
					put(grammarAccess.getIssuePackageElementAccess().getNameAssignment_0(), "rule__IssuePackageElement__NameAssignment_0");
					put(grammarAccess.getIssuePackageElementAccess().getPackageAssignment_1(), "rule__IssuePackageElement__PackageAssignment_1");
					put(grammarAccess.getIssueClassElementAccess().getNameAssignment_0(), "rule__IssueClassElement__NameAssignment_0");
					put(grammarAccess.getIssueClassElementAccess().getClassAssignment_1(), "rule__IssueClassElement__ClassAssignment_1");
					put(grammarAccess.getIssueCategoriesAccess().getBugAssignment_0(), "rule__IssueCategories__BugAssignment_0");
					put(grammarAccess.getIssueCategoriesAccess().getSmellAssignment_1(), "rule__IssueCategories__SmellAssignment_1");
					put(grammarAccess.getIssueCategoriesAccess().getPerformanceAssignment_2(), "rule__IssueCategories__PerformanceAssignment_2");
					put(grammarAccess.getIssueCategoriesAccess().getComprehensibilityAssignment_3(), "rule__IssueCategories__ComprehensibilityAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.opalj.bdl.ui.contentassist.antlr.internal.InternalBDLParser typedParser = (org.opalj.bdl.ui.contentassist.antlr.internal.InternalBDLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

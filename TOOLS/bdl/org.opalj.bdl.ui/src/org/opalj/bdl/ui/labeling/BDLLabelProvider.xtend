/*
 * generated by Xtext
 */
package org.opalj.bdl.ui.labeling

import com.google.inject.Inject
import org.opalj.bdl.bDL.IssueElement
//import org.opalj.bdl.bDL.IssueTypes

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class BDLLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text (IssueElement ele){
		var String msg = "";
		
		if ( (ele.message != null) && (ele.message.length > 0) )
			msg = ": "+ ele.message;

		return getFromArray(ele.name,",") + msg;
	}
	
	/*def text(IssueTypes ele){
		return rn(ele.deadEdgesAnalysis) + rn(ele.unusedLocalVariables) + rn(ele.guardedAndUnguardedAccessAnalysis) + rn(ele.unusedMethodsAnalysis) + rn(ele.uselessComputationsAnalysis);
	}*/
	def rn(String txt){
		if (txt == null) return "";
		return txt;
	}
	/*def text(ModelContainer ele){
		ele.analysis.text + getFromArray(ele.analysis.name.titles);
	}*/
	
	/*def text(AnalysisElement ele){
		'name'
	}*/
	
	/*def text(ParameterContainer ele){
		ele.parameters.name;
	}*/
	
	def getFromArray(String[] ele, String seperator){
		var t = '';
		for (var i  = 0; i < ele.length; i++){
			if (t != '') t+=seperator;
			t += ele.get(i);
		}
		return t;
	}
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}

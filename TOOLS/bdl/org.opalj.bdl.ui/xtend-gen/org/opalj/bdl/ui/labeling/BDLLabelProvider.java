/**
 * generated by Xtext
 */
package org.opalj.bdl.ui.labeling;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.opalj.bdl.bDL.IssueElement;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class BDLLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public BDLLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final IssueElement ele) {
    String msg = "";
    boolean _and = false;
    String _message = ele.getMessage();
    boolean _notEquals = (!Objects.equal(_message, null));
    if (!_notEquals) {
      _and = false;
    } else {
      String _message_1 = ele.getMessage();
      int _length = _message_1.length();
      boolean _greaterThan = (_length > 0);
      _and = _greaterThan;
    }
    if (_and) {
      String _message_2 = ele.getMessage();
      String _plus = (": " + _message_2);
      msg = _plus;
    }
    EList<String> _name = ele.getName();
    String _fromArray = this.getFromArray(((String[])Conversions.unwrapArray(_name, String.class)), ",");
    return (_fromArray + msg);
  }
  
  /**
   * def text(IssueTypes ele){
   * return rn(ele.deadEdgesAnalysis) + rn(ele.unusedLocalVariables) + rn(ele.guardedAndUnguardedAccessAnalysis) + rn(ele.unusedMethodsAnalysis) + rn(ele.uselessComputationsAnalysis);
   * }
   */
  public String rn(final String txt) {
    boolean _equals = Objects.equal(txt, null);
    if (_equals) {
      return "";
    }
    return txt;
  }
  
  /**
   * def text(ParameterContainer ele){
   * ele.parameters.name;
   * }
   */
  public String getFromArray(final String[] ele, final String seperator) {
    String t = "";
    for (int i = 0; (i < ele.length); i++) {
      {
        boolean _notEquals = (!Objects.equal(t, ""));
        if (_notEquals) {
          String _t = t;
          t = (_t + seperator);
        }
        String _t_1 = t;
        String _get = ele[i];
        t = (_t_1 + _get);
      }
    }
    return t;
  }
}

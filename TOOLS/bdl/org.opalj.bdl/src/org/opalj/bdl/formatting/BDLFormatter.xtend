/*
 * generated by Xtext
 */
package org.opalj.bdl.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.google.inject.Inject
import org.opalj.bdl.services.BDLGrammarAccess

/** 
 * This class contains custom formatting declarations.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class BDLFormatter extends AbstractDeclarativeFormatter {
	@Inject package extension BDLGrammarAccess

	// It's usually a good idea to activate the following three statements.
	// They will add and preserve newlines around comments
	override protected void configureFormatting(FormattingConfig c) {
		var gram = grammarAccess as BDLGrammarAccess 

// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
		
		c.setLinewrap(1, 1, 1).after(gram.analysisElementRule)
		c.setLinewrap(1, 1, 1).after(gram.parametersElementRule)
			c.setLinewrap(1, 1, 1).after(gram.parameterElementRule)
			c.setIndentationIncrement.before(gram.parameterElementRule)
			c.setIndentationDecrement.after(gram.parameterElementRule)
		c.setLinewrap(1, 1, 1).after(gram.issuesTitleElementRule)
		c.setLinewrap(1, 1, 1).around(gram.issueElementRule)
			c.setIndentationIncrement.before(gram.issueCategoryElementRule)
			c.setLinewrap(1, 1, 1).before(gram.issueCategoryElementRule);
			c.setLinewrap(1, 1, 1).before(gram.issueKindElementRule);
			c.setLinewrap(1, 1, 1).before(gram.issueRelevanceElementRule);
			c.setLinewrap(1, 1, 1).before(gram.issuePackageElementRule);
			c.setLinewrap(1, 1, 1).around(gram.issueClassElementRule);
			c.setIndentationDecrement.after(gram.issueClassElementRule)
	}
	
}

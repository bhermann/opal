/**
 * generated by Xtext
 */
package org.opalj.bdl.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.opalj.bdl.bDL.BDLPackage;
import org.opalj.bdl.bDL.ParameterContainer;
import org.opalj.bdl.bDL.ParameterElement;
import org.opalj.bdl.bDL.ParameterKeyValueElement;
import org.opalj.bdl.validation.AbstractBDLValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class BDLValidator extends AbstractBDLValidator {
  public final static String INVALID_VALUE = "invalidValue";
  
  public final static String INVALID_NAME = "invalidName";
  
  @Check
  public void checkKeyValueParameter(final ParameterKeyValueElement element) {
    String _name = element.getName();
    String _lowerCase = _name.toLowerCase();
    boolean _endsWith = _lowerCase.endsWith("time");
    if (_endsWith) {
      String _value = element.getValue();
      String _lowerCase_1 = _value.toLowerCase();
      boolean _matches = _lowerCase_1.matches("[0-9]+[s|ms]");
      boolean _not = (!_matches);
      if (_not) {
        this.error("Parameter value should be a valid time ending with \"s\" or \"ms\"!", 
          BDLPackage.Literals.PARAMETER_KEY_VALUE_ELEMENT__VALUE, 
          BDLValidator.INVALID_VALUE);
      }
    }
    String _name_1 = element.getName();
    String _lowerCase_2 = _name_1.toLowerCase();
    boolean _endsWith_1 = _lowerCase_2.endsWith("factor");
    if (_endsWith_1) {
      String _value_1 = element.getValue();
      String _lowerCase_3 = _value_1.toLowerCase();
      boolean _matches_1 = _lowerCase_3.matches("[0-9]+(\\.[0-9]+)?|infinity");
      boolean _not_1 = (!_matches_1);
      if (_not_1) {
        this.error("Parameter value should be a valid factor!", 
          BDLPackage.Literals.PARAMETER_KEY_VALUE_ELEMENT__VALUE, 
          BDLValidator.INVALID_VALUE);
      }
    }
  }
  
  @Check
  public void check(final ParameterContainer container) {
    EList<ParameterElement> _elements = container.getElements();
    for (final ParameterElement e : _elements) {
      EList<ParameterElement> _elements_1 = container.getElements();
      for (final ParameterElement other : _elements_1) {
        boolean _notEquals = (!Objects.equal(other, e));
        if (_notEquals) {
          String _name = e.getName();
          String _name_1 = other.getName();
          boolean _equals = _name.equals(_name_1);
          if (_equals) {
            this.error("Every parameter can only occur once!", other, BDLPackage.Literals.PARAMETER_ELEMENT__NAME, BDLValidator.INVALID_NAME);
          }
        }
      }
    }
  }
}

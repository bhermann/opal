/*
 * generated by Xtext
 */
grammar InternalBDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.opalj.bdl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.opalj.bdl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.opalj.bdl.services.BDLGrammarAccess;

}

@parser::members {

 	private BDLGrammarAccess grammarAccess;
 	
    public InternalBDLParser(TokenStream input, BDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected BDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModelAccess().getModelContainerParserRuleCall()); 
    }
    this_ModelContainer_0=ruleModelContainer
    { 
        $current = $this_ModelContainer_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleModelContainer
entryRuleModelContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelContainerRule()); }
	 iv_ruleModelContainer=ruleModelContainer 
	 { $current=$iv_ruleModelContainer.current; } 
	 EOF 
;

// Rule ModelContainer
ruleModelContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelContainerAccess().getNameAnalysisElementParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAnalysisElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelContainerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"AnalysisElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelContainerAccess().getParameterParameterContainerParserRuleCall_1_0()); 
	    }
		lv_parameter_1_0=ruleParameterContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelContainerRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_1_0, 
        		"ParameterContainer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelContainerAccess().getIssuesIssuesContainerParserRuleCall_2_0()); 
	    }
		lv_issues_2_0=ruleIssuesContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelContainerRule());
	        }
       		set(
       			$current, 
       			"issues",
        		lv_issues_2_0, 
        		"IssuesContainer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnalysisElement
entryRuleAnalysisElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnalysisElementRule()); } 
	 iv_ruleAnalysisElement=ruleAnalysisElement 
	 { $current=$iv_ruleAnalysisElement.current.getText(); }  
	 EOF 
;

// Rule AnalysisElement
ruleAnalysisElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='Analysis of ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getAnalysisOfKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAnalysisElementAccess().getIDTerminalRuleCall_1_0()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getColonKeyword_1_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getSolidusKeyword_1_2()); 
    }

    |
	kw='\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getReverseSolidusKeyword_1_3()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getCommaKeyword_1_4()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnalysisElementAccess().getFullStopKeyword_1_5()); 
    }
)+)
    ;





// Entry rule entryRuleParameterContainer
entryRuleParameterContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterContainerRule()); }
	 iv_ruleParameterContainer=ruleParameterContainer 
	 { $current=$iv_ruleParameterContainer.current; } 
	 EOF 
;

// Rule ParameterContainer
ruleParameterContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterContainerAccess().getNameParametersElementParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleParametersElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterContainerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ParametersElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterContainerAccess().getElementsParameterElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleParameterElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterContainerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"ParameterElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleParametersElement
entryRuleParametersElement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersElementRule()); } 
	 iv_ruleParametersElement=ruleParametersElement 
	 { $current=$iv_ruleParametersElement.current.getText(); }  
	 EOF 
;

// Rule ParametersElement
ruleParametersElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Parameters' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersElementAccess().getParametersKeyword()); 
    }

    ;





// Entry rule entryRuleParameterElement
entryRuleParameterElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterElementRule()); }
	 iv_ruleParameterElement=ruleParameterElement 
	 { $current=$iv_ruleParameterElement.current; } 
	 EOF 
;

// Rule ParameterElement
ruleParameterElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterElementAccess().getParameterKeyValueElementParserRuleCall_0()); 
    }
    this_ParameterKeyValueElement_0=ruleParameterKeyValueElement
    { 
        $current = $this_ParameterKeyValueElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterElementAccess().getParameterKeyElementParserRuleCall_1()); 
    }
    this_ParameterKeyElement_1=ruleParameterKeyElement
    { 
        $current = $this_ParameterKeyElement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParameterKeyValueElement
entryRuleParameterKeyValueElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterKeyValueElementRule()); }
	 iv_ruleParameterKeyValueElement=ruleParameterKeyValueElement 
	 { $current=$iv_ruleParameterKeyValueElement.current; } 
	 EOF 
;

// Rule ParameterKeyValueElement
ruleParameterKeyValueElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterKeyValueElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterKeyValueElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterKeyValueElementAccess().getColonKeyword_1_0());
    }

    |	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterKeyValueElementAccess().getEqualsSignKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterKeyValueElementAccess().getValueAnyValuesParserRuleCall_2_0()); 
	    }
		lv_value_3_0=ruleAnyValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterKeyValueElementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"AnyValues");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterKeyElement
entryRuleParameterKeyElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterKeyElementRule()); }
	 iv_ruleParameterKeyElement=ruleParameterKeyElement 
	 { $current=$iv_ruleParameterKeyElement.current; } 
	 EOF 
;

// Rule ParameterKeyElement
ruleParameterKeyElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterKeyElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterKeyElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterKeyElementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleIssuesContainer
entryRuleIssuesContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssuesContainerRule()); }
	 iv_ruleIssuesContainer=ruleIssuesContainer 
	 { $current=$iv_ruleIssuesContainer.current; } 
	 EOF 
;

// Rule IssuesContainer
ruleIssuesContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIssuesContainerAccess().getIssuesTitleElementParserRuleCall_0()); 
    }
    this_IssuesTitleElement_0=ruleIssuesTitleElement
    { 
        $current = $this_IssuesTitleElement_0.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIssuesContainerAccess().getElementsIssueElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleIssueElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssuesContainerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"IssueElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleIssuesTitleElement
entryRuleIssuesTitleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssuesTitleElementRule()); }
	 iv_ruleIssuesTitleElement=ruleIssuesTitleElement 
	 { $current=$iv_ruleIssuesTitleElement.current; } 
	 EOF 
;

// Rule IssuesTitleElement
ruleIssuesTitleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'Issues' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssuesTitleElementAccess().getNameIssuesKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssuesTitleElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Issues");
	    }

)
)
;





// Entry rule entryRuleIssueElement
entryRuleIssueElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueElementRule()); }
	 iv_ruleIssueElement=ruleIssueElement 
	 { $current=$iv_ruleIssueElement.current; } 
	 EOF 
;

// Rule IssueElement
ruleIssueElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getNameIssueTypesParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIssueTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"IssueTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIssueElementAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getNameIssueTypesParserRuleCall_1_1_0()); 
	    }
		lv_name_2_0=ruleIssueTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"IssueTypes");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getCommentIssueSuppressCommentParserRuleCall_2_0()); 
	    }
		lv_comment_3_0=ruleIssueSuppressComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_3_0, 
        		"IssueSuppressComment");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIssueElementAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		lv_message_5_0=RULE_STRING
		{
			newLeafNode(lv_message_5_0, grammarAccess.getIssueElementAccess().getMessageSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"message",
        		lv_message_5_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getCategoriesIssueCategoryElementParserRuleCall_5_0()); 
	    }
		lv_categories_6_0=ruleIssueCategoryElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"categories",
        		lv_categories_6_0, 
        		"IssueCategoryElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getKindsIssueKindElementParserRuleCall_6_0()); 
	    }
		lv_kinds_7_0=ruleIssueKindElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"kinds",
        		lv_kinds_7_0, 
        		"IssueKindElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getRelevanceIssueRelevanceElementParserRuleCall_7_0()); 
	    }
		lv_relevance_8_0=ruleIssueRelevanceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"relevance",
        		lv_relevance_8_0, 
        		"IssueRelevanceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getPackageIssuePackageElementParserRuleCall_8_0()); 
	    }
		lv_package_9_0=ruleIssuePackageElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_9_0, 
        		"IssuePackageElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueElementAccess().getClassIssueClassElementParserRuleCall_9_0()); 
	    }
		lv_class_10_0=ruleIssueClassElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueElementRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_10_0, 
        		"IssueClassElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIssueElementAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleIssueSuppressComment
entryRuleIssueSuppressComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueSuppressCommentRule()); }
	 iv_ruleIssueSuppressComment=ruleIssueSuppressComment 
	 { $current=$iv_ruleIssueSuppressComment.current; } 
	 EOF 
;

// Rule IssueSuppressComment
ruleIssueSuppressComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[suppress=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIssueSuppressCommentAccess().getSuppressKeyword_0());
    }
(
(
(
		lv_value_1_1=RULE_ID
		{
			newLeafNode(lv_value_1_1, grammarAccess.getIssueSuppressCommentAccess().getValueIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueSuppressCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_1, 
        		"ID");
	    }

    |		lv_value_1_2=RULE_STRING
		{
			newLeafNode(lv_value_1_2, grammarAccess.getIssueSuppressCommentAccess().getValueSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueSuppressCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_2, 
        		"STRING");
	    }

)

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIssueSuppressCommentAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleIssueCategoryElement
entryRuleIssueCategoryElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueCategoryElementRule()); }
	 iv_ruleIssueCategoryElement=ruleIssueCategoryElement 
	 { $current=$iv_ruleIssueCategoryElement.current; } 
	 EOF 
;

// Rule IssueCategoryElement
ruleIssueCategoryElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Categories:' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssueCategoryElementAccess().getNameCategoriesKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueCategoryElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Categories:");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueCategoryElementAccess().getElementsIssueCategoriesParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleIssueCategories		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueCategoryElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"IssueCategories");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIssueCategoryElementAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueCategoryElementAccess().getElementsIssueCategoriesParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleIssueCategories		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueCategoryElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"IssueCategories");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIssueKindElement
entryRuleIssueKindElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueKindElementRule()); }
	 iv_ruleIssueKindElement=ruleIssueKindElement 
	 { $current=$iv_ruleIssueKindElement.current; } 
	 EOF 
;

// Rule IssueKindElement
ruleIssueKindElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Kinds:' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssueKindElementAccess().getNameKindsKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueKindElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Kinds:");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueKindElementAccess().getElementsIssueKindsParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleIssueKinds		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueKindElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"IssueKinds");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIssueKindElementAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueKindElementAccess().getElementsIssueKindsParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleIssueKinds		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueKindElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"IssueKinds");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIssueRelevanceElement
entryRuleIssueRelevanceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueRelevanceElementRule()); }
	 iv_ruleIssueRelevanceElement=ruleIssueRelevanceElement 
	 { $current=$iv_ruleIssueRelevanceElement.current; } 
	 EOF 
;

// Rule IssueRelevanceElement
ruleIssueRelevanceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Relevance:' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssueRelevanceElementAccess().getNameRelevanceKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueRelevanceElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Relevance:");
	    }

)
)(
(
		lv_relevance_1_0=RULE_INT
		{
			newLeafNode(lv_relevance_1_0, grammarAccess.getIssueRelevanceElementAccess().getRelevanceINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueRelevanceElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"relevance",
        		lv_relevance_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleIssuePackageElement
entryRuleIssuePackageElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssuePackageElementRule()); }
	 iv_ruleIssuePackageElement=ruleIssuePackageElement 
	 { $current=$iv_ruleIssuePackageElement.current; } 
	 EOF 
;

// Rule IssuePackageElement
ruleIssuePackageElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Package:' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssuePackageElementAccess().getNamePackageKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssuePackageElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Package:");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssuePackageElementAccess().getPackageSlashPathParserRuleCall_1_0()); 
	    }
		lv_package_1_0=ruleSlashPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssuePackageElementRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"SlashPath");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIssueClassElement
entryRuleIssueClassElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueClassElementRule()); }
	 iv_ruleIssueClassElement=ruleIssueClassElement 
	 { $current=$iv_ruleIssueClassElement.current; } 
	 EOF 
;

// Rule IssueClassElement
ruleIssueClassElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'Class:' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getIssueClassElementAccess().getNameClassKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueClassElementRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "Class:");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIssueClassElementAccess().getClassIssueClassParserRuleCall_1_0()); 
	    }
		lv_class_1_0=ruleIssueClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIssueClassElementRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_1_0, 
        		"IssueClass");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIssueTypes
entryRuleIssueTypes returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueTypesRule()); } 
	 iv_ruleIssueTypes=ruleIssueTypes 
	 { $current=$iv_ruleIssueTypes.current.getText(); }  
	 EOF 
;

// Rule IssueTypes
ruleIssueTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='DeadEdgesAnalysis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueTypesAccess().getDeadEdgesAnalysisKeyword_0()); 
    }

    |
	kw='UnusedLocalVariables' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueTypesAccess().getUnusedLocalVariablesKeyword_1()); 
    }

    |
	kw='GuardedAndUnguardedAccessAnalysis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueTypesAccess().getGuardedAndUnguardedAccessAnalysisKeyword_2()); 
    }

    |
	kw='UnusedMethodsAnalysis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueTypesAccess().getUnusedMethodsAnalysisKeyword_3()); 
    }

    |
	kw='UselessComputationsAnalysis' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueTypesAccess().getUselessComputationsAnalysisKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIssueCategories
entryRuleIssueCategories returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueCategoriesRule()); }
	 iv_ruleIssueCategories=ruleIssueCategories 
	 { $current=$iv_ruleIssueCategories.current; } 
	 EOF 
;

// Rule IssueCategories
ruleIssueCategories returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_bug_0_0=	'bug' 
    {
        newLeafNode(lv_bug_0_0, grammarAccess.getIssueCategoriesAccess().getBugBugKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueCategoriesRule());
	        }
       		setWithLastConsumed($current, "bug", lv_bug_0_0, "bug");
	    }

)
)
    |(
(
		lv_smell_1_0=	'smell' 
    {
        newLeafNode(lv_smell_1_0, grammarAccess.getIssueCategoriesAccess().getSmellSmellKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueCategoriesRule());
	        }
       		setWithLastConsumed($current, "smell", lv_smell_1_0, "smell");
	    }

)
)
    |(
(
		lv_performance_2_0=	'performance' 
    {
        newLeafNode(lv_performance_2_0, grammarAccess.getIssueCategoriesAccess().getPerformancePerformanceKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueCategoriesRule());
	        }
       		setWithLastConsumed($current, "performance", lv_performance_2_0, "performance");
	    }

)
)
    |(
(
		lv_comprehensibility_3_0=	'comprehensibility' 
    {
        newLeafNode(lv_comprehensibility_3_0, grammarAccess.getIssueCategoriesAccess().getComprehensibilityComprehensibilityKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIssueCategoriesRule());
	        }
       		setWithLastConsumed($current, "comprehensibility", lv_comprehensibility_3_0, "comprehensibility");
	    }

)
))
;





// Entry rule entryRuleIssueKinds
entryRuleIssueKinds returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueKindsRule()); } 
	 iv_ruleIssueKinds=ruleIssueKinds 
	 { $current=$iv_ruleIssueKinds.current.getText(); }  
	 EOF 
;

// Rule IssueKinds
ruleIssueKinds returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='constant computation' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getConstantComputationKeyword_0()); 
    }

    |
	kw='dead path' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getDeadPathKeyword_1()); 
    }

    |
	kw='throws exception' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getThrowsExceptionKeyword_2()); 
    }

    |
	kw='unguarded use' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getUnguardedUseKeyword_3()); 
    }

    |
	kw='unused' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getUnusedKeyword_4()); 
    }

    |
	kw='useless' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueKindsAccess().getUselessKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleIssueClass
entryRuleIssueClass returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIssueClassRule()); } 
	 iv_ruleIssueClass=ruleIssueClass 
	 { $current=$iv_ruleIssueClass.current.getText(); }  
	 EOF 
;

// Rule IssueClass
ruleIssueClass returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIssueClassAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueClassAccess().getDollarSignKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getIssueClassAccess().getIDTerminalRuleCall_1_1()); 
    }
)*(
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIssueClassAccess().getDollarSignKeyword_2_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getIssueClassAccess().getINTTerminalRuleCall_2_1()); 
    }
)*)
    ;





// Entry rule entryRuleAnyValues
entryRuleAnyValues returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyValuesRule()); } 
	 iv_ruleAnyValues=ruleAnyValues 
	 { $current=$iv_ruleAnyValues.current.getText(); }  
	 EOF 
;

// Rule AnyValues
ruleAnyValues returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getAnyValuesAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAnyValuesAccess().getIDTerminalRuleCall_1()); 
    }

    |(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAnyValuesAccess().getINTTerminalRuleCall_2_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getAnyValuesAccess().getIDTerminalRuleCall_2_1()); 
    }
)
    |(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getAnyValuesAccess().getINTTerminalRuleCall_3_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAnyValuesAccess().getFullStopKeyword_3_1()); 
    }
    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    newLeafNode(this_INT_6, grammarAccess.getAnyValuesAccess().getINTTerminalRuleCall_3_2()); 
    }
))
    ;









// Entry rule entryRuleSlashPath
entryRuleSlashPath returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSlashPathRule()); } 
	 iv_ruleSlashPath=ruleSlashPath 
	 { $current=$iv_ruleSlashPath.current.getText(); }  
	 EOF 
;

// Rule SlashPath
ruleSlashPath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSlashPathAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSlashPathAccess().getSolidusKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getSlashPathAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



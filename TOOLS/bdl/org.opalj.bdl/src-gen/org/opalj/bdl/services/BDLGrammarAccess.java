/*
 * generated by Xtext
 */
package org.opalj.bdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cModelContainerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	ModelContainer;
		@Override public ParserRule getRule() { return rule; }

		//ModelContainer
		public RuleCall getModelContainerParserRuleCall() { return cModelContainerParserRuleCall; }
	}

	public class ModelContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAnalysisElementParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterParameterContainerParserRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		private final Assignment cIssuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIssuesIssuesContainerParserRuleCall_2_0 = (RuleCall)cIssuesAssignment_2.eContents().get(0);
		
		////greetings+=AnalysisElement*;
		//ModelContainer:
		//	name=AnalysisElement parameter=ParameterContainer issues=IssuesContainer;
		@Override public ParserRule getRule() { return rule; }

		//name=AnalysisElement parameter=ParameterContainer issues=IssuesContainer
		public Group getGroup() { return cGroup; }

		//name=AnalysisElement
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//AnalysisElement
		public RuleCall getNameAnalysisElementParserRuleCall_0_0() { return cNameAnalysisElementParserRuleCall_0_0; }

		//parameter=ParameterContainer
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//ParameterContainer
		public RuleCall getParameterParameterContainerParserRuleCall_1_0() { return cParameterParameterContainerParserRuleCall_1_0; }

		//issues=IssuesContainer
		public Assignment getIssuesAssignment_2() { return cIssuesAssignment_2; }

		//IssuesContainer
		public RuleCall getIssuesIssuesContainerParserRuleCall_2_0() { return cIssuesIssuesContainerParserRuleCall_2_0; }
	}

	public class AnalysisElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalysisElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalysisOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cReverseSolidusKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_5 = (Keyword)cAlternatives_1.eContents().get(5);
		
		//AnalysisElement:
		//	"Analysis of " (ID | ":" | "/" | "\\" | "," | ".")+;
		@Override public ParserRule getRule() { return rule; }

		//"Analysis of " (ID | ":" | "/" | "\\" | "," | ".")+
		public Group getGroup() { return cGroup; }

		//"Analysis of "
		public Keyword getAnalysisOfKeyword_0() { return cAnalysisOfKeyword_0; }

		//(ID | ":" | "/" | "\\" | "," | ".")+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"/"
		public Keyword getSolidusKeyword_1_2() { return cSolidusKeyword_1_2; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_3() { return cReverseSolidusKeyword_1_3; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//"."
		public Keyword getFullStopKeyword_1_5() { return cFullStopKeyword_1_5; }
	}

	public class ParameterContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameParametersElementParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsParameterElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		////ParameterTimeElement
		//ParameterContainer:
		//	name=ParametersElement elements+=ParameterElement+;
		@Override public ParserRule getRule() { return rule; }

		//name=ParametersElement elements+=ParameterElement+
		public Group getGroup() { return cGroup; }

		//name=ParametersElement
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ParametersElement
		public RuleCall getNameParametersElementParserRuleCall_0_0() { return cNameParametersElementParserRuleCall_0_0; }

		//elements+=ParameterElement+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//ParameterElement
		public RuleCall getElementsParameterElementParserRuleCall_1_0() { return cElementsParameterElementParserRuleCall_1_0; }
	}

	public class ParametersElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametersElement");
		private final Keyword cParametersKeyword = (Keyword)rule.eContents().get(1);
		
		//ParametersElement:
		//	"Parameters";
		@Override public ParserRule getRule() { return rule; }

		//"Parameters"
		public Keyword getParametersKeyword() { return cParametersKeyword; }
	}

	public class ParameterElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterKeyValueElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterKeyElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterElement:
		//	ParameterKeyValueElement | ParameterKeyElement;
		@Override public ParserRule getRule() { return rule; }

		//ParameterKeyValueElement | ParameterKeyElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterKeyValueElement
		public RuleCall getParameterKeyValueElementParserRuleCall_0() { return cParameterKeyValueElementParserRuleCall_0; }

		//ParameterKeyElement
		public RuleCall getParameterKeyElementParserRuleCall_1() { return cParameterKeyElementParserRuleCall_1; }
	}

	public class ParameterKeyValueElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterKeyValueElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAnyValuesParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterKeyValueElement:
		//	name=ID (":" | "=") value=AnyValues;
		@Override public ParserRule getRule() { return rule; }

		//name=ID (":" | "=") value=AnyValues
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":" | "="
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//value=AnyValues
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AnyValues
		public RuleCall getValueAnyValuesParserRuleCall_2_0() { return cValueAnyValuesParserRuleCall_2_0; }
	}

	public class ParameterKeyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterKeyElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterKeyElement:
		//	name=ID ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class IssuesContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssuesContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIssuesTitleElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsIssueElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//IssuesContainer:
		//	IssuesTitleElement elements+=IssueElement*;
		@Override public ParserRule getRule() { return rule; }

		//IssuesTitleElement elements+=IssueElement*
		public Group getGroup() { return cGroup; }

		//IssuesTitleElement
		public RuleCall getIssuesTitleElementParserRuleCall_0() { return cIssuesTitleElementParserRuleCall_0; }

		//elements+=IssueElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//IssueElement
		public RuleCall getElementsIssueElementParserRuleCall_1_0() { return cElementsIssueElementParserRuleCall_1_0; }
	}

	public class IssuesTitleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssuesTitleElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameIssuesKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//IssuesTitleElement:
		//	name="Issues";
		@Override public ParserRule getRule() { return rule; }

		//name="Issues"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"Issues"
		public Keyword getNameIssuesKeyword_0() { return cNameIssuesKeyword_0; }
	}

	public class IssueElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIssueTypesParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIssueTypesParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentIssueSuppressCommentParserRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMessageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessageSTRINGTerminalRuleCall_4_0 = (RuleCall)cMessageAssignment_4.eContents().get(0);
		private final Assignment cCategoriesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCategoriesIssueCategoryElementParserRuleCall_5_0 = (RuleCall)cCategoriesAssignment_5.eContents().get(0);
		private final Assignment cKindsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cKindsIssueKindElementParserRuleCall_6_0 = (RuleCall)cKindsAssignment_6.eContents().get(0);
		private final Assignment cRelevanceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRelevanceIssueRelevanceElementParserRuleCall_7_0 = (RuleCall)cRelevanceAssignment_7.eContents().get(0);
		private final Assignment cPackageAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPackageIssuePackageElementParserRuleCall_8_0 = (RuleCall)cPackageAssignment_8.eContents().get(0);
		private final Assignment cClassAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cClassIssueClassElementParserRuleCall_9_0 = (RuleCall)cClassAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IssueElement:
		//	name+=IssueTypes ("," name+=IssueTypes)* comment=IssueSuppressComment? "{" message=STRING?
		//	categories=IssueCategoryElement kinds=IssueKindElement relevance=IssueRelevanceElement package=IssuePackageElement
		//	class=IssueClassElement "}";
		@Override public ParserRule getRule() { return rule; }

		//name+=IssueTypes ("," name+=IssueTypes)* comment=IssueSuppressComment? "{" message=STRING?
		//categories=IssueCategoryElement kinds=IssueKindElement relevance=IssueRelevanceElement package=IssuePackageElement
		//class=IssueClassElement "}"
		public Group getGroup() { return cGroup; }

		//name+=IssueTypes
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IssueTypes
		public RuleCall getNameIssueTypesParserRuleCall_0_0() { return cNameIssueTypesParserRuleCall_0_0; }

		//("," name+=IssueTypes)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=IssueTypes
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//IssueTypes
		public RuleCall getNameIssueTypesParserRuleCall_1_1_0() { return cNameIssueTypesParserRuleCall_1_1_0; }

		//comment=IssueSuppressComment?
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//IssueSuppressComment
		public RuleCall getCommentIssueSuppressCommentParserRuleCall_2_0() { return cCommentIssueSuppressCommentParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//message=STRING?
		public Assignment getMessageAssignment_4() { return cMessageAssignment_4; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_4_0() { return cMessageSTRINGTerminalRuleCall_4_0; }

		//categories=IssueCategoryElement
		public Assignment getCategoriesAssignment_5() { return cCategoriesAssignment_5; }

		//IssueCategoryElement
		public RuleCall getCategoriesIssueCategoryElementParserRuleCall_5_0() { return cCategoriesIssueCategoryElementParserRuleCall_5_0; }

		//kinds=IssueKindElement
		public Assignment getKindsAssignment_6() { return cKindsAssignment_6; }

		//IssueKindElement
		public RuleCall getKindsIssueKindElementParserRuleCall_6_0() { return cKindsIssueKindElementParserRuleCall_6_0; }

		//relevance=IssueRelevanceElement
		public Assignment getRelevanceAssignment_7() { return cRelevanceAssignment_7; }

		//IssueRelevanceElement
		public RuleCall getRelevanceIssueRelevanceElementParserRuleCall_7_0() { return cRelevanceIssueRelevanceElementParserRuleCall_7_0; }

		//package=IssuePackageElement
		public Assignment getPackageAssignment_8() { return cPackageAssignment_8; }

		//IssuePackageElement
		public RuleCall getPackageIssuePackageElementParserRuleCall_8_0() { return cPackageIssuePackageElementParserRuleCall_8_0; }

		//class=IssueClassElement
		public Assignment getClassAssignment_9() { return cClassAssignment_9; }

		//IssueClassElement
		public RuleCall getClassIssueClassElementParserRuleCall_9_0() { return cClassIssueClassElementParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class IssueSuppressCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueSuppressComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuppressKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_1_0_0 = (RuleCall)cValueAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IssueSuppressComment:
		//	"[suppress=" value=(ID | STRING) "]";
		@Override public ParserRule getRule() { return rule; }

		//"[suppress=" value=(ID | STRING) "]"
		public Group getGroup() { return cGroup; }

		//"[suppress="
		public Keyword getSuppressKeyword_0() { return cSuppressKeyword_0; }

		//value=(ID | STRING)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ID | STRING
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0_0() { return cValueIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_1() { return cValueSTRINGTerminalRuleCall_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class IssueCategoryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueCategoryElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCategoriesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsIssueCategoriesParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsIssueCategoriesParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		
		//IssueCategoryElement:
		//	name="Categories:" elements+=IssueCategories ("," elements+=IssueCategories)*;
		@Override public ParserRule getRule() { return rule; }

		//name="Categories:" elements+=IssueCategories ("," elements+=IssueCategories)*
		public Group getGroup() { return cGroup; }

		//name="Categories:"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Categories:"
		public Keyword getNameCategoriesKeyword_0_0() { return cNameCategoriesKeyword_0_0; }

		//elements+=IssueCategories
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//IssueCategories
		public RuleCall getElementsIssueCategoriesParserRuleCall_1_0() { return cElementsIssueCategoriesParserRuleCall_1_0; }

		//("," elements+=IssueCategories)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=IssueCategories
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//IssueCategories
		public RuleCall getElementsIssueCategoriesParserRuleCall_2_1_0() { return cElementsIssueCategoriesParserRuleCall_2_1_0; }
	}

	public class IssueKindElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueKindElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameKindsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsIssueKindsParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsIssueKindsParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		
		//IssueKindElement:
		//	name="Kinds:" elements+=IssueKinds ("," elements+=IssueKinds)*;
		@Override public ParserRule getRule() { return rule; }

		//name="Kinds:" elements+=IssueKinds ("," elements+=IssueKinds)*
		public Group getGroup() { return cGroup; }

		//name="Kinds:"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Kinds:"
		public Keyword getNameKindsKeyword_0_0() { return cNameKindsKeyword_0_0; }

		//elements+=IssueKinds
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//IssueKinds
		public RuleCall getElementsIssueKindsParserRuleCall_1_0() { return cElementsIssueKindsParserRuleCall_1_0; }

		//("," elements+=IssueKinds)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//elements+=IssueKinds
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//IssueKinds
		public RuleCall getElementsIssueKindsParserRuleCall_2_1_0() { return cElementsIssueKindsParserRuleCall_2_1_0; }
	}

	public class IssueRelevanceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueRelevanceElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRelevanceKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cRelevanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelevanceINTTerminalRuleCall_1_0 = (RuleCall)cRelevanceAssignment_1.eContents().get(0);
		
		//IssueRelevanceElement:
		//	name="Relevance:" relevance=INT;
		@Override public ParserRule getRule() { return rule; }

		//name="Relevance:" relevance=INT
		public Group getGroup() { return cGroup; }

		//name="Relevance:"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Relevance:"
		public Keyword getNameRelevanceKeyword_0_0() { return cNameRelevanceKeyword_0_0; }

		//relevance=INT
		public Assignment getRelevanceAssignment_1() { return cRelevanceAssignment_1; }

		//INT
		public RuleCall getRelevanceINTTerminalRuleCall_1_0() { return cRelevanceINTTerminalRuleCall_1_0; }
	}

	public class IssuePackageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssuePackageElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePackageKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageSlashPathParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		
		//IssuePackageElement:
		//	name="Package:" package=SlashPath;
		@Override public ParserRule getRule() { return rule; }

		//name="Package:" package=SlashPath
		public Group getGroup() { return cGroup; }

		//name="Package:"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Package:"
		public Keyword getNamePackageKeyword_0_0() { return cNamePackageKeyword_0_0; }

		//package=SlashPath
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//SlashPath
		public RuleCall getPackageSlashPathParserRuleCall_1_0() { return cPackageSlashPathParserRuleCall_1_0; }
	}

	public class IssueClassElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueClassElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameClassKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassIssueClassParserRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		
		//IssueClassElement:
		//	name="Class:" class=IssueClass;
		@Override public ParserRule getRule() { return rule; }

		//name="Class:" class=IssueClass
		public Group getGroup() { return cGroup; }

		//name="Class:"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Class:"
		public Keyword getNameClassKeyword_0_0() { return cNameClassKeyword_0_0; }

		//class=IssueClass
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//IssueClass
		public RuleCall getClassIssueClassParserRuleCall_1_0() { return cClassIssueClassParserRuleCall_1_0; }
	}

	public class IssueTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDeadEdgesAnalysisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnusedLocalVariablesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGuardedAndUnguardedAccessAnalysisKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUnusedMethodsAnalysisKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUselessComputationsAnalysisKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//IssueTypes:
		//	"DeadEdgesAnalysis" | "UnusedLocalVariables" | "GuardedAndUnguardedAccessAnalysis" | "UnusedMethodsAnalysis" |
		//	"UselessComputationsAnalysis";
		@Override public ParserRule getRule() { return rule; }

		//"DeadEdgesAnalysis" | "UnusedLocalVariables" | "GuardedAndUnguardedAccessAnalysis" | "UnusedMethodsAnalysis" |
		//"UselessComputationsAnalysis"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"DeadEdgesAnalysis"
		public Keyword getDeadEdgesAnalysisKeyword_0() { return cDeadEdgesAnalysisKeyword_0; }

		//"UnusedLocalVariables"
		public Keyword getUnusedLocalVariablesKeyword_1() { return cUnusedLocalVariablesKeyword_1; }

		//"GuardedAndUnguardedAccessAnalysis"
		public Keyword getGuardedAndUnguardedAccessAnalysisKeyword_2() { return cGuardedAndUnguardedAccessAnalysisKeyword_2; }

		//"UnusedMethodsAnalysis"
		public Keyword getUnusedMethodsAnalysisKeyword_3() { return cUnusedMethodsAnalysisKeyword_3; }

		//"UselessComputationsAnalysis"
		public Keyword getUselessComputationsAnalysisKeyword_4() { return cUselessComputationsAnalysisKeyword_4; }
	}

	public class IssueCategoriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueCategories");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBugAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBugBugKeyword_0_0 = (Keyword)cBugAssignment_0.eContents().get(0);
		private final Assignment cSmellAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSmellSmellKeyword_1_0 = (Keyword)cSmellAssignment_1.eContents().get(0);
		private final Assignment cPerformanceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPerformancePerformanceKeyword_2_0 = (Keyword)cPerformanceAssignment_2.eContents().get(0);
		private final Assignment cComprehensibilityAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cComprehensibilityComprehensibilityKeyword_3_0 = (Keyword)cComprehensibilityAssignment_3.eContents().get(0);
		
		//IssueCategories:
		//	bug="bug" | smell="smell" | performance="performance" | comprehensibility="comprehensibility";
		@Override public ParserRule getRule() { return rule; }

		//bug="bug" | smell="smell" | performance="performance" | comprehensibility="comprehensibility"
		public Alternatives getAlternatives() { return cAlternatives; }

		//bug="bug"
		public Assignment getBugAssignment_0() { return cBugAssignment_0; }

		//"bug"
		public Keyword getBugBugKeyword_0_0() { return cBugBugKeyword_0_0; }

		//smell="smell"
		public Assignment getSmellAssignment_1() { return cSmellAssignment_1; }

		//"smell"
		public Keyword getSmellSmellKeyword_1_0() { return cSmellSmellKeyword_1_0; }

		//performance="performance"
		public Assignment getPerformanceAssignment_2() { return cPerformanceAssignment_2; }

		//"performance"
		public Keyword getPerformancePerformanceKeyword_2_0() { return cPerformancePerformanceKeyword_2_0; }

		//comprehensibility="comprehensibility"
		public Assignment getComprehensibilityAssignment_3() { return cComprehensibilityAssignment_3; }

		//"comprehensibility"
		public Keyword getComprehensibilityComprehensibilityKeyword_3_0() { return cComprehensibilityComprehensibilityKeyword_3_0; }
	}

	public class IssueKindsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueKinds");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConstantComputationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDeadPathKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cThrowsExceptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUnguardedUseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnusedKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUselessKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//IssueKinds:
		//	"constant computation" | "dead path" | "throws exception" | "unguarded use" | "unused" | "useless";
		@Override public ParserRule getRule() { return rule; }

		//"constant computation" | "dead path" | "throws exception" | "unguarded use" | "unused" | "useless"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"constant computation"
		public Keyword getConstantComputationKeyword_0() { return cConstantComputationKeyword_0; }

		//"dead path"
		public Keyword getDeadPathKeyword_1() { return cDeadPathKeyword_1; }

		//"throws exception"
		public Keyword getThrowsExceptionKeyword_2() { return cThrowsExceptionKeyword_2; }

		//"unguarded use"
		public Keyword getUnguardedUseKeyword_3() { return cUnguardedUseKeyword_3; }

		//"unused"
		public Keyword getUnusedKeyword_4() { return cUnusedKeyword_4; }

		//"useless"
		public Keyword getUselessKeyword_5() { return cUselessKeyword_5; }
	}

	public class IssueClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IssueClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDollarSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//IssueClass:
		//	ID ("$" ID)* ("$" INT)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("$" ID)* ("$" INT)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("$" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"$"
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//("$" INT)*
		public Group getGroup_2() { return cGroup_2; }

		//"$"
		public Keyword getDollarSignKeyword_2_0() { return cDollarSignKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class AnyValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		////AnyValues: (INT|ID)+;
		//AnyValues:
		//	INT | ID | INT ID | INT "." INT;
		@Override public ParserRule getRule() { return rule; }

		//INT | ID | INT ID | INT "." INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//INT ID
		public Group getGroup_2() { return cGroup_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//INT "." INT
		public Group getGroup_3() { return cGroup_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_0() { return cINTTerminalRuleCall_3_0; }

		//"."
		public Keyword getFullStopKeyword_3_1() { return cFullStopKeyword_3_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_2() { return cINTTerminalRuleCall_3_2; }
	}

	public class FilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReverseSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//FilePath:
		//	"/"? ID ":"? ("\\" ID)* ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//"/"? ID ":"? ("\\" ID)* ("." ID)?
		public Group getGroup() { return cGroup; }

		//"/"?
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"?
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("\\" ID)*
		public Group getGroup_3() { return cGroup_3; }

		//"\\"
		public Keyword getReverseSolidusKeyword_3_0() { return cReverseSolidusKeyword_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }

		//("." ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }
	}

	public class AnalysisTitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalysisTitle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cReverseSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommaKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//AnalysisTitle:
		//	(ID | ":" | "/" | "\\" | "," | ".")+;
		@Override public ParserRule getRule() { return rule; }

		//(ID | ":" | "/" | "\\" | "," | ".")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"\\"
		public Keyword getReverseSolidusKeyword_3() { return cReverseSolidusKeyword_3; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
	}

	public class SlashPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SlashPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SlashPath:
		//	ID ("/" ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("/" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("/" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDollarSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		////terminal EXTENDED_ID:   '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'\\'|':'|'/'|'0'..'9')*;
		////terminal INTID  : '^'?('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		////terminal FLOAT	: INT ('.' INT)?; QualifiedName:
		//	ID ("." ID)* ("$" ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)* ("$" ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//("$" ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"$"
		public Keyword getDollarSignKeyword_2_0() { return cDollarSignKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final ModelContainerElements pModelContainer;
	private final AnalysisElementElements pAnalysisElement;
	private final ParameterContainerElements pParameterContainer;
	private final ParametersElementElements pParametersElement;
	private final ParameterElementElements pParameterElement;
	private final ParameterKeyValueElementElements pParameterKeyValueElement;
	private final ParameterKeyElementElements pParameterKeyElement;
	private final IssuesContainerElements pIssuesContainer;
	private final IssuesTitleElementElements pIssuesTitleElement;
	private final IssueElementElements pIssueElement;
	private final IssueSuppressCommentElements pIssueSuppressComment;
	private final IssueCategoryElementElements pIssueCategoryElement;
	private final IssueKindElementElements pIssueKindElement;
	private final IssueRelevanceElementElements pIssueRelevanceElement;
	private final IssuePackageElementElements pIssuePackageElement;
	private final IssueClassElementElements pIssueClassElement;
	private final IssueTypesElements pIssueTypes;
	private final IssueCategoriesElements pIssueCategories;
	private final IssueKindsElements pIssueKinds;
	private final IssueClassElements pIssueClass;
	private final AnyValuesElements pAnyValues;
	private final FilePathElements pFilePath;
	private final AnalysisTitleElements pAnalysisTitle;
	private final SlashPathElements pSlashPath;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelContainer = new ModelContainerElements();
		this.pAnalysisElement = new AnalysisElementElements();
		this.pParameterContainer = new ParameterContainerElements();
		this.pParametersElement = new ParametersElementElements();
		this.pParameterElement = new ParameterElementElements();
		this.pParameterKeyValueElement = new ParameterKeyValueElementElements();
		this.pParameterKeyElement = new ParameterKeyElementElements();
		this.pIssuesContainer = new IssuesContainerElements();
		this.pIssuesTitleElement = new IssuesTitleElementElements();
		this.pIssueElement = new IssueElementElements();
		this.pIssueSuppressComment = new IssueSuppressCommentElements();
		this.pIssueCategoryElement = new IssueCategoryElementElements();
		this.pIssueKindElement = new IssueKindElementElements();
		this.pIssueRelevanceElement = new IssueRelevanceElementElements();
		this.pIssuePackageElement = new IssuePackageElementElements();
		this.pIssueClassElement = new IssueClassElementElements();
		this.pIssueTypes = new IssueTypesElements();
		this.pIssueCategories = new IssueCategoriesElements();
		this.pIssueKinds = new IssueKindsElements();
		this.pIssueClass = new IssueClassElements();
		this.pAnyValues = new AnyValuesElements();
		this.pFilePath = new FilePathElements();
		this.pAnalysisTitle = new AnalysisTitleElements();
		this.pSlashPath = new SlashPathElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.opalj.bdl.BDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	ModelContainer;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////greetings+=AnalysisElement*;
	//ModelContainer:
	//	name=AnalysisElement parameter=ParameterContainer issues=IssuesContainer;
	public ModelContainerElements getModelContainerAccess() {
		return pModelContainer;
	}
	
	public ParserRule getModelContainerRule() {
		return getModelContainerAccess().getRule();
	}

	//AnalysisElement:
	//	"Analysis of " (ID | ":" | "/" | "\\" | "," | ".")+;
	public AnalysisElementElements getAnalysisElementAccess() {
		return pAnalysisElement;
	}
	
	public ParserRule getAnalysisElementRule() {
		return getAnalysisElementAccess().getRule();
	}

	////ParameterTimeElement
	//ParameterContainer:
	//	name=ParametersElement elements+=ParameterElement+;
	public ParameterContainerElements getParameterContainerAccess() {
		return pParameterContainer;
	}
	
	public ParserRule getParameterContainerRule() {
		return getParameterContainerAccess().getRule();
	}

	//ParametersElement:
	//	"Parameters";
	public ParametersElementElements getParametersElementAccess() {
		return pParametersElement;
	}
	
	public ParserRule getParametersElementRule() {
		return getParametersElementAccess().getRule();
	}

	//ParameterElement:
	//	ParameterKeyValueElement | ParameterKeyElement;
	public ParameterElementElements getParameterElementAccess() {
		return pParameterElement;
	}
	
	public ParserRule getParameterElementRule() {
		return getParameterElementAccess().getRule();
	}

	//ParameterKeyValueElement:
	//	name=ID (":" | "=") value=AnyValues;
	public ParameterKeyValueElementElements getParameterKeyValueElementAccess() {
		return pParameterKeyValueElement;
	}
	
	public ParserRule getParameterKeyValueElementRule() {
		return getParameterKeyValueElementAccess().getRule();
	}

	//ParameterKeyElement:
	//	name=ID ";";
	public ParameterKeyElementElements getParameterKeyElementAccess() {
		return pParameterKeyElement;
	}
	
	public ParserRule getParameterKeyElementRule() {
		return getParameterKeyElementAccess().getRule();
	}

	//IssuesContainer:
	//	IssuesTitleElement elements+=IssueElement*;
	public IssuesContainerElements getIssuesContainerAccess() {
		return pIssuesContainer;
	}
	
	public ParserRule getIssuesContainerRule() {
		return getIssuesContainerAccess().getRule();
	}

	//IssuesTitleElement:
	//	name="Issues";
	public IssuesTitleElementElements getIssuesTitleElementAccess() {
		return pIssuesTitleElement;
	}
	
	public ParserRule getIssuesTitleElementRule() {
		return getIssuesTitleElementAccess().getRule();
	}

	//IssueElement:
	//	name+=IssueTypes ("," name+=IssueTypes)* comment=IssueSuppressComment? "{" message=STRING?
	//	categories=IssueCategoryElement kinds=IssueKindElement relevance=IssueRelevanceElement package=IssuePackageElement
	//	class=IssueClassElement "}";
	public IssueElementElements getIssueElementAccess() {
		return pIssueElement;
	}
	
	public ParserRule getIssueElementRule() {
		return getIssueElementAccess().getRule();
	}

	//IssueSuppressComment:
	//	"[suppress=" value=(ID | STRING) "]";
	public IssueSuppressCommentElements getIssueSuppressCommentAccess() {
		return pIssueSuppressComment;
	}
	
	public ParserRule getIssueSuppressCommentRule() {
		return getIssueSuppressCommentAccess().getRule();
	}

	//IssueCategoryElement:
	//	name="Categories:" elements+=IssueCategories ("," elements+=IssueCategories)*;
	public IssueCategoryElementElements getIssueCategoryElementAccess() {
		return pIssueCategoryElement;
	}
	
	public ParserRule getIssueCategoryElementRule() {
		return getIssueCategoryElementAccess().getRule();
	}

	//IssueKindElement:
	//	name="Kinds:" elements+=IssueKinds ("," elements+=IssueKinds)*;
	public IssueKindElementElements getIssueKindElementAccess() {
		return pIssueKindElement;
	}
	
	public ParserRule getIssueKindElementRule() {
		return getIssueKindElementAccess().getRule();
	}

	//IssueRelevanceElement:
	//	name="Relevance:" relevance=INT;
	public IssueRelevanceElementElements getIssueRelevanceElementAccess() {
		return pIssueRelevanceElement;
	}
	
	public ParserRule getIssueRelevanceElementRule() {
		return getIssueRelevanceElementAccess().getRule();
	}

	//IssuePackageElement:
	//	name="Package:" package=SlashPath;
	public IssuePackageElementElements getIssuePackageElementAccess() {
		return pIssuePackageElement;
	}
	
	public ParserRule getIssuePackageElementRule() {
		return getIssuePackageElementAccess().getRule();
	}

	//IssueClassElement:
	//	name="Class:" class=IssueClass;
	public IssueClassElementElements getIssueClassElementAccess() {
		return pIssueClassElement;
	}
	
	public ParserRule getIssueClassElementRule() {
		return getIssueClassElementAccess().getRule();
	}

	//IssueTypes:
	//	"DeadEdgesAnalysis" | "UnusedLocalVariables" | "GuardedAndUnguardedAccessAnalysis" | "UnusedMethodsAnalysis" |
	//	"UselessComputationsAnalysis";
	public IssueTypesElements getIssueTypesAccess() {
		return pIssueTypes;
	}
	
	public ParserRule getIssueTypesRule() {
		return getIssueTypesAccess().getRule();
	}

	//IssueCategories:
	//	bug="bug" | smell="smell" | performance="performance" | comprehensibility="comprehensibility";
	public IssueCategoriesElements getIssueCategoriesAccess() {
		return pIssueCategories;
	}
	
	public ParserRule getIssueCategoriesRule() {
		return getIssueCategoriesAccess().getRule();
	}

	//IssueKinds:
	//	"constant computation" | "dead path" | "throws exception" | "unguarded use" | "unused" | "useless";
	public IssueKindsElements getIssueKindsAccess() {
		return pIssueKinds;
	}
	
	public ParserRule getIssueKindsRule() {
		return getIssueKindsAccess().getRule();
	}

	//IssueClass:
	//	ID ("$" ID)* ("$" INT)*;
	public IssueClassElements getIssueClassAccess() {
		return pIssueClass;
	}
	
	public ParserRule getIssueClassRule() {
		return getIssueClassAccess().getRule();
	}

	////AnyValues: (INT|ID)+;
	//AnyValues:
	//	INT | ID | INT ID | INT "." INT;
	public AnyValuesElements getAnyValuesAccess() {
		return pAnyValues;
	}
	
	public ParserRule getAnyValuesRule() {
		return getAnyValuesAccess().getRule();
	}

	//FilePath:
	//	"/"? ID ":"? ("\\" ID)* ("." ID)?;
	public FilePathElements getFilePathAccess() {
		return pFilePath;
	}
	
	public ParserRule getFilePathRule() {
		return getFilePathAccess().getRule();
	}

	//AnalysisTitle:
	//	(ID | ":" | "/" | "\\" | "," | ".")+;
	public AnalysisTitleElements getAnalysisTitleAccess() {
		return pAnalysisTitle;
	}
	
	public ParserRule getAnalysisTitleRule() {
		return getAnalysisTitleAccess().getRule();
	}

	//SlashPath:
	//	ID ("/" ID)*;
	public SlashPathElements getSlashPathAccess() {
		return pSlashPath;
	}
	
	public ParserRule getSlashPathRule() {
		return getSlashPathAccess().getRule();
	}

	////terminal EXTENDED_ID:   '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'\\'|':'|'/'|'0'..'9')*;
	////terminal INTID  : '^'?('a'..'z'|'A'..'Z'|'_'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	////terminal FLOAT	: INT ('.' INT)?; QualifiedName:
	//	ID ("." ID)* ("$" ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

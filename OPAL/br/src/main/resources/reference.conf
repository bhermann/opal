org.opalj {
  # All settings in the "debug" section are targeted at development time and
  # should be false when deployed!
  debug {

    # the CFG's structure is validated; primarily of interest when the
    # algorithms related to computing the CFG are maintained, extended,
    # or changed
    br.cfg.CFG.Validate = false,

    # Prints out information about the executed analyses.
    fcpf.analyses.FPCFAnalysesManager.trace = true
  }

  br {
    reader {
      ClassFileReader {
        BytecodeOptimizer {
          simplifyControlFlow = true, // default is "true"
          logControlFlowSimplification = false // default is "false"
        },
        Invokedynamic {
          rewrite = true, // default is "true"
          logLambdaRewrites = false, // default is "false"
          logStringConcatRewrites = false, // default is "false"
          logUnknownInvokeDynamics = true // default is "false"
        },
        deleteSynthesizedClassFilesAttributes = true // default is "true"
      }
    }

    analyses {
      cg {
        ClosedPackagesKey {
          analysis = "org.opalj.br.analyses.cg.ClosedCodeBase" # considers all packages closed (e.g. suitable when analyzing an application)

          #analysis = "org.opalj.br.analyses.cg.OpenCodeBase" # considers all packages open (e.g. suitable for security analyses)

          #analysis = "org.opalj.br.analyses.cg.ClosedPackagesConfiguration"
          #closedPackages = "java(/.*)*"
          # Use a regular expresion (e.g. "java(/.*)*") to specify all packages
          # that shall be considered closed. In some cases, it might be easier to 
          # specify all open packages. In this case it's possible to invert the
          # specified regular expression (e.g. "^(java(/.*)*)"). The latter example
          # would consider all packages except the java packages as closed.

        }

        ClassExtensibilityKey {
          analysis = "org.opalj.br.analyses.cg.ConfiguredFinalClasses"
          finalClasses = [] # used by org.opalj.br.analyses.cg.ConfiguredFinalClasses
        }
      }
    }
  }

  fpcf {
    registry {
      analyses {
        "L0FieldMutabilityAnalysis" {
          description = "Determines if fields are (effectively) final.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL0FieldMutabilityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL0FieldMutabilityAnalysis"
        },
        "L0CompileTimeConstancyAnalysis" {
          description = "Determines if static fields are compile time constants.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL0CompileTimeConstancyAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL0CompileTimeConstancyAnalysis"
        },
        "L0SelfReferenceLeakageAnalysis" {
          description = "Determines if an object may leak its self reference (`this`).",
          eagerFactory = "org.opalj.fpcf.analyses.L0SelfReferenceLeakageAnalysis"
          #TODO This one does not yet have a lazy factory
        },
        "ClassImmutabilityAnalysis" {
          description = "Determines if instances of a class are immutable.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerClassImmutabilityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyClassImmutabilityAnalysis"
        },
        "L1ThrownExceptionsAnalysis" {
          description = "Determines the exceptions that are thrown by a method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL1ThrownExceptionsAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL1ThrownExceptionsAnalysis"
        },
        "L0AllocationFreenessAanalysis" {
          description = "Determines if a method may (transitively) cause allocations.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL0AllocationFreenessAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL0AllocationFreenessAnalysis"
        },
        "StaticDataUsageAnalysis" {
          description = "Determines if a method uses only compile time constant static state.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerStaticDataUsageAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyStaticDataUsageAnalysis"
        },
        "L0PurityAnalysis" {
          description = "Determines a method's purity.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL0PurityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL0PurityAnalysis"
        },
        // The virtual/aggregating ones...
        "TypeImmutabilityAnalysis" {
          description = "Determines if instances of a type (including subclasses) are immutable.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerTypeImmutabilityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyTypeImmutabilityAnalysis"
        },
        "VirtualMethodThrownExceptionsAnalysis" {
          description = "Determines the aggregated thrown exceptions for a virtual method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualMethodThrownExceptionsAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualMethodThrownExceptionsAnalysis"
        },
        "VirtualMethodAllocationFreenessAnalysis" {
          description = "Determines the aggregated allocation freeness for a virtual method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualMethodPurityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualMethodPurityAnalysis"
        },
        "VirtualMethodStaticDataUsageAnalysis" {
          description = "Determines the aggregated static data use freeness for a virtual method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualMethodStaticDataUsageAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualMethodStaticDataUsageAnalysis"
        },
        "VirtualMethodPurityAnalysis" {
          description = "Determines the aggregated purity for a virtual method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualMethodPurityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualMethodPurityAnalysis"
        },
        "VirtualCallAggregatingEscapeAnalysis" {
          description = "Determines the aggregated escape level for a virtual formal parameter.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualCallAggregatingEscapeAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualCallAggregatingEscapeAnalysis"
        },
        "VirtualReturnValueFreshnessAnalysis" {
          description = "Determines the aggregated return value freshness for a virtual method.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerVirtualReturnValueFreshnessAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyVirtualReturnValueFreshnessAnalysis"
        }
      }
    }

    analysis {
      L0SelfReferenceLeakage {
        debug = true // default is "false"
      }
    }
  }

}

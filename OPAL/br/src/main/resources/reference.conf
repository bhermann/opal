org.opalj {
  // All settings in the "debug" section are targeted at development time and
  // should be false when deployed!
  debug {
    br.cfg.CFG.Validate = false
  }

  br {
    reader {
      ClassFileReader {
        BytecodeOptimizer {
          simplifyControlFlow = true, // default is "true"
          logControlFlowSimplification = false // default is "false"
        },
        LambdaExpressions {
          rewrite = true, // default is "true"
          logRewrites = false // default is "false"
          logUnknownInvokeDynamics = true // default is "false"
        },
        deleteSynthesizedClassFilesAttributes = true // default is "true"
      }
    }

    analyses {
      cg {
        ClosedPackagesKey {
          analysis = "org.opalj.br.analyses.cg.ClosedCodeBase" # considers all packages closed (e.g. suitable when analyzing an application)

          #analysis = "org.opalj.br.analyses.cg.OpenCodeBase" # considers all packages open (e.g. suitable for security analyses)

          #analysis = "org.opalj.br.analyses.cg.ClosedPackagesConfiguration"
          #closedPackages = "java(/.*)*"
          # Use a regular expresion (e.g. "java(/.*)*") to specify all packages
          # that shall be considered closed. In some cases, it might be easier to 
          # specify all open packages. In this case it's possible to invert the
          # specified regular expression (e.g. "^(java(/.*)*)"). The latter example
          # would consider all packages except the java packages as closed.

        }

        ClassExtensibilityKey {
          analysis = "org.opalj.br.analyses.cg.ConfiguredFinalClasses"
          finalClasses = [] # used by org.opalj.br.analyses.cg.ConfiguredFinalClasses
        }
      }
    }
  }

  fpcf {
    registry {
      analyses {
        # TODO @Florian/@Dominik Please add the analyses
        "L0FieldMutabilityAnalysis" {
          description = "Determines if fields are (effectively) final.",
          factory = "org.opalj.fpcf.analyses.L0FieldMutabilityAnalysis"
        },
        "L1ThrownExceptionsAnalysis" {
          description = "Determines the exceptions that are thrown by a method.",
          factory = "org.opalj.fpcf.analyses.L1ThrownExceptionsAnalysis"
        },
        "L0PurityAnalysis" {
          description = "Determines a method's purity.",
          factory = "org.opalj.fpcf.analyses.L0PurityAnalysis"
        },
        "VirtualMethodPurityAnalysis" {
          description = "Determines the aggregated purity for a virtual method",
          factory = "org.opalj.fpcf.analyses.VirtualMethodPurityAnalysis"
        },
        "VirtualMethodThrownExceptionsAnalysis" {
          description = "Determines the aggregated thrown exceptions for a virtual method",
          factory = "org.opalj.fpcf.analyses.VirtualMethodThrownExceptionsAnalysis"
        }
      }
    }

    analysis {
      manager {
        debug = true // default is "false"
      }

      L0SelfReferenceLeakage {
        debug = true // default is "false"
      }
    }
  }

}

org.opalj {
  br {
    // All settings in the "debug" section are targeted at development time and
    // should be false when deployed!
    debug {
      br.cfg.CFG.validateConsistency = false
    }

    reader {
      ClassFileReader {
        BytecodeOptimizer {
          simplifyControlFlow = true, // default is "true"
          logControlFlowSimplification = false // default is "false"
        },
        Java8LambdaExpressions {
          rewrite = true, // default is "true"
          logRewrites = false // default is "false"
          logUnknownInvokeDynamics = false // default is "false"
        },
        deleteSynthesizedClassFilesAttributes = true // default is "true"
      }
    }

    analyses {

      ClosedPackagesKey {
        #analysis = "org.opalj.br.analyses.cg.ClosedCodeBase" # coniders all packages closed (e.g. when analyzing an applicaition)
        #analysis = "org.opalj.br.analyses.cg.OpenCodeBase" # considers all packages open (e.g. most conservative analysis)
        analysis = "org.opalj.br.analyses.cg.ClosedPackagesConfiguration"
        # Please use a regular expresion (e.g. "java(/.*)*") to specify all packages
        # that shall be considered closed.
        # Please note that it might be easier to specify all open packages. In this
        # case it's possible to invert the specified regular expression (e.g. "^java(/.*)*").
        # The latter example would consider all packages except the java packages as closed.
        closedPackages = "java(/.*)*"
      }

      DirectTypeExtensibilityKey {
        analysis = "org.opalj.br.analyses.cg.ConfigureFinalTypes"
        finalTypes = [] # used by org.opalj.br.analyses.cg.ConfigureFinalTypes
      }
    }
  }

  fpcf {
    registry {
      analyses {
        "MethodAccessibilityAnalysis" {
          description = "Computes the project accessibility property of methods w.r.t. clients.",
          factory = "org.opalj.fpcf.analyses.MethodAccessibilityAnalysis"
        },
        "FactoryMethodAnalysis" {
          description = "Determines if a static method is an accessible factory method w.r.t. clients.",
          factory = "org.opalj.fpcf.analyses.FactoryMethodAnalysis"
        },
        "InstantiabilityAnalysis" {
          description = "Computes if a class can (possibly) be instantiated.",
          factory = "org.opalj.fpcf.analyses.SimpleInstantiabilityAnalysis"
        },
        "CallableFromClassesInOtherPackagesAnalysis" {
          description = "Computes whether a non-static method can be called via an super or subclass.",
          factory = "org.opalj.fpcf.analyses.CallableFromClassesInOtherPackagesAnalysis"
        },
        "FieldMutabilityAnalysis" {
          description = "Determines if fields are (effectively) final.",
          factory = "org.opalj.fpcf.analyses.FieldMutabilityAnalysis"
        },
        "PurityAnalysis" {
          description = "Determines a method's purity.",
          factory = "org.opalj.fpcf.analyses.PurityAnalysis"
        }
      }
    }

    analysis {
      manager {
        debug = true // default is "false"
      }

      escape {
        debug = true // default is "false"
      }
    }
  }

}

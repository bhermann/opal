org.opalj {
  fpcf {
    registry {
      analyses {
        "EntryPointsAnalysis" {
          description = "Computes the entry points of the project w.r.t. to the given analysis mode.",
          eagerFactory = "org.opalj.fpcf.analyses.EntryPointsAnalysis"
        },
        "L1FieldMutabilityAnalysis" {
          description = "Determines if (instance and static) fields are (effectively) final.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL1FieldMutabilityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL1FieldMutabilityAnalysis"
        },
        "FieldLocalityAnalysis" {
          description = "Determines if a field's lifetime is bound to its owning instance.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerFieldLocalityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyFieldLocalityAnalysis"
        },
        "ReturnValueFreshnessAnalysis" {
          description = "Determines if a method's return value is always freshly allocated.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerReturnValueFreshnessAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyReturnValueFreshnessAnalysis"
        },
        "L1PurityAnalysis" {
          description = "Determines a method's purity.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL1PurityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL1PurityAnalysis"
        },
        "L2PurityAnalysis" {
          description = "Determines a method's purity.",
          eagerFactory = "org.opalj.fpcf.analyses.EagerL2PurityAnalysis",
          lazyFactory = "org.opalj.fpcf.analyses.LazyL2PurityAnalysis"
        }
      }
    },
    analyses {
      ConfigurationBasedConstructorEscapeAnalysis {
        constructors = [
          {
            object_type = "java/lang/Object",
            escape_of_this = "org.opalj.fpcf.properties.NoEscape"
          },
          {
            object_type = "java/lang/Throwable",
            escape_of_this = "org.opalj.fpcf.properties.EscapeInCallee"
          },          {
            object_type = "java/lang/Exception",
            escape_of_this = "org.opalj.fpcf.properties.EscapeInCallee"
          },
          {
            object_type = "java/lang/IllegalStateException",
            escape_of_this = "org.opalj.fpcf.properties.EscapeInCallee"
          },
          {
            object_type = "java/lang/IllegalArgumentException",
            escape_of_this = "org.opalj.fpcf.properties.EscapeInCallee"
          },
          {
            object_type = "java/lang/RuntimeException",
            escape_of_this = "org.opalj.fpcf.properties.EscapeInCallee"
          }
        ]
      },
      L1PurityAnalysis {
        domainSpecificRater = "org.opalj.fpcf.analyses.purity.SystemOutLoggingAllExceptionRater"
      },
      L2PurityAnalysis {
        domainSpecificRater = "org.opalj.fpcf.analyses.purity.SystemOutLoggingAllExceptionRater"
      },
      ConfiguredPurity {
        purities = [
          # Native methods
          # All methods of the following types have been analyzed, methods not listed are
          # considered impure
          {cf = "java/lang/Class", m = "desiredAssertionStatus0", desc = "(Ljava/lang/Class;)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getPrimitiveClass", desc = "(Ljava/lang/String;)Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getComponentType", desc = "()Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getConstantPool", desc = "()Lsun/reflect/ConstantPool;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getDeclaredClasses0", desc = "()[Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getDeclaredConstructors0", desc = "(Z)[Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getDeclaredFields0", desc = "(Z)[Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getDeclaredMethods0", desc = "(Z)[Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getDeclaringClass0", desc = "()Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getEnclosingMethod0", desc = "()[Ljava/lang/Object;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getGenericSignature0", desc = "()Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getInterfaces0", desc = "()[Ljava/lang/Class;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getModifiers", desc = "()I", p = "CompileTimePure"},
          {cf = "java/lang/Class", m = "getName0", desc = "()Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Class", m = "getProtectionDomain", desc = "()Ljava/security/ProtectionDomain;", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getRawAnnotations", desc = "()[B", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getRawTypeAnnotations", desc = "()[B", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getSigners", desc = "()[Ljava/lang/Object;", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "getSuperclass", desc = "()Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "isArray", desc = "()Z", p = "CompileTimePure"},
          {cf = "java/lang/Class", m = "isAssignableFrom", desc = "(Ljava/lang/Class;)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/Class", m = "isInstance", desc = "(Ljava/lang/Object;)Z", p = "CompileTimePure"},
          {cf = "java/lang/Class", m = "isInterface", desc = "()Z", p = "CompileTimePure"},
          {cf = "java/lang/Class", m = "isPrimitive", desc = "()Z", p = "CompileTimePure"},
          {cf = "java/lang/Class", m = "setSigners", desc = "([Ljava/lang/Object;)V", p = "LBExternallyPure"},
          {cf = "java/lang/Double", m = "doubleToRawLongBits", desc = "(D)J", p = "CompileTimePure"},
          {cf = "java/lang/Double", m = "longBitsToDouble", desc = "(J)D", p = "CompileTimePure"},
          {cf = "java/lang/Float", m = "floatToRawIntBits", desc = "(F)I", p = "CompileTimePure"},
          {cf = "java/lang/Float", m = "intBitsToFloat", desc = "(I)F", p = "CompileTimePure"},
          {cf = "java/lang/Object", m = "<init>", desc = "()V", p = "CompileTimePure"},
          {cf = "java/lang/Object", m = "clone", desc = "()Ljava/lang/Object;", p = "LBSideEffectFree"},
          {cf = "java/lang/Object", m = "getClass", desc = "()Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/Object", m = "hashCode", desc = "()I", p = "LBSideEffectFree"},
          {cf = "java/lang/Package", m = "getSystemPackage0", desc = "(Ljava/lang/String;)Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/lang/Package", m = "getSystemPackages0", desc = "()[Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "get", desc = "(Ljava/lang/Object;I)Ljava/lang/Object;", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getBoolean", desc = "(Ljava/lang/Object;I)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getByte", desc = "(Ljava/lang/Object;I)B", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getChar", desc = "(Ljava/lang/Object;I)C", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getDouble", desc = "(Ljava/lang/Object;I)D", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getFloat", desc = "(Ljava/lang/Object;I)F", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getInt", desc = "(Ljava/lang/Object;I)I", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getLength", desc = "(Ljava/lang/Object;)I", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getLong", desc = "(Ljava/lang/Object;I)J", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "getShort", desc = "(Ljava/lang/Object;I)S", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "multiNewArray", desc = "(Ljava/lang/Class;[I)Ljava/lang/Object;", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "newArray", desc = "(Ljava/lang/Class;I)Ljava/lang/Object;", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "set", desc = "(Ljava/lang/Object;ILjava/lang/Object;)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setBoolean", desc = "(Ljava/lang/Object;IZ)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setByte", desc = "(Ljava/lang/Object;IB)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setChar", desc = "(Ljava/lang/Object;IC)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setDouble", desc = "(Ljava/lang/Object;ID)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setFloat", desc = "(Ljava/lang/Object;IF)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setInt", desc = "(Ljava/lang/Object;II)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setLong", desc = "(Ljava/lang/Object;IJ)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Array", m = "setShort", desc = "(Ljava/lang/Object;IS)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/reflect/Executable", m = "getParameters0", desc = "()[Ljava/lang/reflect/Parameter;", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Executable", m = "getTypeAnnotationBytes0", desc = "()[B", p = "LBSideEffectFree"},
          {cf = "java/lang/reflect/Field", m = "getTypeAnnotationBytes0", desc = "()[B", p = "LBSideEffectFree"},
          {cf = "java/lang/Runtime", m = "availableProcessors", desc = "()I", p = "LBSideEffectFree"},
          {cf = "java/lang/Runtime", m = "freeMemory", desc = "()J", p = "LBSideEffectFree"},
          {cf = "java/lang/Runtime", m = "maxMemory", desc = "()J", p = "LBSideEffectFree"},
          {cf = "java/lang/Runtime", m = "totalMemory", desc = "()J", p = "LBSideEffectFree"},
          {cf = "java/lang/SecurityManager", m = "classLoaderDepth0", desc = "()I", p = "LBSideEffectFree"},
          {cf = "java/lang/SecurityManager", m = "currentClassLoader0", desc = "()Ljava/lang/ClassLoader;", p = "LBSideEffectFree"},
          {cf = "java/lang/SecurityManager", m = "currentLoadedClass0", desc = "()Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/SecurityManager", m = "getClassContext", desc = "()[Ljava/lang/Class;", p = "LBSideEffectFree"},
          {cf = "java/lang/SecurityManager", m = "classDepth", desc = "(Ljava/lang/String;)I", p = "LBSideEffectFree"},
          {cf = "java/lang/StrictMath", m = "IEEEremainder", desc = "(DD)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "acos", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "asin", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "atan", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "atan2", desc = "(DD)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "cbrt", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "cos", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "cosh", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "exp", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "expm1", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "hypot", desc = "(DD)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "log", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "log10", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "log1p", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "pow", desc = "(DD)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "sin", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "sinh", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "sqrt", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "tan", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/StrictMath", m = "tanh", desc = "(D)D", p = "CompileTimePure"},
          {cf = "java/lang/String", m = "intern", desc = "()Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/lang/System", m = "arraycopy", desc = "(Ljava/lang/Object;ILjava/lang/Object;II)V", p = "LBContextuallySideEffectFree"},
          {cf = "java/lang/System", m = "currentTimeMillis", desc = "()J", p = "LBSideEffectFree"},
          {cf = "java/lang/System", m = "identityHashCode", desc = "(Ljava/lang/Object;)I", p = "LBPure"},
          {cf = "java/lang/System", m = "mapLibraryName", desc = "(Ljava/lang/String;)Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/lang/System", m = "nanoTime", desc = "()J", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "currentThread", desc = "()Ljava/lang/Thread;", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "getThreads", desc = "()[Ljava/lang/Thread;", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "holdsLock", desc = "(Ljava/lang/Object;)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "countStackFrames", desc = "()I", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "isAlive", desc = "()Z", p = "LBSideEffectFree"},
          {cf = "java/lang/Thread", m = "isInterrupted", desc = "(Z)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/Throwable", m = "<init>", desc = "*", p = "LBSideEffectFee"},
          {cf = "java/lang/Throwable", m = "fillInStackTrace", desc = "(I)Ljava/lang/Throwable;", p = "LBSideEffectFee"},
          {cf = "java/lang/Throwable", m = "getStackTraceDepth()", desc = "()I", p = "LBSideEffectFree"},
          {cf = "java/lang/Throwable", m = "getStackTraceElement", desc = "(I)Ljava/lang/StackTraceElement;", p = "LBSideEffectFree"},
          {cf = "java/util/TimeZone", m = "getSystemGMTOffsetID", desc = "()Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/util/TimeZone", m = "getSystemTimeZoneID", desc = "(Ljava/lang/String;)Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/util/logging/FileHandler", m = "isSetUID", desc = "()Z", p = "LBPure"},
          # Java methods
          {cf = "java/lang/Double", m = "toString", "desc" = "(D)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Float", m = "toString", "desc" = "(F)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Integer", m = "toString", "desc" = "(I)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Integer", m = "toString", "desc" = "(II)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Long", m = "toString", "desc" = "(J)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Long", m = "toString", "desc" = "(JI)Ljava/lang/String;", p = "LBPure"},
          {cf = "java/lang/Object", m = "equals", desc = "(Ljava/lang/Object;)Z", p = "LBSideEffectFree"},
          {cf = "java/lang/String", m = "hashCode", desc = "()I", p = "LBPure"},
          //TODO BigDecimal.setScale
          {cf = "java/lang/StringBuffer", m = "append", desc= "*", p = "LBExternallyPure"},
          {cf = "java/lang/StringBuffer", m = "toString", desc= "()Ljava/lang/String;", p = "LBSideEffectFree"},
          {cf = "java/lang/StringBuilder", m = "append", desc= "*", p = "LBExternallyPure"},
          {cf = "java/lang/StringBuilder", m = "toString", desc= "()Ljava/lang/String;", p = "LBSideEffectFree"},
          # Treat all implementations of the following methods as pure
          //{cf = "*", m = "hashCode", desc = "()I", p = "LBPure"},
          //{cf = "*", m = "hashCode", desc = "()I", p = "VLBPure"},
          //{cf = "*", m = "equals", desc = "(Ljava/lang/Object;)Z", p = "LBPure"},
          //{cf = "*", m = "equals", desc = "(Ljava/lang/Object;)Z", p = "VLBPure"}
          {cf = "*", m = "compareTo", desc = "*", p = "LBPure"},
          {cf = "*", m = "compareTo", desc = "*", p = "VLBPure"}
        ]
      }
    }
  }
}

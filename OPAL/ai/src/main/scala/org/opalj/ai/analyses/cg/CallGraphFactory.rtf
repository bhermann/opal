{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Tahoma;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
{\info
{\author Michael Eichberg}}\paperw11900\paperh16840\margl1440\margr1440\margb1800\margt1800\vieww27180\viewh20080\viewkind1
\deftab720
\pard\pardeftab720\sb120

\f0\b\fs28 \cf0 General Questions When Designing a Call Graph Algorithm\
\pard\tx288\tx648\pardeftab720\li648\fi-360\ri0
\ls1\ilvl0
\f1\b0\fs24 \cf0 \'95	How precise do we want to be (inter-procedurally)?\
\pard\tx288\tx648\pardeftab720\li648\fi-360\ri0
\ls2\ilvl0\cf0 \'95	Do we want to make (part of) the domain exchangeable -- to make it possible to get more/less precise call graphs (How precise do we want to be intra-procedurally? (Does the precision of the intra-procedural analysis makes a real differences w.r.t. the overall call graph - The CGC paper suggest this )?\
\'95	Do we want to be sound in the presence of concurrent access?\
\'95	What do we want to do if we identify a reflective call? Do we want to look into the future to identify likely/sure targets?\
\'95	How do we handle static initializers?\
\'95	How do we want to handle exceptions?\
\'95	Do we want to be able to (re)store the Call Graph without recalculating it to facilitate the debug/develop cycle for analyses that are built on top of it?\
\'95	This is in particular important if we have calculated a rather precise call graph.\
\'95	How do we handle native methods?\uc0\u8232 They are basically sinks. We use a white-list of classes and methods which are added as called by a native method once the respective classes are created.\
\'95	What do we do in case of calls to methods that cannot be resolved to concrete methods. (E.g., the JDK contains no concrete implementation of the interface javax.tools.JavaCompiler.). In this case we also use a whitelist that identifies the methods that may be called.\uc0\u8232 One Strategy: all non-private methods(?) are targets of a native method if the object was passed to a native method. \
\'95	Do we want to handle (anonymous/private) inner classes differently?\
\'95	(How) do we want to store the graph efficiently? \
\'95	Do we want to make the call graph construction algorithm easily adaptable?\
\'95	In case of the analysis of APIs we usually treat all public methods as entry points. In this case does it make sense to execute the constuctor/static initializer before to have better context information (in particular w.r.t. to fixed/final values.)?\
\pard\pardeftab720
\cf0 \
\
\pard\pardeftab720\sb120

\f0\b\fs28 \cf0 Code Snippets Related To The Discussion Of Call Graphs\
\pard\pardeftab720

\f1\b0\fs24 \cf0 \
\pard\tx288\tx720\pardeftab720\li720\fi-432\ri0
\ls3\ilvl0
\f2\fs20 \cf0 1.	class A \{\
\pard\tx288\tx720\pardeftab720\li720\fi-432\ri0
\ls4\ilvl0\cf0 2.	   private A a = this;\
3.	   public m() \{\
4.	        // "a" refers to an object of type B if bar \
5.	        // was called before m()    \
6.	        a.foo() \
7.	\
8.	        // a "always" refers to an object of type B  \
9.	        // and not "this" (if we forget concurrent...)\
10.	        a.foo() \
11.	    \}\
12.	\
13.	    private foo() \{ a = new B(); \}\
14.	\
15.	    public bar() \{ a = new B(); \}\
16.	    \
17.	    public boo() \{ a = new A(); \}\
18.	\} \
19.	class B extends A \{\
20.	    // overrides the methods in A\
21.	\}\
\pard\pardeftab720

\f1\fs24 \cf0 \
\
The goal is to ``just'' calculate for each call-site all methods that are potentially called. This is trivial in case of invoke special (constructors and private methods) and invoke static instructions.\\footnote\{We will talk about reflection later...\} \
\
For methods which are not statically resolved by the compiler, the target depends on the type of the receiver object. The receiver object is either determined by a field's value or by a variable initialized within the given method.\
\
For each method, we store under which assumption the method is called (for all entry methods, this is basically just the available type information.\
\
\
\
}
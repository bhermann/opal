DefinedMethod(ObjectType(org/apache/batik/Version),<init>,MethodDescriptor((): void),org.apache.batik.Version{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/Version),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.Version{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/Version),getVersion,MethodDescriptor((): java.lang.String),org.apache.batik.Version{ public static java.lang.String getVersion() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocaleGroup),<clinit>,MethodDescriptor((): void),org.apache.batik.i18n.LocaleGroup{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocaleGroup),<init>,MethodDescriptor((): void),org.apache.batik.i18n.LocaleGroup{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocaleGroup),getLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.i18n.LocaleGroup{ public java.util.Locale getLocale() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/i18n/LocaleGroup),setLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.i18n.LocaleGroup{ public void setLocale(java.util.Locale) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.i18n.LocalizableSupport{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),<init>,MethodDescriptor((java.lang.String, java.lang.Class): void),org.apache.batik.i18n.LocalizableSupport{ public void <init>(java.lang.String,java.lang.Class) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),<init>,MethodDescriptor((java.lang.String, java.lang.Class, java.lang.ClassLoader): void),org.apache.batik.i18n.LocalizableSupport{ public void <init>(java.lang.String,java.lang.Class,java.lang.ClassLoader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),<init>,MethodDescriptor((java.lang.String, java.lang.ClassLoader): void),org.apache.batik.i18n.LocalizableSupport{ public void <init>(java.lang.String,java.lang.ClassLoader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.i18n.LocalizableSupport{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),formatMessage,MethodDescriptor((java.lang.String, java.lang.Object[]): java.lang.String),org.apache.batik.i18n.LocalizableSupport{ public java.lang.String formatMessage(java.lang.String,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getCharacter,MethodDescriptor((java.lang.String): int),org.apache.batik.i18n.LocalizableSupport{ public int getCharacter(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getCurrentLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.i18n.LocalizableSupport{ protected java.util.Locale getCurrentLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getDefaultLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.i18n.LocalizableSupport{ public java.util.Locale getDefaultLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getInteger,MethodDescriptor((java.lang.String): int),org.apache.batik.i18n.LocalizableSupport{ public int getInteger(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.i18n.LocalizableSupport{ public java.util.Locale getLocale() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getLocaleGroup,MethodDescriptor((): org.apache.batik.i18n.LocaleGroup),org.apache.batik.i18n.LocalizableSupport{ public org.apache.batik.i18n.LocaleGroup getLocaleGroup() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getResourceBundle,MethodDescriptor((): java.util.ResourceBundle),org.apache.batik.i18n.LocalizableSupport{ public java.util.ResourceBundle getResourceBundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getResourceBundle,MethodDescriptor((int): java.util.ResourceBundle),org.apache.batik.i18n.LocalizableSupport{ protected java.util.ResourceBundle getResourceBundle(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),getString,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.i18n.LocalizableSupport{ public java.lang.String getString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),hasNextResourceBundle,MethodDescriptor((int): boolean),org.apache.batik.i18n.LocalizableSupport{ protected boolean hasNextResourceBundle(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),lookupResourceBundle,MethodDescriptor((java.lang.String, java.lang.Class): java.util.ResourceBundle),org.apache.batik.i18n.LocalizableSupport{ protected java.util.ResourceBundle lookupResourceBundle(java.lang.String,java.lang.Class) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),setDefaultLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.i18n.LocalizableSupport{ public void setDefaultLocale(java.util.Locale) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),setLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.i18n.LocalizableSupport{ public void setLocale(java.util.Locale) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),setLocaleGroup,MethodDescriptor((org.apache.batik.i18n.LocaleGroup): void),org.apache.batik.i18n.LocalizableSupport{ public void setLocaleGroup(org.apache.batik.i18n.LocaleGroup) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/i18n/LocalizableSupport),setUsedLocale,MethodDescriptor((): boolean),org.apache.batik.i18n.LocalizableSupport{ protected boolean setUsedLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/AbstractParsedURLProtocolHandler),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.AbstractParsedURLProtocolHandler{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/AbstractParsedURLProtocolHandler),getProtocolHandled,MethodDescriptor((): java.lang.String),org.apache.batik.util.AbstractParsedURLProtocolHandler{ public java.lang.String getProtocolHandled() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),<init>,MethodDescriptor((java.lang.Class, java.lang.String): void),org.apache.batik.util.ApplicationSecurityEnforcer{ public void <init>(java.lang.Class,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),<init>,MethodDescriptor((java.lang.Class, java.lang.String, java.lang.String): void),org.apache.batik.util.ApplicationSecurityEnforcer{ public void <init>(java.lang.Class,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),enforceSecurity,MethodDescriptor((boolean): void),org.apache.batik.util.ApplicationSecurityEnforcer{ public void enforceSecurity(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),getPolicyURL,MethodDescriptor((): java.net.URL),org.apache.batik.util.ApplicationSecurityEnforcer{ public java.net.URL getPolicyURL() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),installSecurityManager,MethodDescriptor((): void),org.apache.batik.util.ApplicationSecurityEnforcer{ public void installSecurityManager() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),setDevBase,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ApplicationSecurityEnforcer{ private void setDevBase(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ApplicationSecurityEnforcer),setJarBase,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ApplicationSecurityEnforcer{ private void setJarBase(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),<clinit>,MethodDescriptor((): void),org.apache.batik.util.Base64DecodeStream{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.Base64DecodeStream{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),available,MethodDescriptor((): int),org.apache.batik.util.Base64DecodeStream{ public int available() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),close,MethodDescriptor((): void),org.apache.batik.util.Base64DecodeStream{ public void close() }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),getNextAtom,MethodDescriptor((): boolean),org.apache.batik.util.Base64DecodeStream{ boolean getNextAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),markSupported,MethodDescriptor((): boolean),org.apache.batik.util.Base64DecodeStream{ public boolean markSupported() }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),read,MethodDescriptor((): int),org.apache.batik.util.Base64DecodeStream{ public int read() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64DecodeStream),read,MethodDescriptor((byte[], int, int): int),org.apache.batik.util.Base64DecodeStream{ public int read(byte[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),<clinit>,MethodDescriptor((): void),org.apache.batik.util.Base64EncoderStream{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),<init>,MethodDescriptor((java.io.OutputStream): void),org.apache.batik.util.Base64EncoderStream{ public void <init>(java.io.OutputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),<init>,MethodDescriptor((java.io.OutputStream, boolean): void),org.apache.batik.util.Base64EncoderStream{ public void <init>(java.io.OutputStream,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),close,MethodDescriptor((): void),org.apache.batik.util.Base64EncoderStream{ public void close() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),encodeAtom,MethodDescriptor((): void),org.apache.batik.util.Base64EncoderStream{ void encodeAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),encodeFromArray,MethodDescriptor((byte[], int, int): void),org.apache.batik.util.Base64EncoderStream{ void encodeFromArray(byte[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),flush,MethodDescriptor((): void),org.apache.batik.util.Base64EncoderStream{ public void flush() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),write,MethodDescriptor((byte[]): void),org.apache.batik.util.Base64EncoderStream{ public void write(byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),write,MethodDescriptor((byte[], int, int): void),org.apache.batik.util.Base64EncoderStream{ public void write(byte[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Base64EncoderStream),write,MethodDescriptor((int): void),org.apache.batik.util.Base64EncoderStream{ public void write(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/BatikSecurityManager),<init>,MethodDescriptor((): void),org.apache.batik.util.BatikSecurityManager{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/BatikSecurityManager),getClassContext,MethodDescriptor((): java.lang.Class[]),org.apache.batik.util.BatikSecurityManager{ public java.lang.Class[] getClassContext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities$ClassFile),<init>,MethodDescriptor((): void),org.apache.batik.util.ClassFileUtilities$ClassFile{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities$ClassFile),getInputStream,MethodDescriptor((): java.io.InputStream),org.apache.batik.util.ClassFileUtilities$ClassFile{ public java.io.InputStream getInputStream() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities$Jar),<init>,MethodDescriptor((): void),org.apache.batik.util.ClassFileUtilities$Jar{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities$Triple),<init>,MethodDescriptor((): void),org.apache.batik.util.ClassFileUtilities$Triple{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),<init>,MethodDescriptor((): void),org.apache.batik.util.ClassFileUtilities{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),collectJars,MethodDescriptor((java.io.File, java.util.Map, java.util.Map): void),org.apache.batik.util.ClassFileUtilities{ private static void collectJars(java.io.File,java.util.Map,java.util.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),computeClassDependencies,MethodDescriptor((java.io.InputStream, java.util.Set, java.util.Set, java.util.Set, boolean): void),org.apache.batik.util.ClassFileUtilities{ private static void computeClassDependencies(java.io.InputStream,java.util.Set,java.util.Set,java.util.Set,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),getClassDependencies,MethodDescriptor((java.io.InputStream): java.util.Set),org.apache.batik.util.ClassFileUtilities{ public static java.util.Set getClassDependencies(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),getClassDependencies,MethodDescriptor((java.io.InputStream, java.util.Set, boolean): java.util.Set),org.apache.batik.util.ClassFileUtilities{ public static java.util.Set getClassDependencies(java.io.InputStream,java.util.Set,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),getClassDependencies,MethodDescriptor((java.lang.String, java.util.Set, boolean): java.util.Set),org.apache.batik.util.ClassFileUtilities{ public static java.util.Set getClassDependencies(java.lang.String,java.util.Set,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),getDescriptorClasses,MethodDescriptor((java.lang.String): java.util.Set),org.apache.batik.util.ClassFileUtilities{ protected static java.util.Set getDescriptorClasses(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ClassFileUtilities),main,MethodDescriptor((java.lang.String[]): void),org.apache.batik.util.ClassFileUtilities{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread$PhantomReferenceCleared),<init>,MethodDescriptor((java.lang.Object): void),org.apache.batik.util.CleanerThread$PhantomReferenceCleared{ public void <init>(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread$SoftReferenceCleared),<init>,MethodDescriptor((java.lang.Object): void),org.apache.batik.util.CleanerThread$SoftReferenceCleared{ public void <init>(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread$WeakReferenceCleared),<init>,MethodDescriptor((java.lang.Object): void),org.apache.batik.util.CleanerThread$WeakReferenceCleared{ public void <init>(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread),<clinit>,MethodDescriptor((): void),org.apache.batik.util.CleanerThread{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread),<init>,MethodDescriptor((): void),org.apache.batik.util.CleanerThread{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.CleanerThread{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread),getReferenceQueue,MethodDescriptor((): java.lang.ref.ReferenceQueue),org.apache.batik.util.CleanerThread{ public static java.lang.ref.ReferenceQueue getReferenceQueue() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/CleanerThread),run,MethodDescriptor((): void),org.apache.batik.util.CleanerThread{ public void run() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),<clinit>,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedSet{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),<init>,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedSet{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),add,MethodDescriptor((java.lang.Object, java.lang.Object): void),org.apache.batik.util.DoublyIndexedSet{ public void add(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),clear,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedSet{ public void clear() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),contains,MethodDescriptor((java.lang.Object, java.lang.Object): boolean),org.apache.batik.util.DoublyIndexedSet{ public boolean contains(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),remove,MethodDescriptor((java.lang.Object, java.lang.Object): void),org.apache.batik.util.DoublyIndexedSet{ public void remove(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedSet),size,MethodDescriptor((): int),org.apache.batik.util.DoublyIndexedSet{ public int size() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$Entry),<init>,MethodDescriptor((int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.batik.util.DoublyIndexedTable$Entry): void),org.apache.batik.util.DoublyIndexedTable$Entry{ public void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.DoublyIndexedTable$Entry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$Entry),getKey1,MethodDescriptor((): java.lang.Object),org.apache.batik.util.DoublyIndexedTable$Entry{ public java.lang.Object getKey1() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$Entry),getKey2,MethodDescriptor((): java.lang.Object),org.apache.batik.util.DoublyIndexedTable$Entry{ public java.lang.Object getKey2() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$Entry),getValue,MethodDescriptor((): java.lang.Object),org.apache.batik.util.DoublyIndexedTable$Entry{ public java.lang.Object getValue() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$Entry),match,MethodDescriptor((java.lang.Object, java.lang.Object): boolean),org.apache.batik.util.DoublyIndexedTable$Entry{ protected boolean match(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$TableIterator),<init>,MethodDescriptor((org.apache.batik.util.DoublyIndexedTable): void),org.apache.batik.util.DoublyIndexedTable$TableIterator{ public void <init>(org.apache.batik.util.DoublyIndexedTable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$TableIterator),findNext,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedTable$TableIterator{ protected void findNext() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$TableIterator),hasNext,MethodDescriptor((): boolean),org.apache.batik.util.DoublyIndexedTable$TableIterator{ public boolean hasNext() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$TableIterator),next,MethodDescriptor((): java.lang.Object),org.apache.batik.util.DoublyIndexedTable$TableIterator{ public java.lang.Object next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable$TableIterator),remove,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedTable$TableIterator{ public void remove() }) => DPure
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),<init>,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedTable{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),<init>,MethodDescriptor((int): void),org.apache.batik.util.DoublyIndexedTable{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),<init>,MethodDescriptor((org.apache.batik.util.DoublyIndexedTable): void),org.apache.batik.util.DoublyIndexedTable{ public void <init>(org.apache.batik.util.DoublyIndexedTable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),clear,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedTable{ public void clear() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),get,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),org.apache.batik.util.DoublyIndexedTable{ public java.lang.Object get(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),getValuesArray,MethodDescriptor((): java.lang.Object[]),org.apache.batik.util.DoublyIndexedTable{ public java.lang.Object[] getValuesArray() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),hashCode,MethodDescriptor((java.lang.Object, java.lang.Object): int),org.apache.batik.util.DoublyIndexedTable{ protected int hashCode(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),iterator,MethodDescriptor((): java.util.Iterator),org.apache.batik.util.DoublyIndexedTable{ public java.util.Iterator iterator() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),put,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),org.apache.batik.util.DoublyIndexedTable{ public java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),rehash,MethodDescriptor((): void),org.apache.batik.util.DoublyIndexedTable{ protected void rehash() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),remove,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),org.apache.batik.util.DoublyIndexedTable{ public java.lang.Object remove(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyIndexedTable),size,MethodDescriptor((): int),org.apache.batik.util.DoublyIndexedTable{ public int size() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),<init>,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList$Node{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),getNext,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getNext() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),getPrev,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getPrev() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),insertBefore,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void insertBefore(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),setNext,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setNext(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),setPrev,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setPrev(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList$Node),unlink,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void unlink() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),<init>,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),add,MethodDescriptor((int, org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void add(int,org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),add,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void add(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),empty,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList{ public void empty() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),getHead,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList{ public org.apache.batik.util.DoublyLinkedList$Node getHead() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),getSize,MethodDescriptor((): int),org.apache.batik.util.DoublyLinkedList{ public int getSize() }) => ExternallySideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),getTail,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList{ public org.apache.batik.util.DoublyLinkedList$Node getTail() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),pop,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList{ public org.apache.batik.util.DoublyLinkedList$Node pop() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),push,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void push(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),remove,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void remove(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),touch,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void touch(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),unpop,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList{ public void unpop(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/DoublyLinkedList),unpush,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList{ public org.apache.batik.util.DoublyLinkedList$Node unpush() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EncodingUtilities),<clinit>,MethodDescriptor((): void),org.apache.batik.util.EncodingUtilities{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EncodingUtilities),<init>,MethodDescriptor((): void),org.apache.batik.util.EncodingUtilities{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EncodingUtilities),javaEncoding,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.EncodingUtilities{ public static java.lang.String javaEncoding(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EventDispatcher$1),<init>,MethodDescriptor((org.apache.batik.util.EventDispatcher$Dispatcher, java.util.List, java.lang.Object, boolean): void),org.apache.batik.util.EventDispatcher$1{ void <init>(org.apache.batik.util.EventDispatcher$Dispatcher,java.util.List,java.lang.Object,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EventDispatcher$1),run,MethodDescriptor((): void),org.apache.batik.util.EventDispatcher$1{ public void run() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EventDispatcher),<init>,MethodDescriptor((): void),org.apache.batik.util.EventDispatcher{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EventDispatcher),dispatchEvent,MethodDescriptor((org.apache.batik.util.EventDispatcher$Dispatcher, java.lang.Object[], java.lang.Object): void),org.apache.batik.util.EventDispatcher{ protected static void dispatchEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.lang.Object[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/EventDispatcher),fireEvent,MethodDescriptor((org.apache.batik.util.EventDispatcher$Dispatcher, java.util.List, java.lang.Object, boolean): void),org.apache.batik.util.EventDispatcher{ public static void fireEvent(org.apache.batik.util.EventDispatcher$Dispatcher,java.util.List,java.lang.Object,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),<init>,MethodDescriptor((): void),org.apache.batik.util.HaltingThread{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),<init>,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.HaltingThread{ public void <init>(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),<init>,MethodDescriptor((java.lang.Runnable, java.lang.String): void),org.apache.batik.util.HaltingThread{ public void <init>(java.lang.Runnable,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.HaltingThread{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),clearHalted,MethodDescriptor((): void),org.apache.batik.util.HaltingThread{ public void clearHalted() }) => DExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),halt,MethodDescriptor((): void),org.apache.batik.util.HaltingThread{ public void halt() }) => DExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),haltThread,MethodDescriptor((): void),org.apache.batik.util.HaltingThread{ public static void haltThread() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),haltThread,MethodDescriptor((java.lang.Thread): void),org.apache.batik.util.HaltingThread{ public static void haltThread(java.lang.Thread) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),hasBeenHalted,MethodDescriptor((): boolean),org.apache.batik.util.HaltingThread{ public static boolean hasBeenHalted() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),hasBeenHalted,MethodDescriptor((java.lang.Thread): boolean),org.apache.batik.util.HaltingThread{ public static boolean hasBeenHalted(java.lang.Thread) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/HaltingThread),isHalted,MethodDescriptor((): boolean),org.apache.batik.util.HaltingThread{ public boolean isHalted() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/Messages),<clinit>,MethodDescriptor((): void),org.apache.batik.util.Messages{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),<init>,MethodDescriptor((): void),org.apache.batik.util.Messages{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.Messages{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),formatMessage,MethodDescriptor((java.lang.String, java.lang.Object[]): java.lang.String),org.apache.batik.util.Messages{ public static java.lang.String formatMessage(java.lang.String,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),getCharacter,MethodDescriptor((java.lang.String): int),org.apache.batik.util.Messages{ public static int getCharacter(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),getInteger,MethodDescriptor((java.lang.String): int),org.apache.batik.util.Messages{ public static int getInteger(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),getLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.util.Messages{ public static java.util.Locale getLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),getString,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.Messages{ public static java.lang.String getString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Messages),setLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.util.Messages{ public static void setLocale(java.util.Locale) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/MimeTypeConstants),<clinit>,MethodDescriptor((): void),org.apache.batik.util.MimeTypeConstants{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<clinit>,MethodDescriptor((): void),org.apache.batik.util.ParsedURL{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURL{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<init>,MethodDescriptor((java.lang.String, java.lang.String): void),org.apache.batik.util.ParsedURL{ public void <init>(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<init>,MethodDescriptor((java.net.URL): void),org.apache.batik.util.ParsedURL{ public void <init>(java.net.URL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<init>,MethodDescriptor((java.net.URL, java.lang.String): void),org.apache.batik.util.ParsedURL{ public void <init>(java.net.URL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),<init>,MethodDescriptor((org.apache.batik.util.ParsedURL, java.lang.String): void),org.apache.batik.util.ParsedURL{ public void <init>(org.apache.batik.util.ParsedURL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),checkGZIP,MethodDescriptor((java.io.InputStream): java.io.InputStream),org.apache.batik.util.ParsedURL{ public static java.io.InputStream checkGZIP(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.ParsedURL{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),complete,MethodDescriptor((): boolean),org.apache.batik.util.ParsedURL{ public boolean complete() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),equals,MethodDescriptor((java.lang.Object): boolean),org.apache.batik.util.ParsedURL{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getContentEncoding,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getContentEncoding() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getContentType,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getContentType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getContentTypeCharset,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getContentTypeCharset() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getContentTypeMediaType,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getContentTypeMediaType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getGlobalUserAgent,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public static java.lang.String getGlobalUserAgent() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getHandler,MethodDescriptor((java.lang.String): org.apache.batik.util.ParsedURLProtocolHandler),org.apache.batik.util.ParsedURL{ public static org.apache.batik.util.ParsedURLProtocolHandler getHandler(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getHandlersMap,MethodDescriptor((): java.util.Map),org.apache.batik.util.ParsedURL{ private static java.util.Map getHandlersMap() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getHost,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getHost() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getPath,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getPath() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getPort,MethodDescriptor((): int),org.apache.batik.util.ParsedURL{ public int getPort() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getPortStr,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getPortStr() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getProtocol,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getProtocol() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getProtocol,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURL{ protected static java.lang.String getProtocol(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getRef,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getRef() }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),getUserAgent,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String getUserAgent() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),hasContentTypeParameter,MethodDescriptor((java.lang.String): boolean),org.apache.batik.util.ParsedURL{ public boolean hasContentTypeParameter(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),hashCode,MethodDescriptor((): int),org.apache.batik.util.ParsedURL{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStream,MethodDescriptor((): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStream() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStream,MethodDescriptor((java.lang.String): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStream(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStream,MethodDescriptor((java.lang.String[]): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStream(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStream,MethodDescriptor((java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStream(java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStreamRaw,MethodDescriptor((): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStreamRaw() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStreamRaw,MethodDescriptor((java.lang.String): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStreamRaw(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStreamRaw,MethodDescriptor((java.lang.String[]): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStreamRaw(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),openStreamRaw,MethodDescriptor((java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURL{ public java.io.InputStream openStreamRaw(java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),parseURL,MethodDescriptor((java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURL{ public static org.apache.batik.util.ParsedURLData parseURL(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),parseURL,MethodDescriptor((java.lang.String, java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURL{ public static org.apache.batik.util.ParsedURLData parseURL(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),parseURL,MethodDescriptor((org.apache.batik.util.ParsedURL, java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURL{ public static org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),registerHandler,MethodDescriptor((org.apache.batik.util.ParsedURLProtocolHandler): void),org.apache.batik.util.ParsedURL{ public static void registerHandler(org.apache.batik.util.ParsedURLProtocolHandler) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),sameFile,MethodDescriptor((org.apache.batik.util.ParsedURL): boolean),org.apache.batik.util.ParsedURL{ public boolean sameFile(org.apache.batik.util.ParsedURL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),setGlobalUserAgent,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURL{ public static void setGlobalUserAgent(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),setUserAgent,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURL{ public void setUserAgent(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURL),toString,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURL{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),<clinit>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLData{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),<init>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLData{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),<init>,MethodDescriptor((java.net.URL): void),org.apache.batik.util.ParsedURLData{ public void <init>(java.net.URL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),buildURL,MethodDescriptor((): java.net.URL),org.apache.batik.util.ParsedURLData{ protected java.net.URL buildURL() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),checkGZIP,MethodDescriptor((java.io.InputStream): java.io.InputStream),org.apache.batik.util.ParsedURLData{ public static java.io.InputStream checkGZIP(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),complete,MethodDescriptor((): boolean),org.apache.batik.util.ParsedURLData{ public boolean complete() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),equals,MethodDescriptor((java.lang.Object): boolean),org.apache.batik.util.ParsedURLData{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),extractContentTypeParts,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURLData{ protected void extractContentTypeParts(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),getContentEncoding,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentEncoding(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),getContentType,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentType(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),getContentTypeCharset,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentTypeCharset(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),getContentTypeMediaType,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentTypeMediaType(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),getPortStr,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getPortStr() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),hasContentTypeParameter,MethodDescriptor((java.lang.String, java.lang.String): boolean),org.apache.batik.util.ParsedURLData{ public boolean hasContentTypeParameter(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),hashCode,MethodDescriptor((): int),org.apache.batik.util.ParsedURLData{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),openStream,MethodDescriptor((java.lang.String, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLData{ public java.io.InputStream openStream(java.lang.String,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),openStreamInternal,MethodDescriptor((java.lang.String, java.util.Iterator, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLData{ protected java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),openStreamRaw,MethodDescriptor((java.lang.String, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLData{ public java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),sameFile,MethodDescriptor((org.apache.batik.util.ParsedURLData): boolean),org.apache.batik.util.ParsedURLData{ protected boolean sameFile(org.apache.batik.util.ParsedURLData) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLData),toString,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),<init>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),buildURL,MethodDescriptor((): java.net.URL),org.apache.batik.util.ParsedURLData{ protected java.net.URL buildURL() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),complete,MethodDescriptor((): boolean),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public boolean complete() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),decode,MethodDescriptor((java.lang.String): java.io.InputStream),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public static java.io.InputStream decode(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),equals,MethodDescriptor((java.lang.Object): boolean),org.apache.batik.util.ParsedURLData{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),extractContentTypeParts,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURLData{ protected void extractContentTypeParts(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),getContentEncoding,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public java.lang.String getContentEncoding(java.lang.String) }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),getContentType,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public java.lang.String getContentType(java.lang.String) }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),getContentTypeCharset,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentTypeCharset(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),getContentTypeMediaType,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLData{ public java.lang.String getContentTypeMediaType(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),getPortStr,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public java.lang.String getPortStr() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),hasContentTypeParameter,MethodDescriptor((java.lang.String, java.lang.String): boolean),org.apache.batik.util.ParsedURLData{ public boolean hasContentTypeParameter(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),hashCode,MethodDescriptor((): int),org.apache.batik.util.ParsedURLData{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),openStream,MethodDescriptor((java.lang.String, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLData{ public java.io.InputStream openStream(java.lang.String,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),openStreamInternal,MethodDescriptor((java.lang.String, java.util.Iterator, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ protected java.io.InputStream openStreamInternal(java.lang.String,java.util.Iterator,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),openStreamRaw,MethodDescriptor((java.lang.String, java.util.Iterator): java.io.InputStream),org.apache.batik.util.ParsedURLData{ public java.io.InputStream openStreamRaw(java.lang.String,java.util.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),sameFile,MethodDescriptor((org.apache.batik.util.ParsedURLData): boolean),org.apache.batik.util.ParsedURLData{ protected boolean sameFile(org.apache.batik.util.ParsedURLData) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler$DataParsedURLData),toString,MethodDescriptor((): java.lang.String),org.apache.batik.util.ParsedURLDataProtocolHandler$DataParsedURLData{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler),<init>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLDataProtocolHandler{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler),getProtocolHandled,MethodDescriptor((): java.lang.String),org.apache.batik.util.AbstractParsedURLProtocolHandler{ public java.lang.String getProtocolHandled() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler),parseURL,MethodDescriptor((java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDataProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDataProtocolHandler),parseURL,MethodDescriptor((org.apache.batik.util.ParsedURL, java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDataProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),<init>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ protected void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),charToHex,MethodDescriptor((int): int),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public static int charToHex(int) }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),constructParsedURLData,MethodDescriptor((): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ protected org.apache.batik.util.ParsedURLData constructParsedURLData() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),constructParsedURLData,MethodDescriptor((java.net.URL): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ protected org.apache.batik.util.ParsedURLData constructParsedURLData(java.net.URL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),getProtocolHandled,MethodDescriptor((): java.lang.String),org.apache.batik.util.AbstractParsedURLProtocolHandler{ public java.lang.String getProtocolHandled() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),parseURL,MethodDescriptor((java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),parseURL,MethodDescriptor((org.apache.batik.util.ParsedURL, java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLDefaultProtocolHandler),unescapeStr,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public static java.lang.String unescapeStr(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),<init>,MethodDescriptor((): void),org.apache.batik.util.ParsedURLJarProtocolHandler{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),constructParsedURLData,MethodDescriptor((): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ protected org.apache.batik.util.ParsedURLData constructParsedURLData() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),constructParsedURLData,MethodDescriptor((java.net.URL): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ protected org.apache.batik.util.ParsedURLData constructParsedURLData(java.net.URL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),getProtocolHandled,MethodDescriptor((): java.lang.String),org.apache.batik.util.AbstractParsedURLProtocolHandler{ public java.lang.String getProtocolHandled() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),parseURL,MethodDescriptor((java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLDefaultProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/ParsedURLJarProtocolHandler),parseURL,MethodDescriptor((org.apache.batik.util.ParsedURL, java.lang.String): org.apache.batik.util.ParsedURLData),org.apache.batik.util.ParsedURLJarProtocolHandler{ public org.apache.batik.util.ParsedURLData parseURL(org.apache.batik.util.ParsedURL,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Platform),<clinit>,MethodDescriptor((): void),org.apache.batik.util.Platform{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Platform),<init>,MethodDescriptor((): void),org.apache.batik.util.Platform{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Platform),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.Platform{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Platform),unmaximize,MethodDescriptor((java.awt.Frame): void),org.apache.batik.util.Platform{ public static void unmaximize(java.awt.Frame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),<clinit>,MethodDescriptor((): void),org.apache.batik.util.PreferenceManager{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.PreferenceManager{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),<init>,MethodDescriptor((java.lang.String, java.util.Map): void),org.apache.batik.util.PreferenceManager{ public void <init>(java.lang.String,java.util.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getBoolean,MethodDescriptor((java.lang.String): boolean),org.apache.batik.util.PreferenceManager{ public boolean getBoolean(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getColor,MethodDescriptor((java.lang.String): java.awt.Color),org.apache.batik.util.PreferenceManager{ public java.awt.Color getColor(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getDefault,MethodDescriptor((java.lang.String): java.lang.Object),org.apache.batik.util.PreferenceManager{ private java.lang.Object getDefault(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getDimension,MethodDescriptor((java.lang.String): java.awt.Dimension),org.apache.batik.util.PreferenceManager{ public java.awt.Dimension getDimension(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getFile,MethodDescriptor((java.lang.String): java.io.File),org.apache.batik.util.PreferenceManager{ public java.io.File getFile(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getFiles,MethodDescriptor((java.lang.String): java.io.File[]),org.apache.batik.util.PreferenceManager{ public java.io.File[] getFiles(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getFloat,MethodDescriptor((java.lang.String): float),org.apache.batik.util.PreferenceManager{ public float getFloat(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getFont,MethodDescriptor((java.lang.String): java.awt.Font),org.apache.batik.util.PreferenceManager{ public java.awt.Font getFont(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getInteger,MethodDescriptor((java.lang.String): int),org.apache.batik.util.PreferenceManager{ public int getInteger(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getPoint,MethodDescriptor((java.lang.String): java.awt.Point),org.apache.batik.util.PreferenceManager{ public java.awt.Point getPoint(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getPreferenceDirectory,MethodDescriptor((): java.lang.String),org.apache.batik.util.PreferenceManager{ public static java.lang.String getPreferenceDirectory() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getRectangle,MethodDescriptor((java.lang.String): java.awt.Rectangle),org.apache.batik.util.PreferenceManager{ public java.awt.Rectangle getRectangle(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getString,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.PreferenceManager{ public java.lang.String getString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getStrings,MethodDescriptor((java.lang.String): java.lang.String[]),org.apache.batik.util.PreferenceManager{ public java.lang.String[] getStrings(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getSystemProperty,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.PreferenceManager{ protected static java.lang.String getSystemProperty(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getURL,MethodDescriptor((java.lang.String): java.net.URL),org.apache.batik.util.PreferenceManager{ public java.net.URL getURL(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),getURLs,MethodDescriptor((java.lang.String): java.net.URL[]),org.apache.batik.util.PreferenceManager{ public java.net.URL[] getURLs(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),load,MethodDescriptor((): void),org.apache.batik.util.PreferenceManager{ public void load() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),save,MethodDescriptor((): void),org.apache.batik.util.PreferenceManager{ public void save() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setBoolean,MethodDescriptor((java.lang.String, boolean): void),org.apache.batik.util.PreferenceManager{ public void setBoolean(java.lang.String,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setColor,MethodDescriptor((java.lang.String, java.awt.Color): void),org.apache.batik.util.PreferenceManager{ public void setColor(java.lang.String,java.awt.Color) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setDimension,MethodDescriptor((java.lang.String, java.awt.Dimension): void),org.apache.batik.util.PreferenceManager{ public void setDimension(java.lang.String,java.awt.Dimension) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setFile,MethodDescriptor((java.lang.String, java.io.File): void),org.apache.batik.util.PreferenceManager{ public void setFile(java.lang.String,java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setFiles,MethodDescriptor((java.lang.String, java.io.File[]): void),org.apache.batik.util.PreferenceManager{ public void setFiles(java.lang.String,java.io.File[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setFloat,MethodDescriptor((java.lang.String, float): void),org.apache.batik.util.PreferenceManager{ public void setFloat(java.lang.String,float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setFont,MethodDescriptor((java.lang.String, java.awt.Font): void),org.apache.batik.util.PreferenceManager{ public void setFont(java.lang.String,java.awt.Font) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setInteger,MethodDescriptor((java.lang.String, int): void),org.apache.batik.util.PreferenceManager{ public void setInteger(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setPoint,MethodDescriptor((java.lang.String, java.awt.Point): void),org.apache.batik.util.PreferenceManager{ public void setPoint(java.lang.String,java.awt.Point) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setPreferenceDirectory,MethodDescriptor((java.lang.String): void),org.apache.batik.util.PreferenceManager{ public static void setPreferenceDirectory(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setRectangle,MethodDescriptor((java.lang.String, java.awt.Rectangle): void),org.apache.batik.util.PreferenceManager{ public void setRectangle(java.lang.String,java.awt.Rectangle) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setString,MethodDescriptor((java.lang.String, java.lang.String): void),org.apache.batik.util.PreferenceManager{ public void setString(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setStrings,MethodDescriptor((java.lang.String, java.lang.String[]): void),org.apache.batik.util.PreferenceManager{ public void setStrings(java.lang.String,java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setURL,MethodDescriptor((java.lang.String, java.net.URL): void),org.apache.batik.util.PreferenceManager{ public void setURL(java.lang.String,java.net.URL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/PreferenceManager),setURLs,MethodDescriptor((java.lang.String, java.net.URL[]): void),org.apache.batik.util.PreferenceManager{ public void setURLs(java.lang.String,java.net.URL[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$1),<init>,MethodDescriptor((org.apache.batik.util.RunnableQueue): void),org.apache.batik.util.RunnableQueue$1{ void <init>(org.apache.batik.util.RunnableQueue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$1),hasNext,MethodDescriptor((): boolean),org.apache.batik.util.RunnableQueue$1{ public boolean hasNext() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$1),next,MethodDescriptor((): java.lang.Object),org.apache.batik.util.RunnableQueue$1{ public java.lang.Object next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$1),remove,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue$1{ public void remove() }) => DPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),<init>,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue$Link{ public void <init>(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),access$100,MethodDescriptor((org.apache.batik.util.RunnableQueue$Link): java.lang.Runnable),org.apache.batik.util.RunnableQueue$Link{ static java.lang.Runnable access$100(org.apache.batik.util.RunnableQueue$Link) }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),getNext,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getNext() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),getPrev,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getPrev() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),insertBefore,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void insertBefore(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),setNext,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setNext(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),setPrev,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setPrev(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),unlink,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void unlink() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$Link),unlock,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue$Link{ public void unlock() }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),<init>,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue$LockableLink{ public void <init>(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),getNext,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getNext() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),getPrev,MethodDescriptor((): org.apache.batik.util.DoublyLinkedList$Node),org.apache.batik.util.DoublyLinkedList$Node{ public org.apache.batik.util.DoublyLinkedList$Node getPrev() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),insertBefore,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void insertBefore(org.apache.batik.util.DoublyLinkedList$Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),isLocked,MethodDescriptor((): boolean),org.apache.batik.util.RunnableQueue$LockableLink{ public boolean isLocked() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),lock,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue$LockableLink{ public void lock() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),setNext,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setNext(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),setPrev,MethodDescriptor((org.apache.batik.util.DoublyLinkedList$Node): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void setPrev(org.apache.batik.util.DoublyLinkedList$Node) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),unlink,MethodDescriptor((): void),org.apache.batik.util.DoublyLinkedList$Node{ protected void unlink() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$LockableLink),unlock,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue$LockableLink{ public void unlock() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunHandlerAdapter),<init>,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue$RunHandlerAdapter{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunHandlerAdapter),executionResumed,MethodDescriptor((org.apache.batik.util.RunnableQueue): void),org.apache.batik.util.RunnableQueue$RunHandlerAdapter{ public void executionResumed(org.apache.batik.util.RunnableQueue) }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunHandlerAdapter),executionSuspended,MethodDescriptor((org.apache.batik.util.RunnableQueue): void),org.apache.batik.util.RunnableQueue$RunHandlerAdapter{ public void executionSuspended(org.apache.batik.util.RunnableQueue) }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunHandlerAdapter),runnableInvoked,MethodDescriptor((org.apache.batik.util.RunnableQueue, java.lang.Runnable): void),org.apache.batik.util.RunnableQueue$RunHandlerAdapter{ public void runnableInvoked(org.apache.batik.util.RunnableQueue,java.lang.Runnable) }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunHandlerAdapter),runnableStart,MethodDescriptor((org.apache.batik.util.RunnableQueue, java.lang.Runnable): void),org.apache.batik.util.RunnableQueue$RunHandlerAdapter{ public void runnableStart(org.apache.batik.util.RunnableQueue,java.lang.Runnable) }) => CompileTimePure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunnableQueueState),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.RunnableQueue$RunnableQueueState{ private void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunnableQueueState),<init>,MethodDescriptor((java.lang.String, org.apache.batik.util.RunnableQueue$1): void),org.apache.batik.util.RunnableQueue$RunnableQueueState{ void <init>(java.lang.String,org.apache.batik.util.RunnableQueue$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunnableQueueState),getValue,MethodDescriptor((): java.lang.String),org.apache.batik.util.RunnableQueue$RunnableQueueState{ public java.lang.String getValue() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue$RunnableQueueState),toString,MethodDescriptor((): java.lang.String),org.apache.batik.util.RunnableQueue$RunnableQueueState{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),<clinit>,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),<init>,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),access$200,MethodDescriptor((org.apache.batik.util.RunnableQueue): org.apache.batik.util.DoublyLinkedList),org.apache.batik.util.RunnableQueue{ static org.apache.batik.util.DoublyLinkedList access$200(org.apache.batik.util.RunnableQueue) }) => DSideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),createRunnableQueue,MethodDescriptor((): org.apache.batik.util.RunnableQueue),org.apache.batik.util.RunnableQueue{ public static org.apache.batik.util.RunnableQueue createRunnableQueue() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),executionResumed,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ protected void executionResumed() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),executionSuspended,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ protected void executionSuspended() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),getIteratorLock,MethodDescriptor((): java.lang.Object),org.apache.batik.util.RunnableQueue{ public java.lang.Object getIteratorLock() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),getQueueState,MethodDescriptor((): org.apache.batik.util.RunnableQueue$RunnableQueueState),org.apache.batik.util.RunnableQueue{ public org.apache.batik.util.RunnableQueue$RunnableQueueState getQueueState() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),getRunHandler,MethodDescriptor((): org.apache.batik.util.RunnableQueue$RunHandler),org.apache.batik.util.RunnableQueue{ public org.apache.batik.util.RunnableQueue$RunHandler getRunHandler() }) => ExternallySideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),getThread,MethodDescriptor((): org.apache.batik.util.HaltingThread),org.apache.batik.util.RunnableQueue{ public org.apache.batik.util.HaltingThread getThread() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),invokeAndWait,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ public void invokeAndWait(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),invokeLater,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ public void invokeLater(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),iterator,MethodDescriptor((): java.util.Iterator),org.apache.batik.util.RunnableQueue{ public java.util.Iterator iterator() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),preemptAndWait,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ public void preemptAndWait(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),preemptLater,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ public void preemptLater(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),resumeExecution,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ public void resumeExecution() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),run,MethodDescriptor((): void),org.apache.batik.util.RunnableQueue{ public void run() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),runnableInvoked,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ protected void runnableInvoked(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),runnableStart,MethodDescriptor((java.lang.Runnable): void),org.apache.batik.util.RunnableQueue{ protected void runnableStart(java.lang.Runnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),setIdleRunnable,MethodDescriptor((org.apache.batik.util.RunnableQueue$IdleRunnable): void),org.apache.batik.util.RunnableQueue{ public void setIdleRunnable(org.apache.batik.util.RunnableQueue$IdleRunnable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),setRunHandler,MethodDescriptor((org.apache.batik.util.RunnableQueue$RunHandler): void),org.apache.batik.util.RunnableQueue{ public void setRunHandler(org.apache.batik.util.RunnableQueue$RunHandler) }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/RunnableQueue),suspendExecution,MethodDescriptor((boolean): void),org.apache.batik.util.RunnableQueue{ public void suspendExecution(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SVGFeatureStrings),<init>,MethodDescriptor((): void),org.apache.batik.util.SVGFeatureStrings{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SVGFeatureStrings),addSupportedFeatureStrings,MethodDescriptor((java.util.Set): void),org.apache.batik.util.SVGFeatureStrings{ public static void addSupportedFeatureStrings(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SVGTypes),<init>,MethodDescriptor((): void),org.apache.batik.util.SVGTypes{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Service),<clinit>,MethodDescriptor((): void),org.apache.batik.util.Service{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Service),<init>,MethodDescriptor((): void),org.apache.batik.util.Service{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Service),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.Service{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/Service),providers,MethodDescriptor((java.lang.Class): java.util.Iterator),org.apache.batik.util.Service{ public static java.util.Iterator providers(java.lang.Class) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable$Entry),<init>,MethodDescriptor((org.apache.batik.util.SoftDoublyIndexedTable, int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.batik.util.SoftDoublyIndexedTable$Entry): void),org.apache.batik.util.SoftDoublyIndexedTable$Entry{ public void <init>(org.apache.batik.util.SoftDoublyIndexedTable,int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.SoftDoublyIndexedTable$Entry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable$Entry),match,MethodDescriptor((java.lang.Object, java.lang.Object): boolean),org.apache.batik.util.SoftDoublyIndexedTable$Entry{ public boolean match(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),<init>,MethodDescriptor((): void),org.apache.batik.util.SoftDoublyIndexedTable{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),<init>,MethodDescriptor((int): void),org.apache.batik.util.SoftDoublyIndexedTable{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),clear,MethodDescriptor((): void),org.apache.batik.util.SoftDoublyIndexedTable{ public void clear() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),get,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),org.apache.batik.util.SoftDoublyIndexedTable{ public java.lang.Object get(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),hashCode,MethodDescriptor((java.lang.Object, java.lang.Object): int),org.apache.batik.util.SoftDoublyIndexedTable{ protected int hashCode(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),put,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),org.apache.batik.util.SoftDoublyIndexedTable{ public java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),rehash,MethodDescriptor((): void),org.apache.batik.util.SoftDoublyIndexedTable{ protected void rehash() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),removeClearedEntries,MethodDescriptor((): void),org.apache.batik.util.SoftDoublyIndexedTable{ protected void removeClearedEntries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftDoublyIndexedTable),size,MethodDescriptor((): int),org.apache.batik.util.SoftDoublyIndexedTable{ public int size() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache$SoftRefKey),<init>,MethodDescriptor((org.apache.batik.util.SoftReferenceCache, java.lang.Object, java.lang.Object): void),org.apache.batik.util.SoftReferenceCache$SoftRefKey{ public void <init>(org.apache.batik.util.SoftReferenceCache,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache$SoftRefKey),cleared,MethodDescriptor((): void),org.apache.batik.util.SoftReferenceCache$SoftRefKey{ public void cleared() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),<init>,MethodDescriptor((): void),org.apache.batik.util.SoftReferenceCache{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),clearImpl,MethodDescriptor((java.lang.Object): void),org.apache.batik.util.SoftReferenceCache{ protected void clearImpl(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),flush,MethodDescriptor((): void),org.apache.batik.util.SoftReferenceCache{ public void flush() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),isDoneImpl,MethodDescriptor((java.lang.Object): boolean),org.apache.batik.util.SoftReferenceCache{ protected boolean isDoneImpl(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),isPresentImpl,MethodDescriptor((java.lang.Object): boolean),org.apache.batik.util.SoftReferenceCache{ protected boolean isPresentImpl(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),putImpl,MethodDescriptor((java.lang.Object, java.lang.Object): void),org.apache.batik.util.SoftReferenceCache{ protected void putImpl(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/SoftReferenceCache),requestImpl,MethodDescriptor((java.lang.Object): java.lang.Object),org.apache.batik.util.SoftReferenceCache{ protected java.lang.Object requestImpl(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),<clinit>,MethodDescriptor((): void),org.apache.batik.util.XMLResourceDescriptor{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),<init>,MethodDescriptor((): void),org.apache.batik.util.XMLResourceDescriptor{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.XMLResourceDescriptor{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),getCSSParserClassName,MethodDescriptor((): java.lang.String),org.apache.batik.util.XMLResourceDescriptor{ public static java.lang.String getCSSParserClassName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),getParserProps,MethodDescriptor((): java.util.Properties),org.apache.batik.util.XMLResourceDescriptor{ protected static java.util.Properties getParserProps() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),getXMLParserClassName,MethodDescriptor((): java.lang.String),org.apache.batik.util.XMLResourceDescriptor{ public static java.lang.String getXMLParserClassName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),setCSSParserClassName,MethodDescriptor((java.lang.String): void),org.apache.batik.util.XMLResourceDescriptor{ public static void setCSSParserClassName(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/XMLResourceDescriptor),setXMLParserClassName,MethodDescriptor((java.lang.String): void),org.apache.batik.util.XMLResourceDescriptor{ public static void setXMLParserClassName(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.ASCIIDecoder{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),charError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void charError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),endOfStreamError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void endOfStreamError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),fillBuffer,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void fillBuffer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ASCIIDecoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.ASCIIDecoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/AbstractCharDecoder),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/AbstractCharDecoder),charError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void charError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/AbstractCharDecoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/AbstractCharDecoder),endOfStreamError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void endOfStreamError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/AbstractCharDecoder),fillBuffer,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void fillBuffer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/GenericDecoder),<init>,MethodDescriptor((java.io.InputStream, java.lang.String): void),org.apache.batik.util.io.GenericDecoder{ public void <init>(java.io.InputStream,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/GenericDecoder),<init>,MethodDescriptor((java.io.Reader): void),org.apache.batik.util.io.GenericDecoder{ public void <init>(java.io.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/GenericDecoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.GenericDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/GenericDecoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.GenericDecoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.ISO_8859_1Decoder{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),charError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void charError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),endOfStreamError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void endOfStreamError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),fillBuffer,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void fillBuffer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/ISO_8859_1Decoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.ISO_8859_1Decoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),<clinit>,MethodDescriptor((): void),org.apache.batik.util.io.Messages{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),<init>,MethodDescriptor((): void),org.apache.batik.util.io.Messages{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.io.Messages{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),formatMessage,MethodDescriptor((java.lang.String, java.lang.Object[]): java.lang.String),org.apache.batik.util.io.Messages{ public static java.lang.String formatMessage(java.lang.String,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),getLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.util.io.Messages{ public static java.util.Locale getLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/Messages),setLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.util.io.Messages{ public static void setLocale(java.util.Locale) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/NormalizingReader),<init>,MethodDescriptor((): void),org.apache.batik.util.io.NormalizingReader{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/NormalizingReader),read,MethodDescriptor((char[], int, int): int),org.apache.batik.util.io.NormalizingReader{ public int read(char[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$ASCIIDecoderFactory),<init>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader$ASCIIDecoderFactory{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$ASCIIDecoderFactory),createCharDecoder,MethodDescriptor((java.io.InputStream): org.apache.batik.util.io.CharDecoder),org.apache.batik.util.io.StreamNormalizingReader$ASCIIDecoderFactory{ public org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$ISO_8859_1DecoderFactory),<init>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader$ISO_8859_1DecoderFactory{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$ISO_8859_1DecoderFactory),createCharDecoder,MethodDescriptor((java.io.InputStream): org.apache.batik.util.io.CharDecoder),org.apache.batik.util.io.StreamNormalizingReader$ISO_8859_1DecoderFactory{ public org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$UTF16DecoderFactory),<init>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader$UTF16DecoderFactory{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$UTF16DecoderFactory),createCharDecoder,MethodDescriptor((java.io.InputStream): org.apache.batik.util.io.CharDecoder),org.apache.batik.util.io.StreamNormalizingReader$UTF16DecoderFactory{ public org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$UTF8DecoderFactory),<init>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader$UTF8DecoderFactory{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader$UTF8DecoderFactory),createCharDecoder,MethodDescriptor((java.io.InputStream): org.apache.batik.util.io.CharDecoder),org.apache.batik.util.io.StreamNormalizingReader$UTF8DecoderFactory{ public org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),<clinit>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),<init>,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.StreamNormalizingReader{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),<init>,MethodDescriptor((java.io.InputStream, java.lang.String): void),org.apache.batik.util.io.StreamNormalizingReader{ public void <init>(java.io.InputStream,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),<init>,MethodDescriptor((java.io.Reader): void),org.apache.batik.util.io.StreamNormalizingReader{ public void <init>(java.io.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),close,MethodDescriptor((): void),org.apache.batik.util.io.StreamNormalizingReader{ public void close() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),createCharDecoder,MethodDescriptor((java.io.InputStream, java.lang.String): org.apache.batik.util.io.CharDecoder),org.apache.batik.util.io.StreamNormalizingReader{ protected org.apache.batik.util.io.CharDecoder createCharDecoder(java.io.InputStream,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),getColumn,MethodDescriptor((): int),org.apache.batik.util.io.StreamNormalizingReader{ public int getColumn() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),getLine,MethodDescriptor((): int),org.apache.batik.util.io.StreamNormalizingReader{ public int getLine() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),read,MethodDescriptor((): int),org.apache.batik.util.io.StreamNormalizingReader{ public int read() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StreamNormalizingReader),read,MethodDescriptor((char[], int, int): int),org.apache.batik.util.io.NormalizingReader{ public int read(char[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StringDecoder),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.StringDecoder{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StringDecoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.StringDecoder{ public void dispose() }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/io/StringDecoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.StringDecoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),<init>,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.StringNormalizingReader{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),close,MethodDescriptor((): void),org.apache.batik.util.io.StringNormalizingReader{ public void close() }) => ExternallyPure
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),getColumn,MethodDescriptor((): int),org.apache.batik.util.io.StringNormalizingReader{ public int getColumn() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),getLine,MethodDescriptor((): int),org.apache.batik.util.io.StringNormalizingReader{ public int getLine() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),read,MethodDescriptor((): int),org.apache.batik.util.io.StringNormalizingReader{ public int read() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/StringNormalizingReader),read,MethodDescriptor((char[], int, int): int),org.apache.batik.util.io.NormalizingReader{ public int read(char[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.UTF16Decoder{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),<init>,MethodDescriptor((java.io.InputStream, boolean): void),org.apache.batik.util.io.UTF16Decoder{ public void <init>(java.io.InputStream,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),charError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void charError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),endOfStreamError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void endOfStreamError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),fillBuffer,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void fillBuffer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF16Decoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.UTF16Decoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),<clinit>,MethodDescriptor((): void),org.apache.batik.util.io.UTF8Decoder{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),<init>,MethodDescriptor((java.io.InputStream): void),org.apache.batik.util.io.UTF8Decoder{ public void <init>(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),charError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void charError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),dispose,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ public void dispose() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),endOfStreamError,MethodDescriptor((java.lang.String): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void endOfStreamError(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),fillBuffer,MethodDescriptor((): void),org.apache.batik.util.io.AbstractCharDecoder{ protected void fillBuffer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/io/UTF8Decoder),readChar,MethodDescriptor((): int),org.apache.batik.util.io.UTF8Decoder{ public int readChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),<clinit>,MethodDescriptor((): void),org.apache.batik.util.resources.Messages{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),<init>,MethodDescriptor((): void),org.apache.batik.util.resources.Messages{ protected void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),class$,MethodDescriptor((java.lang.String): java.lang.Class),org.apache.batik.util.resources.Messages{ static java.lang.Class class$(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),formatMessage,MethodDescriptor((java.lang.String, java.lang.Object[]): java.lang.String),org.apache.batik.util.resources.Messages{ public static java.lang.String formatMessage(java.lang.String,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),getLocale,MethodDescriptor((): java.util.Locale),org.apache.batik.util.resources.Messages{ public static java.util.Locale getLocale() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/Messages),setLocale,MethodDescriptor((java.util.Locale): void),org.apache.batik.util.resources.Messages{ public static void setLocale(java.util.Locale) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceFormatException),<init>,MethodDescriptor((java.lang.String, java.lang.String, java.lang.String): void),org.apache.batik.util.resources.ResourceFormatException{ public void <init>(java.lang.String,java.lang.String,java.lang.String) }) => DPure
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceFormatException),getClassName,MethodDescriptor((): java.lang.String),org.apache.batik.util.resources.ResourceFormatException{ public java.lang.String getClassName() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceFormatException),getKey,MethodDescriptor((): java.lang.String),org.apache.batik.util.resources.ResourceFormatException{ public java.lang.String getKey() }) => SideEffectFree
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceFormatException),toString,MethodDescriptor((): java.lang.String),org.apache.batik.util.resources.ResourceFormatException{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),<init>,MethodDescriptor((java.util.ResourceBundle): void),org.apache.batik.util.resources.ResourceManager{ public void <init>(java.util.ResourceBundle) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getBoolean,MethodDescriptor((java.lang.String): boolean),org.apache.batik.util.resources.ResourceManager{ public boolean getBoolean(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getCharacter,MethodDescriptor((java.lang.String): int),org.apache.batik.util.resources.ResourceManager{ public int getCharacter(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getInteger,MethodDescriptor((java.lang.String): int),org.apache.batik.util.resources.ResourceManager{ public int getInteger(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getString,MethodDescriptor((java.lang.String): java.lang.String),org.apache.batik.util.resources.ResourceManager{ public java.lang.String getString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getStringList,MethodDescriptor((java.lang.String): java.util.List),org.apache.batik.util.resources.ResourceManager{ public java.util.List getStringList(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getStringList,MethodDescriptor((java.lang.String, java.lang.String): java.util.List),org.apache.batik.util.resources.ResourceManager{ public java.util.List getStringList(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(org/apache/batik/util/resources/ResourceManager),getStringList,MethodDescriptor((java.lang.String, java.lang.String, boolean): java.util.List),org.apache.batik.util.resources.ResourceManager{ public java.util.List getStringList(java.lang.String,java.lang.String,boolean) }) => ImpureByAnalysis

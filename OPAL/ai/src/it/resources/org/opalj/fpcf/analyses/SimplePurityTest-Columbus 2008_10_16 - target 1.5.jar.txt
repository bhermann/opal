DefinedMethod(ObjectType(de/tud/cs/st/Columbus$1),<init>,MethodDescriptor((): void),de.tud.cs.st.Columbus$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/Columbus$1),error,MethodDescriptor((org.xml.sax.SAXParseException): void),de.tud.cs.st.Columbus$1{ public void error(org.xml.sax.SAXParseException) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/Columbus$ColumbusDTDResolver),<init>,MethodDescriptor((): void),de.tud.cs.st.Columbus$ColumbusDTDResolver{ private void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/Columbus$ColumbusDTDResolver),<init>,MethodDescriptor((de.tud.cs.st.Columbus$ColumbusDTDResolver): void),de.tud.cs.st.Columbus$ColumbusDTDResolver{ void <init>(de.tud.cs.st.Columbus$ColumbusDTDResolver) }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/Columbus$ColumbusDTDResolver),resolveEntity,MethodDescriptor((java.lang.String, java.lang.String): org.xml.sax.InputSource),de.tud.cs.st.Columbus$ColumbusDTDResolver{ public org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/Columbus),<clinit>,MethodDescriptor((): void),de.tud.cs.st.Columbus{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/Columbus),<init>,MethodDescriptor((): void),de.tud.cs.st.Columbus{ public void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/Columbus),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.Columbus{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.AbstractBundleEntry{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.AbstractBundleEntry{ protected void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),<init>,MethodDescriptor((de.tud.cs.st.columbus.Bundle): void),de.tud.cs.st.columbus.AbstractBundleEntry{ protected void <init>(de.tud.cs.st.columbus.Bundle) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),createDesignator,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): java.lang.String),de.tud.cs.st.columbus.AbstractBundleEntry{ public static java.lang.String createDesignator(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),getBundle,MethodDescriptor((): de.tud.cs.st.columbus.Bundle),de.tud.cs.st.columbus.AbstractBundleEntry{ public de.tud.cs.st.columbus.Bundle getBundle() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),loadProperties,MethodDescriptor((org.apache.commons.vfs.FileObject, java.util.Properties): java.util.Properties),de.tud.cs.st.columbus.AbstractBundleEntry{ static java.util.Properties loadProperties(org.apache.commons.vfs.FileObject,java.util.Properties) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractBundleEntry),setBundle,MethodDescriptor((de.tud.cs.st.columbus.Bundle): void),de.tud.cs.st.columbus.AbstractBundleEntry{ protected void setBundle(de.tud.cs.st.columbus.Bundle) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),<init>,MethodDescriptor((de.tud.cs.st.columbus.Component): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void <init>(de.tud.cs.st.columbus.Component) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void <init>(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),getComponent,MethodDescriptor((): de.tud.cs.st.columbus.Component),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Component getComponent() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),getServiceDesignator,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceDesignator() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),getServiceUID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceUID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),getServiceVersion,MethodDescriptor((): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Version getServiceVersion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),setComponent,MethodDescriptor((de.tud.cs.st.columbus.Component): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setComponent(de.tud.cs.st.columbus.Component) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/AbstractComponentService),setServiceInformation,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setServiceInformation(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.Bundle{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),<init>,MethodDescriptor((de.tud.cs.st.columbus.Container, java.lang.String): void),de.tud.cs.st.columbus.Bundle{ protected void <init>(de.tud.cs.st.columbus.Container,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Container, java.util.Set, java.util.Set, java.util.List, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.Bundle{ public void <init>(java.lang.String,de.tud.cs.st.columbus.Container,java.util.Set,java.util.Set,java.util.List,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),addComponent,MethodDescriptor((java.util.Set, de.tud.cs.st.columbus.Component): void),de.tud.cs.st.columbus.Bundle{ private static void addComponent(java.util.Set,de.tud.cs.st.columbus.Component) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),addServiceSpecification,MethodDescriptor((java.util.Set, de.tud.cs.st.columbus.ServiceSpecification): void),de.tud.cs.st.columbus.Bundle{ private static void addServiceSpecification(java.util.Set,de.tud.cs.st.columbus.ServiceSpecification) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.Bundle{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getBundleClassPaths,MethodDescriptor((): java.util.List),de.tud.cs.st.columbus.Bundle{ public java.util.List getBundleClassPaths() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getBundlePath,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.Bundle{ public org.apache.commons.vfs.FileObject getBundlePath() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getComponents,MethodDescriptor((): java.util.Set),de.tud.cs.st.columbus.Bundle{ public java.util.Set getComponents() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getContainer,MethodDescriptor((): de.tud.cs.st.columbus.Container),de.tud.cs.st.columbus.Bundle{ public de.tud.cs.st.columbus.Container getContainer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getProvider,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Bundle{ public java.lang.String getProvider() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),getServiceSpecifications,MethodDescriptor((): java.util.Set),de.tud.cs.st.columbus.Bundle{ public java.util.Set getServiceSpecifications() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.Bundle{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),setBundle,MethodDescriptor((java.util.Set): void),de.tud.cs.st.columbus.Bundle{ private void setBundle(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Bundle),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Bundle{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.Component{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),<init>,MethodDescriptor((de.tud.cs.st.columbus.Bundle, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.Component{ protected void <init>(de.tud.cs.st.columbus.Bundle,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),<init>,MethodDescriptor((java.util.List, java.util.List, java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String, java.lang.String, java.lang.String): void),de.tud.cs.st.columbus.Component{ public void <init>(java.util.List,java.util.List,java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.Component{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getBundle,MethodDescriptor((): de.tud.cs.st.columbus.Bundle),de.tud.cs.st.columbus.AbstractBundleEntry{ public de.tud.cs.st.columbus.Bundle getBundle() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getDefaultMetaDataProperties,MethodDescriptor((): java.util.Properties),de.tud.cs.st.columbus.Component{ private static java.util.Properties getDefaultMetaDataProperties() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getDesignator,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String getDesignator() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getMainClass,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String getMainClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getMainMethod,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String getMainMethod() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getPropertiesFile,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.Component{ public org.apache.commons.vfs.FileObject getPropertiesFile() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getProvidedServices,MethodDescriptor((): java.util.List),de.tud.cs.st.columbus.Component{ public java.util.List getProvidedServices() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getProvider,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String getProvider() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getRequiredServices,MethodDescriptor((): java.util.List),de.tud.cs.st.columbus.Component{ public java.util.List getRequiredServices() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getUID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String getUID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),getVersion,MethodDescriptor((): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.Component{ public de.tud.cs.st.columbus.Version getVersion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.Component{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),setBundle,MethodDescriptor((de.tud.cs.st.columbus.Bundle): void),de.tud.cs.st.columbus.AbstractBundleEntry{ protected void setBundle(de.tud.cs.st.columbus.Bundle) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),setComponent,MethodDescriptor((java.util.Collection): void),de.tud.cs.st.columbus.Component{ private void setComponent(java.util.Collection) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Component),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Component{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>(java.lang.String) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((java.lang.String, java.lang.String): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((java.lang.String, java.lang.String, java.lang.Throwable): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>(java.lang.String,java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((java.lang.String, java.lang.Throwable): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>(java.lang.String,java.lang.Throwable) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ConfigurationException),<init>,MethodDescriptor((java.lang.Throwable): void),de.tud.cs.st.columbus.ConfigurationException{ public void <init>(java.lang.Throwable) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container$1),<init>,MethodDescriptor((de.tud.cs.st.columbus.Container): void),de.tud.cs.st.columbus.Container$1{ void <init>(de.tud.cs.st.columbus.Container) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container$1),getNextElement,MethodDescriptor((): de.tud.cs.st.columbus.ServiceSpecification),de.tud.cs.st.columbus.Container$1{ private de.tud.cs.st.columbus.ServiceSpecification getNextElement() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container$1),hasMoreElements,MethodDescriptor((): boolean),de.tud.cs.st.columbus.Container$1{ public boolean hasMoreElements() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container$1),nextElement,MethodDescriptor((): de.tud.cs.st.columbus.ServiceSpecification),de.tud.cs.st.columbus.Container$1{ public de.tud.cs.st.columbus.ServiceSpecification nextElement() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container$1),nextElement,MethodDescriptor((): java.lang.Object),de.tud.cs.st.columbus.Container$1{ public java.lang.Object nextElement() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.Container{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.Container{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),<init>,MethodDescriptor((org.apache.commons.vfs.FileSystemManager): void),de.tud.cs.st.columbus.Container{ public void <init>(org.apache.commons.vfs.FileSystemManager) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),access$0,MethodDescriptor((de.tud.cs.st.columbus.Container): java.util.Set),de.tud.cs.st.columbus.Container{ static java.util.Set access$0(de.tud.cs.st.columbus.Container) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),consultFMIs,MethodDescriptor((alice.tuprolog.Prolog, java.util.Set): void),de.tud.cs.st.columbus.Container{ private void consultFMIs(alice.tuprolog.Prolog,java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),consultFMs,MethodDescriptor((alice.tuprolog.Prolog, java.util.Set): void),de.tud.cs.st.columbus.Container{ private void consultFMs(alice.tuprolog.Prolog,java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),enumerateServiceSpecifications,MethodDescriptor((): java.util.Enumeration),de.tud.cs.st.columbus.Container{ public java.util.Enumeration enumerateServiceSpecifications() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),filterComponentsWithIncorrectFMRsAndFMISpecifications,MethodDescriptor((alice.tuprolog.Prolog, java.util.Set): void),de.tud.cs.st.columbus.Container{ private void filterComponentsWithIncorrectFMRsAndFMISpecifications(alice.tuprolog.Prolog,java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),filterComponentsWithUnresolvableRequiredServices,MethodDescriptor((java.util.Set): void),de.tud.cs.st.columbus.Container{ private void filterComponentsWithUnresolvableRequiredServices(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),filterComponentsWithUnresolvableServiceUIDs,MethodDescriptor((java.util.Set, java.util.Set): void),de.tud.cs.st.columbus.Container{ private void filterComponentsWithUnresolvableServiceUIDs(java.util.Set,java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),filterServiceSpecificationsWithIncorrectFeatureModels,MethodDescriptor((alice.tuprolog.Prolog, java.util.Set): void),de.tud.cs.st.columbus.Container{ private void filterServiceSpecificationsWithIncorrectFeatureModels(alice.tuprolog.Prolog,java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getBindingCalculator,MethodDescriptor((): de.tud.cs.st.columbus.IBindingCalculator),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.IBindingCalculator getBindingCalculator() }) => ExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getBundles,MethodDescriptor((java.util.Collection): java.util.Set),de.tud.cs.st.columbus.Container{ public static java.util.Set getBundles(java.util.Collection) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getClassLoaderConfigurator,MethodDescriptor((): de.tud.cs.st.columbus.IClassLoaderConfigurator),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.IClassLoaderConfigurator getClassLoaderConfigurator() }) => ExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getComponents,MethodDescriptor((): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set getComponents() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getFileSystemManager,MethodDescriptor((): org.apache.commons.vfs.FileSystemManager),de.tud.cs.st.columbus.Container{ public org.apache.commons.vfs.FileSystemManager getFileSystemManager() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getReferencedServiceSpecifications,MethodDescriptor((java.util.Set): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set getReferencedServiceSpecifications(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),getServiceSpecifications,MethodDescriptor((): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set getServiceSpecifications() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupComponent,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): de.tud.cs.st.columbus.Component),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.Component lookupComponent(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupComponentByDesignator,MethodDescriptor((java.lang.String): de.tud.cs.st.columbus.Component),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.Component lookupComponentByDesignator(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupComponentsByDesignator,MethodDescriptor((java.util.Set): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set lookupComponentsByDesignator(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupComponentsByUID,MethodDescriptor((java.lang.String): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set lookupComponentsByUID(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupComponentsByUID,MethodDescriptor((java.util.Set): java.util.Set),de.tud.cs.st.columbus.Container{ public java.util.Set lookupComponentsByUID(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupServiceSpecification,MethodDescriptor((java.lang.String): de.tud.cs.st.columbus.ServiceSpecification),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.ServiceSpecification lookupServiceSpecification(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),lookupServiceSpecification,MethodDescriptor((java.util.Set, java.lang.String): de.tud.cs.st.columbus.ServiceSpecification),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.ServiceSpecification lookupServiceSpecification(java.util.Set,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),registerBundle,MethodDescriptor((de.tud.cs.st.columbus.Bundle): void),de.tud.cs.st.columbus.Container{ public void registerBundle(de.tud.cs.st.columbus.Bundle) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),registerBundle,MethodDescriptor((java.lang.String): de.tud.cs.st.columbus.Bundle),de.tud.cs.st.columbus.Container{ public de.tud.cs.st.columbus.Bundle registerBundle(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),resolve,MethodDescriptor((de.tud.cs.st.columbus.Component[]): java.util.Map),de.tud.cs.st.columbus.Container{ public java.util.Map resolve(de.tud.cs.st.columbus.Component[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),resolve,MethodDescriptor((java.util.Set): java.util.Map),de.tud.cs.st.columbus.Container{ public java.util.Map resolve(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),setBindingCalculator,MethodDescriptor((de.tud.cs.st.columbus.IBindingCalculator): void),de.tud.cs.st.columbus.Container{ public void setBindingCalculator(de.tud.cs.st.columbus.IBindingCalculator) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Container),setClassLoaderConfigurator,MethodDescriptor((de.tud.cs.st.columbus.IClassLoaderConfigurator): void),de.tud.cs.st.columbus.Container{ public void setClassLoaderConfigurator(de.tud.cs.st.columbus.IClassLoaderConfigurator) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultBindingCalculator),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.DefaultBindingCalculator{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultBindingCalculator),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.DefaultBindingCalculator{ public void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultBindingCalculator),calculateBinding,MethodDescriptor((java.util.Set, java.util.Map): java.util.Set),de.tud.cs.st.columbus.DefaultBindingCalculator{ public java.util.Set calculateBinding(java.util.Set,java.util.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),<init>,MethodDescriptor((org.apache.commons.vfs.FileObject, org.apache.commons.vfs.FileSystemManager): void),de.tud.cs.st.columbus.DefaultClassLoader{ public void <init>(org.apache.commons.vfs.FileObject,org.apache.commons.vfs.FileSystemManager) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),<init>,MethodDescriptor((org.apache.commons.vfs.FileObject, org.apache.commons.vfs.FileSystemManager, java.lang.ClassLoader): void),de.tud.cs.st.columbus.DefaultClassLoader{ public void <init>(org.apache.commons.vfs.FileObject,org.apache.commons.vfs.FileSystemManager,java.lang.ClassLoader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),<init>,MethodDescriptor((org.apache.commons.vfs.FileObject[], org.apache.commons.vfs.FileSystemManager): void),de.tud.cs.st.columbus.DefaultClassLoader{ public void <init>(org.apache.commons.vfs.FileObject[],org.apache.commons.vfs.FileSystemManager) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),<init>,MethodDescriptor((org.apache.commons.vfs.FileObject[], org.apache.commons.vfs.FileSystemManager, java.lang.ClassLoader): void),de.tud.cs.st.columbus.DefaultClassLoader{ public void <init>(org.apache.commons.vfs.FileObject[],org.apache.commons.vfs.FileSystemManager,java.lang.ClassLoader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),addClassLoaderCompounds,MethodDescriptor((java.util.Set): void),de.tud.cs.st.columbus.DefaultClassLoader{ public void addClassLoaderCompounds(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoader),loadClass,MethodDescriptor((java.lang.String, boolean): java.lang.Class),de.tud.cs.st.columbus.DefaultClassLoader{ protected java.lang.Class loadClass(java.lang.String,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoaderConfigurator),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.DefaultClassLoaderConfigurator{ public void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/DefaultClassLoaderConfigurator),determineClassLoaders,MethodDescriptor((java.util.Set): java.util.Map),de.tud.cs.st.columbus.DefaultClassLoaderConfigurator{ public java.util.Map determineClassLoaders(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/PrologWarningListener),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.PrologWarningListener{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/PrologWarningListener),getWarnings,MethodDescriptor((): java.util.List),de.tud.cs.st.columbus.PrologWarningListener{ public java.util.List getWarnings() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/PrologWarningListener),hasWarnings,MethodDescriptor((): boolean),de.tud.cs.st.columbus.PrologWarningListener{ public boolean hasWarnings() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/PrologWarningListener),onWarning,MethodDescriptor((alice.tuprolog.event.WarningEvent): void),de.tud.cs.st.columbus.PrologWarningListener{ public void onWarning(alice.tuprolog.event.WarningEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService$1),<init>,MethodDescriptor((de.tud.cs.st.columbus.ProvidedService, java.lang.StringBuilder): void),de.tud.cs.st.columbus.ProvidedService$1{ void <init>(de.tud.cs.st.columbus.ProvidedService,java.lang.StringBuilder) }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService$1),onOutput,MethodDescriptor((alice.tuprolog.event.OutputEvent): void),de.tud.cs.st.columbus.ProvidedService$1{ public void onOutput(alice.tuprolog.event.OutputEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.ProvidedService{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),<init>,MethodDescriptor((de.tud.cs.st.columbus.Component, java.util.Properties, int): void),de.tud.cs.st.columbus.ProvidedService{ protected void <init>(de.tud.cs.st.columbus.Component,java.util.Properties,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String): void),de.tud.cs.st.columbus.ProvidedService{ public void <init>(java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version, org.apache.commons.vfs.FileObject, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.ProvidedService{ public void <init>(java.lang.String,de.tud.cs.st.columbus.Version,org.apache.commons.vfs.FileObject,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),convertFMItoDot,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ProvidedService{ public java.lang.String convertFMItoDot() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.ProvidedService{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getComponent,MethodDescriptor((): de.tud.cs.st.columbus.Component),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Component getComponent() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getFMI,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ProvidedService{ public java.lang.String getFMI() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getFMI_DocuFile,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.ProvidedService{ public org.apache.commons.vfs.FileObject getFMI_DocuFile() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getFMI_File,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.ProvidedService{ public org.apache.commons.vfs.FileObject getFMI_File() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getServiceDesignator,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceDesignator() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getServiceUID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceUID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),getServiceVersion,MethodDescriptor((): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Version getServiceVersion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.ProvidedService{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),setComponent,MethodDescriptor((de.tud.cs.st.columbus.Component): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setComponent(de.tud.cs.st.columbus.Component) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ProvidedService),setServiceInformation,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setServiceInformation(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.RequiredService{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),<init>,MethodDescriptor((de.tud.cs.st.columbus.Component, java.util.Properties, int): void),de.tud.cs.st.columbus.RequiredService{ protected void <init>(de.tud.cs.st.columbus.Component,java.util.Properties,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String, java.lang.String, java.lang.String): void),de.tud.cs.st.columbus.RequiredService{ public void <init>(java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String, org.apache.commons.vfs.FileObject, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.RequiredService{ public void <init>(java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String,org.apache.commons.vfs.FileObject,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.RequiredService{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getComponent,MethodDescriptor((): de.tud.cs.st.columbus.Component),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Component getComponent() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getDefaultFMRProperties,MethodDescriptor((): java.util.Properties),de.tud.cs.st.columbus.RequiredService{ private static java.util.Properties getDefaultFMRProperties() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getFMR_DocuFile,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.RequiredService{ public org.apache.commons.vfs.FileObject getFMR_DocuFile() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getFMR_Excluded,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.RequiredService{ public java.lang.String getFMR_Excluded() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getFMR_File,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.RequiredService{ public org.apache.commons.vfs.FileObject getFMR_File() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getFMR_Required,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.RequiredService{ public java.lang.String getFMR_Required() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getInjectionMethod,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.RequiredService{ public java.lang.String getInjectionMethod() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getProvidingComponents,MethodDescriptor((alice.tuprolog.Prolog): java.util.Set),de.tud.cs.st.columbus.RequiredService{ java.util.Set getProvidingComponents(alice.tuprolog.Prolog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getServiceDesignator,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceDesignator() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getServiceUID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.AbstractComponentService{ public java.lang.String getServiceUID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),getServiceVersion,MethodDescriptor((): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.AbstractComponentService{ public de.tud.cs.st.columbus.Version getServiceVersion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.RequiredService{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),setComponent,MethodDescriptor((de.tud.cs.st.columbus.Component): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setComponent(de.tud.cs.st.columbus.Component) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/RequiredService),setServiceInformation,MethodDescriptor((java.lang.String, de.tud.cs.st.columbus.Version): void),de.tud.cs.st.columbus.AbstractComponentService{ protected void setServiceInformation(java.lang.String,de.tud.cs.st.columbus.Version) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification$1),<init>,MethodDescriptor((de.tud.cs.st.columbus.ServiceSpecification, java.lang.StringBuilder): void),de.tud.cs.st.columbus.ServiceSpecification$1{ void <init>(de.tud.cs.st.columbus.ServiceSpecification,java.lang.StringBuilder) }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification$1),onOutput,MethodDescriptor((alice.tuprolog.event.OutputEvent): void),de.tud.cs.st.columbus.ServiceSpecification$1{ public void onOutput(alice.tuprolog.event.OutputEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),<clinit>,MethodDescriptor((): void),de.tud.cs.st.columbus.ServiceSpecification{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),<init>,MethodDescriptor((de.tud.cs.st.columbus.Bundle, java.lang.String, java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String, org.apache.commons.vfs.FileObject, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.ServiceSpecification{ public void <init>(de.tud.cs.st.columbus.Bundle,java.lang.String,java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String,org.apache.commons.vfs.FileObject,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),<init>,MethodDescriptor((de.tud.cs.st.columbus.Bundle, org.apache.commons.vfs.FileObject): void),de.tud.cs.st.columbus.ServiceSpecification{ void <init>(de.tud.cs.st.columbus.Bundle,org.apache.commons.vfs.FileObject) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),<init>,MethodDescriptor((java.lang.String, java.lang.String, de.tud.cs.st.columbus.Version, java.lang.String, java.lang.String): void),de.tud.cs.st.columbus.ServiceSpecification{ public void <init>(java.lang.String,java.lang.String,de.tud.cs.st.columbus.Version,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),convertFMtoDot,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String convertFMtoDot() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.ServiceSpecification{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getBundle,MethodDescriptor((): de.tud.cs.st.columbus.Bundle),de.tud.cs.st.columbus.AbstractBundleEntry{ public de.tud.cs.st.columbus.Bundle getBundle() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getFM,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String getFM() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getFM_DocuFile,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.ServiceSpecification{ public org.apache.commons.vfs.FileObject getFM_DocuFile() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getFM_File,MethodDescriptor((): org.apache.commons.vfs.FileObject),de.tud.cs.st.columbus.ServiceSpecification{ org.apache.commons.vfs.FileObject getFM_File() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getMainType,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String getMainType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getProvider,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String getProvider() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getServiceDesignator,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String getServiceDesignator() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getServiceUID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String getServiceUID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),getServiceVersion,MethodDescriptor((): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.ServiceSpecification{ public de.tud.cs.st.columbus.Version getServiceVersion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.ServiceSpecification{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),setBundle,MethodDescriptor((de.tud.cs.st.columbus.Bundle): void),de.tud.cs.st.columbus.AbstractBundleEntry{ protected void setBundle(de.tud.cs.st.columbus.Bundle) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/ServiceSpecification),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.ServiceSpecification{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/SimpleClassLoaderConfigurator),<init>,MethodDescriptor((): void),de.tud.cs.st.columbus.SimpleClassLoaderConfigurator{ public void <init>() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/SimpleClassLoaderConfigurator),determineClassLoaders,MethodDescriptor((java.util.Set): java.util.Map),de.tud.cs.st.columbus.SimpleClassLoaderConfigurator{ public java.util.Map determineClassLoaders(java.util.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.columbus.Version{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.columbus.Version{ public boolean equals(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),getMajorVersion,MethodDescriptor((): int),de.tud.cs.st.columbus.Version{ public int getMajorVersion() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),getMinorVersion,MethodDescriptor((): int),de.tud.cs.st.columbus.Version{ public int getMinorVersion() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),getVersionID,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Version{ public java.lang.String getVersionID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),hashCode,MethodDescriptor((): int),de.tud.cs.st.columbus.Version{ public int hashCode() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),parse,MethodDescriptor((java.lang.String): de.tud.cs.st.columbus.Version),de.tud.cs.st.columbus.Version{ public static de.tud.cs.st.columbus.Version parse(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/columbus/Version),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.columbus.Version{ public java.lang.String toString() }) => ImpureByAnalysis

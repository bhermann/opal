DefinedMethod(ObjectType(ai/AbstractBase),<init>,MethodDescriptor((): void),ai.AbstractBase{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/AbstractBase),<init>,MethodDescriptor((java.lang.String): void),ai.AbstractBase{ public void <init>(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/AbstractBase),abstractImplementedMethod,MethodDescriptor((): void),ai.AbstractBase{ public void abstractImplementedMethod() }) => Pure
DefinedMethod(ObjectType(ai/AbstractBase),implementedMethod,MethodDescriptor((): void),ai.AbstractBase{ public void implementedMethod() }) => Pure
DefinedMethod(ObjectType(ai/AbstractBase),interfaceMethod,MethodDescriptor((): void),ai.AbstractBase{ public void interfaceMethod() }) => Pure
DefinedMethod(ObjectType(ai/AbstractBase),staticMethod,MethodDescriptor((): void),ai.AbstractBase{ public static void staticMethod() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),<clinit>,MethodDescriptor((): void),ai.ConcreteBase{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/ConcreteBase),<init>,MethodDescriptor((): void),ai.ConcreteBase{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),<init>,MethodDescriptor((java.lang.String): void),ai.ConcreteBase{ public void <init>(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),<init>,MethodDescriptor((java.lang.String, int): void),ai.ConcreteBase{ public void <init>(java.lang.String,int) }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),abstractImplementedMethod,MethodDescriptor((): void),ai.AbstractBase{ public void abstractImplementedMethod() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),abstractMethod,MethodDescriptor((): void),ai.ConcreteBase{ public void abstractMethod() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),implementedMethod,MethodDescriptor((): void),ai.ConcreteBase{ public void implementedMethod() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),interfaceMethod,MethodDescriptor((): void),ai.AbstractBase{ public void interfaceMethod() }) => Pure
DefinedMethod(ObjectType(ai/ConcreteBase),staticMethod,MethodDescriptor((): void),ai.ConcreteBase{ public static void staticMethod() }) => Pure
DefinedMethod(ObjectType(ai/FieldInitialization),<clinit>,MethodDescriptor((): void),ai.FieldInitialization{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/FieldInitialization),<init>,MethodDescriptor((): void),ai.FieldInitialization{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),<init>,MethodDescriptor((): void),ai.MethodsPlain{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),arrayLength,MethodDescriptor((java.lang.reflect.Array[]): int),ai.MethodsPlain{ public static int arrayLength(java.lang.reflect.Array[]) }) => DPure
DefinedMethod(ObjectType(ai/MethodsPlain),asIs,MethodDescriptor((java.lang.Object): java.lang.Object),ai.MethodsPlain{ public static java.lang.Object asIs(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),asSimpleMethods,MethodDescriptor((java.lang.Object): ai.MethodsPlain),ai.MethodsPlain{ public static ai.MethodsPlain asSimpleMethods(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),asSimpleMethodsInstance,MethodDescriptor((java.lang.Object): boolean),ai.MethodsPlain{ public static boolean asSimpleMethodsInstance(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),byteArray,MethodDescriptor((byte[]): byte),ai.MethodsPlain{ public static byte byteArray(byte[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),cLDC,MethodDescriptor((): java.lang.Class),ai.MethodsPlain{ public static java.lang.Class cLDC() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),charArray,MethodDescriptor((char[]): char),ai.MethodsPlain{ public static char charArray(char[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),create,MethodDescriptor((java.lang.Class): java.lang.Object),ai.MethodsPlain{ public static java.lang.Object create(java.lang.Class) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsPlain),createNewBooleanArray,MethodDescriptor((): boolean[]),ai.MethodsPlain{ public boolean[] createNewBooleanArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewByteArray,MethodDescriptor((): byte[]),ai.MethodsPlain{ public byte[] createNewByteArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewCharArray,MethodDescriptor((): char[]),ai.MethodsPlain{ public char[] createNewCharArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewDoubleArray,MethodDescriptor((): double[]),ai.MethodsPlain{ public double[] createNewDoubleArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewFloatArray,MethodDescriptor((): float[]),ai.MethodsPlain{ public float[] createNewFloatArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewIntArray,MethodDescriptor((): int[]),ai.MethodsPlain{ public int[] createNewIntArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewLongArray,MethodDescriptor((): long[]),ai.MethodsPlain{ public long[] createNewLongArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewMultiSimpleMethodsArray,MethodDescriptor((): ai.MethodsPlain[][]),ai.MethodsPlain{ public ai.MethodsPlain[][] createNewMultiSimpleMethodsArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewShortArray,MethodDescriptor((): short[]),ai.MethodsPlain{ public short[] createNewShortArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),createNewSimpleMethodsArray,MethodDescriptor((): ai.MethodsPlain[]),ai.MethodsPlain{ public ai.MethodsPlain[] createNewSimpleMethodsArray() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dAdd,MethodDescriptor((double, double): double),ai.MethodsPlain{ public static double dAdd(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dDiv,MethodDescriptor((double, double): double),ai.MethodsPlain{ public static double dDiv(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dMul,MethodDescriptor((double, double): double),ai.MethodsPlain{ public static double dMul(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dNeg,MethodDescriptor((double): double),ai.MethodsPlain{ public static double dNeg(double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dOne,MethodDescriptor((): double),ai.MethodsPlain{ public static double dOne() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dRem,MethodDescriptor((double, double): double),ai.MethodsPlain{ public static double dRem(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dSub,MethodDescriptor((double, double): double),ai.MethodsPlain{ public static double dSub(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dToFloat,MethodDescriptor((double): float),ai.MethodsPlain{ public static float dToFloat(double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dToInt,MethodDescriptor((double): int),ai.MethodsPlain{ public static int dToInt(double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),dToLong,MethodDescriptor((double): long),ai.MethodsPlain{ public static long dToLong(double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),doubleArray,MethodDescriptor((double[]): double),ai.MethodsPlain{ public static double doubleArray(double[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),fAdd,MethodDescriptor((float, float): float),ai.MethodsPlain{ public static float fAdd(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fDiv,MethodDescriptor((float, float): float),ai.MethodsPlain{ public static float fDiv(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fMul,MethodDescriptor((float, float): float),ai.MethodsPlain{ public static float fMul(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fNeg,MethodDescriptor((float): float),ai.MethodsPlain{ public static float fNeg(float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fOne,MethodDescriptor((): float),ai.MethodsPlain{ public static float fOne() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fRem,MethodDescriptor((float, float): float),ai.MethodsPlain{ public static float fRem(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fSub,MethodDescriptor((float, float): float),ai.MethodsPlain{ public static float fSub(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fToDouble,MethodDescriptor((float): double),ai.MethodsPlain{ public static double fToDouble(float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fToInt,MethodDescriptor((float): int),ai.MethodsPlain{ public static int fToInt(float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),fToLong,MethodDescriptor((float): long),ai.MethodsPlain{ public static long fToLong(float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),floatArray,MethodDescriptor((float[]): float),ai.MethodsPlain{ public static float floatArray(float[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),getSValue,MethodDescriptor((): float),ai.MethodsPlain{ public float getSValue() }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),getValue,MethodDescriptor((): float),ai.MethodsPlain{ public float getValue() }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),iAdd,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iAdd(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iAnd,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iAnd(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iDiv,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iDiv(int,int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsPlain),iMul,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iMul(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iNeg,MethodDescriptor((int): int),ai.MethodsPlain{ public static int iNeg(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iOne,MethodDescriptor((): int),ai.MethodsPlain{ public static int iOne() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iOr,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iOr(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iRem,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iRem(int,int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsPlain),iShl,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iShl(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iShr,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iShr(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iSub,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iSub(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToByte,MethodDescriptor((int): byte),ai.MethodsPlain{ public static byte iToByte(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToChar,MethodDescriptor((int): char),ai.MethodsPlain{ public static char iToChar(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToDouble,MethodDescriptor((int): double),ai.MethodsPlain{ public static double iToDouble(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToFloat,MethodDescriptor((int): float),ai.MethodsPlain{ public static float iToFloat(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToLong,MethodDescriptor((int): long),ai.MethodsPlain{ public static long iToLong(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iToShort,MethodDescriptor((int): short),ai.MethodsPlain{ public static short iToShort(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),iXor,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iXor(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),identity,MethodDescriptor((int): int),ai.MethodsPlain{ public static int identity(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),intArray,MethodDescriptor((int[]): int),ai.MethodsPlain{ public static int intArray(int[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),iushr,MethodDescriptor((int, int): int),ai.MethodsPlain{ public static int iushr(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lAdd,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lAdd(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lAnd,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lAnd(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lDiv,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lDiv(long,long) }) => DPure
DefinedMethod(ObjectType(ai/MethodsPlain),lMul,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lMul(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lNeg,MethodDescriptor((long): long),ai.MethodsPlain{ public static long lNeg(long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lOne,MethodDescriptor((): long),ai.MethodsPlain{ public static long lOne() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lOr,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lOr(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lRem,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lRem(long,long) }) => DPure
DefinedMethod(ObjectType(ai/MethodsPlain),lShl,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lShl(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lShr,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lShr(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lSub,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lSub(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lToDouble,MethodDescriptor((long): double),ai.MethodsPlain{ public static double lToDouble(long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lToFloat,MethodDescriptor((long): float),ai.MethodsPlain{ public static float lToFloat(long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lToInt,MethodDescriptor((long): int),ai.MethodsPlain{ public static int lToInt(long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),lXor,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lXor(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localDoubleEven,MethodDescriptor((): double),ai.MethodsPlain{ public double localDoubleEven() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localDoubleOdd,MethodDescriptor((): double),ai.MethodsPlain{ public double localDoubleOdd() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localFloat,MethodDescriptor((): float),ai.MethodsPlain{ public float localFloat() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localInt,MethodDescriptor((): int),ai.MethodsPlain{ public int localInt() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localLongEven,MethodDescriptor((): long),ai.MethodsPlain{ public long localLongEven() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localLongOdd,MethodDescriptor((): long),ai.MethodsPlain{ public long localLongOdd() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),localSimpleMethod,MethodDescriptor((): ai.MethodsPlain),ai.MethodsPlain{ public ai.MethodsPlain localSimpleMethod() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),longArray,MethodDescriptor((long[]): long),ai.MethodsPlain{ public static long longArray(long[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),lushr,MethodDescriptor((long, long): long),ai.MethodsPlain{ public static long lushr(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),multipleCalls,MethodDescriptor((): void),ai.MethodsPlain{ public static void multipleCalls() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsPlain),nop,MethodDescriptor((): void),ai.MethodsPlain{ public static void nop() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),objectArray,MethodDescriptor((ai.MethodsPlain[]): ai.MethodsPlain),ai.MethodsPlain{ public static ai.MethodsPlain objectArray(ai.MethodsPlain[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),pushBipush,MethodDescriptor((): byte),ai.MethodsPlain{ public static byte pushBipush() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushDoubleConst0,MethodDescriptor((): double),ai.MethodsPlain{ public static double pushDoubleConst0() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushDoubleConst1,MethodDescriptor((): double),ai.MethodsPlain{ public static double pushDoubleConst1() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushFloatConst0,MethodDescriptor((): float),ai.MethodsPlain{ public static float pushFloatConst0() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushFloatConst1,MethodDescriptor((): float),ai.MethodsPlain{ public static float pushFloatConst1() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushFloatConst2,MethodDescriptor((): float),ai.MethodsPlain{ public static float pushFloatConst2() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst0,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst0() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst1,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst1() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst2,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst2() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst3,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst3() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst4,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConst5,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConst5() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushIntConstn1,MethodDescriptor((): int),ai.MethodsPlain{ public static int pushIntConstn1() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushLongConst0,MethodDescriptor((): long),ai.MethodsPlain{ public static long pushLongConst0() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushLongConst1,MethodDescriptor((): long),ai.MethodsPlain{ public static long pushLongConst1() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushNull,MethodDescriptor((): java.lang.Object),ai.MethodsPlain{ public static java.lang.Object pushNull() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),pushSipush,MethodDescriptor((): short),ai.MethodsPlain{ public static short pushSipush() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),sLDC,MethodDescriptor((): java.lang.String),ai.MethodsPlain{ public static java.lang.String sLDC() }) => Pure
DefinedMethod(ObjectType(ai/MethodsPlain),sOne,MethodDescriptor((java.lang.String): java.lang.String),ai.MethodsPlain{ public static java.lang.String sOne(java.lang.String) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),setSValue,MethodDescriptor((float): void),ai.MethodsPlain{ public void setSValue(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsPlain),setValue,MethodDescriptor((float): void),ai.MethodsPlain{ public void setValue(float) }) => ExternallyPure
DefinedMethod(ObjectType(ai/MethodsPlain),shortArray,MethodDescriptor((short[]): short),ai.MethodsPlain{ public static short shortArray(short[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsPlain),twice,MethodDescriptor((double): double),ai.MethodsPlain{ public static double twice(double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),<init>,MethodDescriptor((): void),ai.MethodsWithArithmetic{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),divIt,MethodDescriptor((int): int),ai.MethodsWithArithmetic{ public static int divIt(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),divItSafe,MethodDescriptor((int): int),ai.MethodsWithArithmetic{ public static int divItSafe(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),fak,MethodDescriptor((): int),ai.MethodsWithArithmetic{ public static int fak() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),returnShortValue,MethodDescriptor((short): short),ai.MethodsWithArithmetic{ public static short returnShortValue(short) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArithmetic),simpleMathUsingShortValues,MethodDescriptor((short): short),ai.MethodsWithArithmetic{ public static short simpleMathUsingShortValues(short) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays$1),<init>,MethodDescriptor((): void),ai.MethodsWithArrays$1{ void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),<init>,MethodDescriptor((): void),ai.MethodsWithArrays{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),a2DimensionalArray,MethodDescriptor((boolean): void),ai.MethodsWithArrays{ public static void a2DimensionalArray(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),a3DimensionalArray,MethodDescriptor((boolean): void),ai.MethodsWithArrays{ public static void a3DimensionalArray(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),a3DimensionalArrayWithPotentialExceptions,MethodDescriptor((boolean, int): void),ai.MethodsWithArrays{ public static void a3DimensionalArrayWithPotentialExceptions(boolean,int) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),a4DimensionalArray,MethodDescriptor((boolean): void),ai.MethodsWithArrays{ public static void a4DimensionalArray(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),arrayIndexOutOfBounds,MethodDescriptor((int): int[]),ai.MethodsWithArrays{ public static int[] arrayIndexOutOfBounds(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),arrayIndexOutOfBoundsInLoop,MethodDescriptor((): int[]),ai.MethodsWithArrays{ public static int[] arrayIndexOutOfBoundsInLoop() }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),arrayStoreException,MethodDescriptor((boolean): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] arrayStoreException(boolean) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),booleanArrays,MethodDescriptor((boolean[]): boolean),ai.MethodsWithArrays{ public static boolean booleanArrays(boolean[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),branchInits,MethodDescriptor((boolean): ai.AbstractBase[]),ai.MethodsWithArrays{ public static ai.AbstractBase[] branchInits(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),branchInitsWithSwitch,MethodDescriptor((char): ai.AbstractBase[]),ai.MethodsWithArrays{ public static ai.AbstractBase[] branchInitsWithSwitch(char) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),byteArrays,MethodDescriptor((byte[]): byte),ai.MethodsWithArrays{ public static byte byteArrays(byte[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),covariantArrays,MethodDescriptor((boolean): java.lang.Object),ai.MethodsWithArrays{ public static java.lang.Object covariantArrays(boolean) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),differentTypesInOneArrayInitialization,MethodDescriptor((): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] differentTypesInOneArrayInitialization() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithArrays),instanceofAndArrays,MethodDescriptor((java.io.Serializable): boolean),ai.MethodsWithArrays{ public static boolean instanceofAndArrays(java.io.Serializable) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),integerArraysFrenzy,MethodDescriptor((int, java.lang.Object): java.lang.Object),ai.MethodsWithArrays{ public static java.lang.Object integerArraysFrenzy(int,java.lang.Object) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),joinOf2DimensionalArrays,MethodDescriptor((boolean): void),ai.MethodsWithArrays{ public static void joinOf2DimensionalArrays(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),main,MethodDescriptor((java.lang.String[]): void),ai.MethodsWithArrays{ public static void main(java.lang.String[]) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),oneElement,MethodDescriptor((): int[]),ai.MethodsWithArrays{ public static int[] oneElement() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),pathsConverge,MethodDescriptor((java.lang.Object[]): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] pathsConverge(java.lang.Object[]) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithArrays),processIt,MethodDescriptor((java.lang.Object): void),ai.MethodsWithArrays{ private static void processIt(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),referenceToMultipleArrays,MethodDescriptor((boolean): java.lang.Object),ai.MethodsWithArrays{ public static java.lang.Object referenceToMultipleArrays(boolean) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),selectiveInitialization,MethodDescriptor((int): int[]),ai.MethodsWithArrays{ public static int[] selectiveInitialization(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithArrays),setArrayNull,MethodDescriptor((java.lang.Object[]): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] setArrayNull(java.lang.Object[]) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),setValInBranch,MethodDescriptor((boolean): int[]),ai.MethodsWithArrays{ public static int[] setValInBranch(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),setValInForAndBranch,MethodDescriptor((boolean): int[]),ai.MethodsWithArrays{ public static int[] setValInForAndBranch(boolean) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleBooleanArrayInitializationWithLength4,MethodDescriptor((): boolean[]),ai.MethodsWithArrays{ public static boolean[] simpleBooleanArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleByteArrayInitializationWithLength4,MethodDescriptor((): byte[]),ai.MethodsWithArrays{ public static byte[] simpleByteArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleCharArrayInitializationWithLength4,MethodDescriptor((): char[]),ai.MethodsWithArrays{ public static char[] simpleCharArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleDoubleArrayInitializationWithLength4,MethodDescriptor((): double[]),ai.MethodsWithArrays{ public static double[] simpleDoubleArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleFloatArrayInitializationWithLength4,MethodDescriptor((): float[]),ai.MethodsWithArrays{ public static float[] simpleFloatArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleIntArrayInitializationWithLength4,MethodDescriptor((): int[]),ai.MethodsWithArrays{ public static int[] simpleIntArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleLongArrayInitializationWithLength4,MethodDescriptor((): long[]),ai.MethodsWithArrays{ public static long[] simpleLongArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleObjectArrayInitializationWithLength4,MethodDescriptor((): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] simpleObjectArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleSelectiveInitialization,MethodDescriptor((int): int[]),ai.MethodsWithArrays{ public static int[] simpleSelectiveInitialization(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleShortArrayInitializationWithLength4,MethodDescriptor((): short[]),ai.MethodsWithArrays{ public static short[] simpleShortArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),simpleStringArrayInitializationWithLength4,MethodDescriptor((): java.lang.String[]),ai.MethodsWithArrays{ public static java.lang.String[] simpleStringArrayInitializationWithLength4() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),threeElements,MethodDescriptor((): int[]),ai.MethodsWithArrays{ public static int[] threeElements() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),wrap,MethodDescriptor((java.io.Serializable): java.lang.Object[]),ai.MethodsWithArrays{ public static java.lang.Object[] wrap(java.io.Serializable) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithArrays),zeroToNine,MethodDescriptor((): int[]),ai.MethodsWithArrays{ public static int[] zeroToNine() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),<init>,MethodDescriptor((): void),ai.MethodsWithBranches{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),dCompDCMPG,MethodDescriptor((double, double): boolean),ai.MethodsWithBranches{ public static boolean dCompDCMPG(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),dCompDCMPG,MethodDescriptor((int, int): boolean),ai.MethodsWithBranches{ public static boolean dCompDCMPG(int,int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),dCompDCMPL,MethodDescriptor((double, double): boolean),ai.MethodsWithBranches{ public static boolean dCompDCMPL(double,double) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),fCompFCMPG,MethodDescriptor((float, float): boolean),ai.MethodsWithBranches{ public static boolean fCompFCMPG(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),fCompFCMPL,MethodDescriptor((float, float): boolean),ai.MethodsWithBranches{ public static boolean fCompFCMPL(float,float) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),lCompDCMP,MethodDescriptor((long, long): boolean),ai.MethodsWithBranches{ public static boolean lCompDCMP(long,long) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),multipleComp,MethodDescriptor((java.lang.Object, java.lang.Object): boolean),ai.MethodsWithBranches{ public static boolean multipleComp(java.lang.Object,java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithBranches),nonnullComp,MethodDescriptor((java.lang.Object): boolean),ai.MethodsWithBranches{ public static boolean nonnullComp(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),nullComp,MethodDescriptor((java.lang.Object): boolean),ai.MethodsWithBranches{ public static boolean nullComp(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),onValue,MethodDescriptor((int): int),ai.MethodsWithBranches{ public static int onValue(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithBranches),onValueDense,MethodDescriptor((int): int),ai.MethodsWithBranches{ public static int onValueDense(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSub),<init>,MethodDescriptor((java.lang.Object): void),ai.MethodsWithConstructors$MWCSub{ public void <init>(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSub),getObject,MethodDescriptor((): java.lang.Object),ai.MethodsWithConstructors$MWCSub{ public java.lang.Object getObject() }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSub),getValue,MethodDescriptor((): java.lang.String),ai.MethodsWithConstructors$MWCSuper{ public java.lang.String getValue() }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSuper),<init>,MethodDescriptor((int): void),ai.MethodsWithConstructors$MWCSuper{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSuper),<init>,MethodDescriptor((java.lang.String): void),ai.MethodsWithConstructors$MWCSuper{ public void <init>(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithConstructors$MWCSuper),getValue,MethodDescriptor((): java.lang.String),ai.MethodsWithConstructors$MWCSuper{ public java.lang.String getValue() }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithConstructors),<init>,MethodDescriptor((): void),ai.MethodsWithConstructors{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions$SubException),<init>,MethodDescriptor((): void),ai.MethodsWithExceptions$SubException{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions$SuperException),<init>,MethodDescriptor((): void),ai.MethodsWithExceptions$SuperException{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),<init>,MethodDescriptor((): void),ai.MethodsWithExceptions{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),alwaysCatch,MethodDescriptor((java.lang.Throwable): void),ai.MethodsWithExceptions{ public static void alwaysCatch(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),alwaysThrows,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void alwaysThrows(java.lang.String) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),catchGame,MethodDescriptor((java.lang.Object): int),ai.MethodsWithExceptions{ public static int catchGame(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),catchGameWithSortedCatches,MethodDescriptor((java.lang.Object): int),ai.MethodsWithExceptions{ public static int catchGameWithSortedCatches(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),conditionInFinally,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void conditionInFinally(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),differentExceptionsHandledBySameHandler,MethodDescriptor((int): int),ai.MethodsWithExceptions{ public static int differentExceptionsHandledBySameHandler(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),differentExceptionsRelatedToArraysHandledBySameHandler,MethodDescriptor((int): void),ai.MethodsWithExceptions{ public static void differentExceptionsRelatedToArraysHandledBySameHandler(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),doIt,MethodDescriptor((): void),ai.MethodsWithExceptions{ private static void doIt() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),exceptionAsControlFlow,MethodDescriptor((int): void),ai.MethodsWithExceptions{ public static void exceptionAsControlFlow(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),exceptionsAndNull,MethodDescriptor((java.io.IOException): java.lang.Object),ai.MethodsWithExceptions{ public static java.lang.Object exceptionsAndNull(java.io.IOException) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithExceptions),exceptionsAndNull,MethodDescriptor((java.lang.Object): java.lang.Object),ai.MethodsWithExceptions{ public static java.lang.Object exceptionsAndNull(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),exceptionsAndNull,MethodDescriptor((java.lang.Object[]): int),ai.MethodsWithExceptions{ public static int exceptionsAndNull(java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),exceptionsWithMultipleReasonsForNull,MethodDescriptor((java.lang.Object): java.lang.Object),ai.MethodsWithExceptions{ public static java.lang.Object exceptionsWithMultipleReasonsForNull(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),extensiveCatchGame,MethodDescriptor((java.lang.Object, int): int),ai.MethodsWithExceptions{ public static int extensiveCatchGame(java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),finallyAndCatchGame,MethodDescriptor((java.lang.Object): int),ai.MethodsWithExceptions{ public static int finallyAndCatchGame(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithExceptions),finallyGame,MethodDescriptor((java.lang.Object): int),ai.MethodsWithExceptions{ public static int finallyGame(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),justThrow,MethodDescriptor((java.lang.Throwable): void),ai.MethodsWithExceptions{ public static void justThrow(java.lang.Throwable) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithExceptions),leverageException,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void leverageException(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithExceptions),nestedTryFinally,MethodDescriptor((): void),ai.MethodsWithExceptions{ public static void nestedTryFinally() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),onlyNewNoInitDueToException,MethodDescriptor((int): void),ai.MethodsWithExceptions{ public static void onlyNewNoInitDueToException(int) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),processIt,MethodDescriptor((int): void),ai.MethodsWithExceptions{ private static void processIt(int) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),processIt,MethodDescriptor((java.lang.Object): void),ai.MethodsWithExceptions{ private static void processIt(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),throwsNoException,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void throwsNoException(java.lang.String) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),throwsSomeException,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void throwsSomeException(java.lang.String) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),throwsThisOrThatException,MethodDescriptor((java.lang.String): void),ai.MethodsWithExceptions{ public static void throwsThisOrThatException(java.lang.String) }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithExceptions),withFinallyAndThrows,MethodDescriptor((java.lang.Throwable): void),ai.MethodsWithExceptions{ public static void withFinallyAndThrows(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithLoops),<init>,MethodDescriptor((): void),ai.MethodsWithLoops{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithLoops),conditionallyEndless,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void conditionallyEndless() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithLoops),countTo10,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void countTo10() }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithLoops),countToM10,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void countToM10() }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithLoops),endless,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void endless() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithLoops),endless,MethodDescriptor((boolean): void),ai.MethodsWithLoops{ public static void endless(boolean) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithLoops),endlessDueToBug,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void endlessDueToBug() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithLoops),eventuallyEndless,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void eventuallyEndless() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithLoops),iterateList,MethodDescriptor((java.util.List): java.lang.Object),ai.MethodsWithLoops{ public static java.lang.Object iterateList(java.util.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithLoops),singleStepLoop,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void singleStepLoop() }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithLoops),twoStepsLoop,MethodDescriptor((): void),ai.MethodsWithLoops{ public static void twoStepsLoop() }) => DPure
DefinedMethod(ObjectType(ai/MethodsWithReflection),<init>,MethodDescriptor((): void),ai.MethodsWithReflection{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithReflection),someClass1,MethodDescriptor((): java.lang.Class),ai.MethodsWithReflection{ public static java.lang.Class someClass1() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithReflection),someClass2,MethodDescriptor((): java.lang.Class),ai.MethodsWithReflection{ public static java.lang.Class someClass2() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),<init>,MethodDescriptor((): void),ai.MethodsWithTypeChecks{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),castToCollection,MethodDescriptor((java.lang.Object): java.util.Collection),ai.MethodsWithTypeChecks{ public static java.util.Collection castToCollection(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),castToObject,MethodDescriptor((java.lang.Object): java.lang.Object),ai.MethodsWithTypeChecks{ public static java.lang.Object castToObject(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),castToSet,MethodDescriptor((java.lang.Object): java.util.Set),ai.MethodsWithTypeChecks{ public static java.util.Set castToSet(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),catchFailingCast,MethodDescriptor((java.lang.Object): java.io.FileNotFoundException),ai.MethodsWithTypeChecks{ public static java.io.FileNotFoundException catchFailingCast(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),explicitTypeCheckAndCast,MethodDescriptor((java.lang.Object): java.io.FileNotFoundException),ai.MethodsWithTypeChecks{ public static java.io.FileNotFoundException explicitTypeCheckAndCast(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),get,MethodDescriptor((): java.util.List),ai.MethodsWithTypeChecks{ public static java.util.List get() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),main,MethodDescriptor((java.lang.String[]): void),ai.MethodsWithTypeChecks{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),onceUselessOnceUsefulCast,MethodDescriptor((java.io.IOException): java.lang.Object),ai.MethodsWithTypeChecks{ public static java.lang.Object onceUselessOnceUsefulCast(java.io.IOException) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/MethodsWithTypeChecks),requiredCast,MethodDescriptor((java.lang.Cloneable): java.io.FileNotFoundException),ai.MethodsWithTypeChecks{ public static java.io.FileNotFoundException requiredCast(java.lang.Cloneable) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/Obfuscation),<init>,MethodDescriptor((): void),ai.Obfuscation{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/Obfuscation),arrayCopy,MethodDescriptor((): void),ai.Obfuscation{ public static void arrayCopy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),arrayToString,MethodDescriptor((): void),ai.Obfuscation{ public static void arrayToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),arraysUseDead,MethodDescriptor((): void),ai.Obfuscation{ public static void arraysUseDead() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),dead,MethodDescriptor((): void),ai.Obfuscation{ public static void dead() }) => DPure
DefinedMethod(ObjectType(ai/Obfuscation),deadArrayLength,MethodDescriptor((int): void),ai.Obfuscation{ public static void deadArrayLength(int) }) => DPure
DefinedMethod(ObjectType(ai/Obfuscation),emptyStringArray,MethodDescriptor((): void),ai.Obfuscation{ public static void emptyStringArray() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),equalsDead,MethodDescriptor((): void),ai.Obfuscation{ public static void equalsDead() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),equalsDead2,MethodDescriptor((): void),ai.Obfuscation{ public static void equalsDead2() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),filledArrayCollection,MethodDescriptor((): void),ai.Obfuscation{ public static void filledArrayCollection() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),filledStringArray,MethodDescriptor((): void),ai.Obfuscation{ public static void filledStringArray() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),hashCodeDead,MethodDescriptor((): void),ai.Obfuscation{ public static void hashCodeDead() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/Obfuscation),main,MethodDescriptor((java.lang.String[]): void),ai.Obfuscation{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ConditionalMath),<init>,MethodDescriptor((): void),ai.domain.ConditionalMath{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),aliases,MethodDescriptor((int): int),ai.domain.ConditionalMath{ static int aliases(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),m1,MethodDescriptor((int): int),ai.domain.ConditionalMath{ static int m1(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),m2,MethodDescriptor((int, int): int),ai.domain.ConditionalMath{ static int m2(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),m3,MethodDescriptor((int): int),ai.domain.ConditionalMath{ static int m3(int) }) => DPure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),main,MethodDescriptor((java.lang.String[]): void),ai.domain.ConditionalMath{ public static void main(java.lang.String[]) }) => DPure
DefinedMethod(ObjectType(ai/domain/ConditionalMath),max5,MethodDescriptor((int): int),ai.domain.ConditionalMath{ static int max5(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/DeadVariables$ControlFlowException),<init>,MethodDescriptor((): void),ai.domain.DeadVariables$ControlFlowException{ void <init>() }) => DPure
DefinedMethod(ObjectType(ai/domain/DeadVariables),<init>,MethodDescriptor((): void),ai.domain.DeadVariables{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),deadAtEnd,MethodDescriptor((): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object deadAtEnd() }) => DPure
DefinedMethod(ObjectType(ai/domain/DeadVariables),deadOnFalseBranch,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object deadOnFalseBranch(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),deadOnTrueBranch,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object deadOnTrueBranch(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),initialValueIsAlwaysDead,MethodDescriptor((int): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object initialValueIsAlwaysDead(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/DeadVariables),java_lang_System_newPrintStream_inspired,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object java_lang_System_newPrintStream_inspired(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),lastPrimitiveValue,MethodDescriptor((java.lang.Object): int),ai.domain.DeadVariables{ public int lastPrimitiveValue(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),lastStringBuilder,MethodDescriptor((java.lang.Object): java.lang.StringBuilder),ai.domain.DeadVariables{ public java.lang.StringBuilder lastStringBuilder(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),loopWithBreak,MethodDescriptor((): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object loopWithBreak() }) => ExternallySideEffectFree
DefinedMethod(ObjectType(ai/domain/DeadVariables),nestedIrrelevantControlFlow,MethodDescriptor((): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object nestedIrrelevantControlFlow() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),notDeadRestored,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object notDeadRestored(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),processIt,MethodDescriptor((java.lang.Object): void),ai.domain.DeadVariables{ public void processIt(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(ai/domain/DeadVariables),simplyDead,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object simplyDead(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/DeadVariables),singleTargetAThrow,MethodDescriptor((): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object singleTargetAThrow() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(ai/domain/DeadVariables),transformIt,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.DeadVariables{ public java.lang.Object transformIt(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),<init>,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),aliasingMax5,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int aliasingMax5(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),aliasingMax6,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int aliasingMax6(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),aliasingMin0,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int aliasingMin0(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),aliasingMinM1,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int aliasingMinM1(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),anInt,MethodDescriptor((): int),ai.domain.IntegerValuesFrenzy{ public static int anInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),array10,MethodDescriptor((): int[]),ai.domain.IntegerValuesFrenzy{ static int[] array10() }) => DPure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),casts,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void casts() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues1_v1,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues1_v1() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues1_v2,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues1_v2() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues1_v3,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues1_v3() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues2,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues2() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues3,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues3() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues4,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues4() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues5,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues5() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValues6,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void cfDependentValues6() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesAdd,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesAdd(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesBitwiseAnd,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesBitwiseAnd(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesBitwiseOr,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesBitwiseOr(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesDiv,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesDiv(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesMult,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesMult(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),cfDependentValuesSub,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int cfDependentValuesSub(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),complexConditions1,MethodDescriptor((int): void),ai.domain.IntegerValuesFrenzy{ static void complexConditions1(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),complexConditions2,MethodDescriptor((int, int): void),ai.domain.IntegerValuesFrenzy{ static void complexConditions2(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),complexConditions3,MethodDescriptor((int, int): void),ai.domain.IntegerValuesFrenzy{ static void complexConditions3(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),complexConstantComputations,MethodDescriptor((int): java.lang.String),ai.domain.IntegerValuesFrenzy{ public static java.lang.String complexConstantComputations(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),complexLoop,MethodDescriptor((int, int): void),ai.domain.IntegerValuesFrenzy{ static void complexLoop(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),countDown,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int countDown(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),countingLoop,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int countingLoop(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),deadCode,MethodDescriptor((byte[], int, int): int),ai.domain.IntegerValuesFrenzy{ static int deadCode(byte[],int,int) }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),doIt,MethodDescriptor((int): void),ai.domain.IntegerValuesFrenzy{ static void doIt(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),doIt,MethodDescriptor((java.lang.String, int): void),ai.domain.IntegerValuesFrenzy{ static void doIt(java.lang.String,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),findRunContaining,MethodDescriptor((int, int[]): int),ai.domain.IntegerValuesFrenzy{ static int findRunContaining(int,int[]) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),getByte,MethodDescriptor((): int),ai.domain.IntegerValuesFrenzy{ private static int getByte() }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),id,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int id(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),lowerBoundUpperBound,MethodDescriptor((int): void),ai.domain.IntegerValuesFrenzy{ public static void lowerBoundUpperBound(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),max,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int max(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),max5,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int max5(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),moreComplexAliasing,MethodDescriptor((): int),ai.domain.IntegerValuesFrenzy{ static int moreComplexAliasing() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),multipleConstraints1,MethodDescriptor((int, int): void),ai.domain.IntegerValuesFrenzy{ static void multipleConstraints1(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),multipleConstraints2,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int multipleConstraints2(int,int) }) => DPure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),randomModulo,MethodDescriptor((): void),ai.domain.IntegerValuesFrenzy{ static void randomModulo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),semiComplexConstantComputations,MethodDescriptor((int): java.lang.String),ai.domain.IntegerValuesFrenzy{ public static java.lang.String semiComplexConstantComputations(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),simpleConstantComputations,MethodDescriptor((int): java.lang.String),ai.domain.IntegerValuesFrenzy{ public static java.lang.String simpleConstantComputations(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),someComparisonThatReturns5,MethodDescriptor((int, int): int),ai.domain.IntegerValuesFrenzy{ static int someComparisonThatReturns5(int,int) }) => Pure
DefinedMethod(ObjectType(ai/domain/IntegerValuesFrenzy),someSwitch,MethodDescriptor((int): int),ai.domain.IntegerValuesFrenzy{ static int someSwitch(int) }) => DPure
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),<init>,MethodDescriptor((): void),ai.domain.PlainClassesJava{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),getClass,MethodDescriptor((java.lang.String): java.lang.Class),ai.domain.PlainClassesJava{ private java.lang.Class getClass(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),getClassByKey,MethodDescriptor((int): java.lang.Object),ai.domain.PlainClassesJava{ public java.lang.Object getClassByKey(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),getClassByKeyAlt,MethodDescriptor((int): java.lang.Object),ai.domain.PlainClassesJava{ public java.lang.Object getClassByKeyAlt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),getClassOrElseObject,MethodDescriptor((java.lang.String): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class getClassOrElseObject(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),literalStringAsParameterInClassForName,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class literalStringAsParameterInClassForName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),literalStringInClassForName,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class literalStringInClassForName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),literalStringInLongClassForName,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class literalStringInLongClassForName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),noLiteralStringInClassForName,MethodDescriptor((java.lang.String): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class noLiteralStringInClassForName(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),staticClassValue,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class staticClassValue() }) => Pure
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),staticPrimitveClassValue,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class staticPrimitveClassValue() }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),stringVariableAsParameterInClassForName,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class stringVariableAsParameterInClassForName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/PlainClassesJava),stringVariableInClassForName,MethodDescriptor((): java.lang.Class),ai.domain.PlainClassesJava{ public java.lang.Class stringVariableInClassForName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),<init>,MethodDescriptor((): void),ai.domain.ReferenceValuesFrenzy{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),aliases,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object aliases(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),cfDependentValues,MethodDescriptor((int): void),ai.domain.ReferenceValuesFrenzy{ static void cfDependentValues(int) }) => DSideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),complexAliasing,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object complexAliasing(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),complexConditionalAssignment1,MethodDescriptor((): void),ai.domain.ReferenceValuesFrenzy{ static void complexConditionalAssignment1() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),complexConditionalAssignment2,MethodDescriptor((): void),ai.domain.ReferenceValuesFrenzy{ static void complexConditionalAssignment2() }) => DSideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),complexRefinement,MethodDescriptor((): boolean),ai.domain.ReferenceValuesFrenzy{ static boolean complexRefinement() }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),conditionalAssignment1,MethodDescriptor((): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object conditionalAssignment1() }) => DPure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),conditionalAssignment2,MethodDescriptor((): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object conditionalAssignment2() }) => DPure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),doIt,MethodDescriptor((java.lang.Object): void),ai.domain.ReferenceValuesFrenzy{ static void doIt(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),doIt,MethodDescriptor((java.lang.String, java.lang.Object): void),ai.domain.ReferenceValuesFrenzy{ static void doIt(java.lang.String,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),handlingExceptions,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object handlingExceptions(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),iterativelyUpdated,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object iterativelyUpdated(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),maybeNull,MethodDescriptor((): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object maybeNull() }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),multipleReferenceValues,MethodDescriptor((java.lang.String): void),ai.domain.ReferenceValuesFrenzy{ static void multipleReferenceValues(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),paramAsVar,MethodDescriptor((java.lang.Object): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object paramAsVar(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),printError,MethodDescriptor((java.lang.Object): void),ai.domain.ReferenceValuesFrenzy{ static void printError(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),refiningNullnessOfMultipleReferenceValues,MethodDescriptor((): void),ai.domain.ReferenceValuesFrenzy{ static void refiningNullnessOfMultipleReferenceValues() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),refiningTypeBoundOfMultipleReferenceValues,MethodDescriptor((): void),ai.domain.ReferenceValuesFrenzy{ static void refiningTypeBoundOfMultipleReferenceValues() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),relatedMultipleReferenceValues,MethodDescriptor((java.lang.String): void),ai.domain.ReferenceValuesFrenzy{ static void relatedMultipleReferenceValues(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),simpleConditionalAssignment,MethodDescriptor((int): java.lang.Object),ai.domain.ReferenceValuesFrenzy{ static java.lang.Object simpleConditionalAssignment(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/ReferenceValuesFrenzy),swap,MethodDescriptor((int, java.lang.Object[]): void),ai.domain.ReferenceValuesFrenzy{ static void swap(int,java.lang.Object[]) }) => DContextuallySideEffectFree
DefinedMethod(ObjectType(ai/domain/Sanitization),<init>,MethodDescriptor((): void),ai.domain.Sanitization{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/Sanitization),notSanitized1,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void notSanitized1(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/domain/Sanitization),notSanitized2,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void notSanitized2(java.lang.String) }) => SideEffectFree
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitize,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ static void sanitize(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized1,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized1(java.lang.String) }) => Pure
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized2,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized2(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized3,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized3(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized4,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized4(java.lang.String) }) => DPure
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized5,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized5(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized6,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized6(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/Sanitization),sanitized7,MethodDescriptor((java.lang.String): void),ai.domain.Sanitization{ void sanitized7(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/StringValues),<init>,MethodDescriptor((): void),ai.domain.StringValues{ public void <init>() }) => Pure
DefinedMethod(ObjectType(ai/domain/StringValues),aOrB,MethodDescriptor((int): java.lang.String),ai.domain.StringValues{ public java.lang.String aOrB(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/StringValues),aOrBAlt,MethodDescriptor((int): java.lang.String),ai.domain.StringValues{ public java.lang.String aOrBAlt(int) }) => Pure
DefinedMethod(ObjectType(ai/domain/StringValues),build,MethodDescriptor((): java.lang.String),ai.domain.StringValues{ public static java.lang.String build() }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/StringValues),constant,MethodDescriptor((): java.lang.String),ai.domain.StringValues{ public java.lang.String constant() }) => Pure
DefinedMethod(ObjectType(ai/domain/StringValues),main,MethodDescriptor((java.lang.String[]): void),ai.domain.StringValues{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/StringValues),sb,MethodDescriptor((int, int, int): java.lang.String),ai.domain.StringValues{ public java.lang.String sb(int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(ai/domain/StringValues),that,MethodDescriptor((java.lang.String): java.lang.String),ai.domain.StringValues{ public java.lang.String that(java.lang.String) }) => SideEffectFree

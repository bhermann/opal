DefinedMethod(ObjectType(dependencies/AnnotationDefaultAttributeTestClass),<init>,MethodDescriptor((): void),dependencies.AnnotationDefaultAttributeTestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationDefaultAttributeTestClass),testMethod,MethodDescriptor((): void),dependencies.AnnotationDefaultAttributeTestClass{ public void testMethod() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$GenericTest),<init>,MethodDescriptor((dependencies.AnnotationTypeTestClass): void),dependencies.AnnotationTypeTestClass$GenericTest{ public void <init>(dependencies.AnnotationTypeTestClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$GenericTest),inspect,MethodDescriptor((java.lang.Object): void),dependencies.AnnotationTypeTestClass$GenericTest{ public void inspect(java.lang.Object) }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$GenericUpperIntersectionTest),<init>,MethodDescriptor((dependencies.AnnotationTypeTestClass): void),dependencies.AnnotationTypeTestClass$GenericUpperIntersectionTest{ public void <init>(dependencies.AnnotationTypeTestClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$Inheritance),<init>,MethodDescriptor((dependencies.AnnotationTypeTestClass): void),dependencies.AnnotationTypeTestClass$Inheritance{ public void <init>(dependencies.AnnotationTypeTestClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$Inheritance),testMethod,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass$Inheritance{ public void testMethod() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$Inheritance),testMethod,MethodDescriptor((java.lang.Integer, int): java.lang.String),dependencies.AnnotationTypeTestClass$Inheritance{ public java.lang.String testMethod(java.lang.Integer,int) }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass$NestedGeneric),<init>,MethodDescriptor((dependencies.AnnotationTypeTestClass): void),dependencies.AnnotationTypeTestClass$NestedGeneric{ public void <init>(dependencies.AnnotationTypeTestClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),<init>,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),array,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void array() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),boundedTypes,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void boundedTypes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),cast,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void cast() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),constructors,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void constructors() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),genericClass,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void genericClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),innerClass,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void innerClass() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),instance,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),java8,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void java8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),lambdaFunction,MethodDescriptor((java.lang.String, java.util.function.Function): java.lang.String),dependencies.AnnotationTypeTestClass{ public static java.lang.String lambdaFunction(java.lang.String,java.util.function.Function) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),repeatableAnnotation,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void repeatableAnnotation() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),throwException,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void throwException() }) => DPure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),tryCatch,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void tryCatch() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),tryWithResource,MethodDescriptor((java.lang.String): void),dependencies.AnnotationTypeTestClass{ public void tryWithResource(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/AnnotationTypeTestClass),twoDimArray,MethodDescriptor((): void),dependencies.AnnotationTypeTestClass{ public void twoDimArray() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass$1),<init>,MethodDescriptor((dependencies.EnclosingMethodClass): void),dependencies.EnclosingMethodClass$1{ void <init>(dependencies.EnclosingMethodClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass$2),<init>,MethodDescriptor((): void),dependencies.EnclosingMethodClass$2{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass$3),<init>,MethodDescriptor((dependencies.EnclosingMethodClass): void),dependencies.EnclosingMethodClass$3{ void <init>(dependencies.EnclosingMethodClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass$3),innerMethod,MethodDescriptor((): void),dependencies.EnclosingMethodClass$3{ public void innerMethod() }) => CompileTimePure
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass),<clinit>,MethodDescriptor((): void),dependencies.EnclosingMethodClass{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass),<init>,MethodDescriptor((): void),dependencies.EnclosingMethodClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/EnclosingMethodClass),enclosingMethod,MethodDescriptor((): void),dependencies.EnclosingMethodClass{ public void enclosingMethod() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/ExceptionTestClass),<init>,MethodDescriptor((): void),dependencies.ExceptionTestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/ExceptionTestClass),catchMethod,MethodDescriptor((): void),dependencies.ExceptionTestClass{ public void catchMethod() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/ExceptionTestClass),testMethod,MethodDescriptor((): void),dependencies.ExceptionTestClass{ public void testMethod() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/FieldsClass),<init>,MethodDescriptor((): void),dependencies.FieldsClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/FieldsClass),readField,MethodDescriptor((): java.lang.Integer),dependencies.FieldsClass{ private java.lang.Integer readField() }) => SideEffectFree
DefinedMethod(ObjectType(dependencies/FieldsClass),readWrite,MethodDescriptor((java.lang.Integer): java.lang.Integer),dependencies.FieldsClass{ public java.lang.Integer readWrite(java.lang.Integer) }) => ExternallySideEffectFree
DefinedMethod(ObjectType(dependencies/FieldsClass),writeField,MethodDescriptor((java.lang.Integer): void),dependencies.FieldsClass{ private void writeField(java.lang.Integer) }) => ExternallyPure
DefinedMethod(ObjectType(dependencies/InstructionsTestClass),<init>,MethodDescriptor((): void),dependencies.InstructionsTestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/InstructionsTestClass),method,MethodDescriptor((): void),dependencies.InstructionsTestClass{ public void method() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/OuterClass$InnerClass),<init>,MethodDescriptor((dependencies.OuterClass, java.lang.Integer): void),dependencies.OuterClass$InnerClass{ public void <init>(dependencies.OuterClass,java.lang.Integer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/OuterClass),<init>,MethodDescriptor((): void),dependencies.OuterClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),<init>,MethodDescriptor((): void),dependencies.SignatureTestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),m1,MethodDescriptor((): java.io.InputStream),dependencies.SignatureTestClass{ public java.io.InputStream m1() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),m2,MethodDescriptor((java.io.InputStream, java.lang.Object): void),dependencies.SignatureTestClass{ public void m2(java.io.InputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),m3,MethodDescriptor((): java.lang.Object),dependencies.SignatureTestClass{ public java.lang.Object m3() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),m4,MethodDescriptor((): java.io.InputStream),dependencies.SignatureTestClass{ public java.io.InputStream m4() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestClass),m5,MethodDescriptor((): java.io.OutputStream),dependencies.SignatureTestClass{ public java.io.OutputStream m5() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),<init>,MethodDescriptor((): void),dependencies.SignatureTestSubClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),m1,MethodDescriptor((): java.io.InputStream),dependencies.SignatureTestClass{ public java.io.InputStream m1() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),m2,MethodDescriptor((java.io.InputStream, java.lang.Object): void),dependencies.SignatureTestClass{ public void m2(java.io.InputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),m3,MethodDescriptor((): java.lang.Object),dependencies.SignatureTestSubClass{ public java.lang.Object m3() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),m4,MethodDescriptor((): java.io.InputStream),dependencies.SignatureTestClass{ public java.io.InputStream m4() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/SignatureTestSubClass),m5,MethodDescriptor((): java.io.OutputStream),dependencies.SignatureTestSubClass{ public java.io.OutputStream m5() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/TestClass),<init>,MethodDescriptor((): void),dependencies.TestClass{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/TestClass),testMethod,MethodDescriptor((): void),dependencies.TestClass{ public void testMethod() }) => ImpureByAnalysis
DefinedMethod(ObjectType(dependencies/TestClass),testMethod,MethodDescriptor((java.lang.Integer, int): java.lang.String),dependencies.TestClass{ public java.lang.String testMethod(java.lang.Integer,int) }) => ImpureByAnalysis

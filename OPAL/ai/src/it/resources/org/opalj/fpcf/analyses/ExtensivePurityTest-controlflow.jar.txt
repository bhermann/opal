DefinedMethod(ObjectType(controlflow/BoringCode),<init>,MethodDescriptor((): void),controlflow.BoringCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/BoringCode),conditionalOneReturn,MethodDescriptor((int, boolean): boolean),controlflow.BoringCode{ boolean conditionalOneReturn(int,boolean) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/BoringCode),conditionalTwoReturns,MethodDescriptor((int): boolean),controlflow.BoringCode{ boolean conditionalTwoReturns(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/BoringCode),singleBlock,MethodDescriptor((): int),controlflow.BoringCode{ int singleBlock() }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/ExampleCode),<init>,MethodDescriptor((): void),controlflow.ExampleCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/ExampleCode),example,MethodDescriptor((int, int): int),controlflow.ExampleCode{ int example(int,int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExampleCode),forLoop,MethodDescriptor((int): void),controlflow.ExampleCode{ void forLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/ExampleCode),helloWorld,MethodDescriptor((): void),controlflow.ExampleCode{ void helloWorld() }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/ExampleCode),otherTryCatch,MethodDescriptor((int[]): void),controlflow.ExampleCode{ void otherTryCatch(int[]) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExampleCode),provoke,MethodDescriptor((int): void),controlflow.ExampleCode{ void provoke(int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExampleCode),simpleConditional,MethodDescriptor((int): boolean),controlflow.ExampleCode{ boolean simpleConditional(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/ExampleCode),tryCatch,MethodDescriptor((int): void),controlflow.ExampleCode{ void tryCatch(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/ExampleCode),tryCatchConditional,MethodDescriptor((int[], boolean): void),controlflow.ExampleCode{ void tryCatchConditional(int[],boolean) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExampleCode),tryCatchDoWhile,MethodDescriptor((int, int): void),controlflow.ExampleCode{ void tryCatchDoWhile(int,int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExampleCode),tryCatchFinally,MethodDescriptor((int[]): void),controlflow.ExampleCode{ void tryCatchFinally(int[]) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExampleCode),tryFinally,MethodDescriptor((int): int),controlflow.ExampleCode{ int tryFinally(int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExceptionCode),<init>,MethodDescriptor((): void),controlflow.ExceptionCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/ExceptionCode),highlyNestedFinally,MethodDescriptor((int[], int): int),controlflow.ExceptionCode{ int highlyNestedFinally(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExceptionCode),loopExceptionWithCatchReturn,MethodDescriptor((int[], int): int),controlflow.ExceptionCode{ int loopExceptionWithCatchReturn(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExceptionCode),loopExceptionWithFinallyReturn,MethodDescriptor((int[], int): int),controlflow.ExceptionCode{ int loopExceptionWithFinallyReturn(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/ExceptionCode),multipleCatchAndFinally,MethodDescriptor((int): int),controlflow.ExceptionCode{ int multipleCatchAndFinally(int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExceptionCode),nestedCatch,MethodDescriptor((java.io.InputStream): void),controlflow.ExceptionCode{ static void nestedCatch(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/ExceptionCode),nestedExceptions,MethodDescriptor((int): int),controlflow.ExceptionCode{ int nestedExceptions(int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExceptionCode),simpleException,MethodDescriptor((int): int),controlflow.ExceptionCode{ int simpleException(int) }) => DPure
DefinedMethod(ObjectType(controlflow/ExceptionCode),tryFinally,MethodDescriptor((int): void),controlflow.ExceptionCode{ void tryFinally(int) }) => DPure
DefinedMethod(ObjectType(controlflow/FinallyCode),<init>,MethodDescriptor((): void),controlflow.FinallyCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/FinallyCode),duplicateInCatchblock,MethodDescriptor((int, int): int),controlflow.FinallyCode{ int duplicateInCatchblock(int,int) }) => DPure
DefinedMethod(ObjectType(controlflow/FinallyCode),highlyNestedFinally,MethodDescriptor((int[], int): int),controlflow.FinallyCode{ int highlyNestedFinally(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/FinallyCode),loopInFinally,MethodDescriptor((int[], int): int),controlflow.FinallyCode{ int loopInFinally(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(controlflow/FinallyCode),nestedFinally,MethodDescriptor((int, int, int, int): void),controlflow.FinallyCode{ void nestedFinally(int,int,int,int) }) => DPure
DefinedMethod(ObjectType(controlflow/FinallyCode),tryFinally,MethodDescriptor((int): void),controlflow.FinallyCode{ void tryFinally(int) }) => DPure
DefinedMethod(ObjectType(controlflow/FinallyCode),tryFinallyBranch,MethodDescriptor((int, int, int): int),controlflow.FinallyCode{ int tryFinallyBranch(int,int,int) }) => DPure
DefinedMethod(ObjectType(controlflow/FinallyCode),tryWithResources,MethodDescriptor((java.lang.String): java.lang.String),controlflow.FinallyCode{ java.lang.String tryWithResources(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/FinallyCode),tryWithResourcesCatch,MethodDescriptor((java.lang.String): java.lang.String),controlflow.FinallyCode{ java.lang.String tryWithResourcesCatch(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/FinallyCode),tryWithResourcesOldSchool,MethodDescriptor((java.lang.String): java.lang.String),controlflow.FinallyCode{ java.lang.String tryWithResourcesOldSchool(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/InfiniteLoops),<init>,MethodDescriptor((): void),controlflow.InfiniteLoops{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/InfiniteLoops),complexPathToInfiniteLoop,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void complexPathToInfiniteLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),complexPathToInfiniteLoopWithComplexPath,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void complexPathToInfiniteLoopWithComplexPath(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),infiniteLoopWithComplexPath,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void infiniteLoopWithComplexPath(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),infiniteLoopWithMultipleExitPoints,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void infiniteLoopWithMultipleExitPoints(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),justInfiniteLoop,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void justInfiniteLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),multipleInfiniteLoops,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void multipleInfiniteLoops(int) }) => DPure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),nestedInfiniteLoops,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void nestedInfiniteLoops(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),regularLoopInInfiniteLoop,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void regularLoopInInfiniteLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),trivialInfiniteLoop,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void trivialInfiniteLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),trivialNestedInfiniteLoops,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void trivialNestedInfiniteLoops(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/InfiniteLoops),unboundedLoopWhichMayThrowException,MethodDescriptor((int): void),controlflow.InfiniteLoops{ static void unboundedLoopWhichMayThrowException(int) }) => DPure
DefinedMethod(ObjectType(controlflow/LoopCode),<init>,MethodDescriptor((): void),controlflow.LoopCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/LoopCode),endlessLoop,MethodDescriptor((int, int, int): void),controlflow.LoopCode{ void endlessLoop(int,int,int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/LoopCode),loopWithBranch,MethodDescriptor((int, int): int),controlflow.LoopCode{ int loopWithBranch(int,int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/LoopCode),nestedLoop,MethodDescriptor((int, int): int),controlflow.LoopCode{ int nestedLoop(int,int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/LoopCode),simpleLoop,MethodDescriptor((int): int),controlflow.LoopCode{ int simpleLoop(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/SwitchCode),<init>,MethodDescriptor((): void),controlflow.SwitchCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/SwitchCode),degenerateSwitch,MethodDescriptor((int): int),controlflow.SwitchCode{ public int degenerateSwitch(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/SwitchCode),disparateSwitchWithoutBreakWithDefault,MethodDescriptor((int): int),controlflow.SwitchCode{ public int disparateSwitchWithoutBreakWithDefault(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/SwitchCode),simpleSwitchWithBreakNoDefault,MethodDescriptor((int): int),controlflow.SwitchCode{ public int simpleSwitchWithBreakNoDefault(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/SwitchCode),withAndWithoutFallthrough,MethodDescriptor((int): int),controlflow.SwitchCode{ public int withAndWithoutFallthrough(int) }) => CompileTimePure
DefinedMethod(ObjectType(controlflow/WideCode),<init>,MethodDescriptor((): void),controlflow.WideCode{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(controlflow/WideCode),wide,MethodDescriptor((boolean): int),controlflow.WideCode{ public int wide(boolean) }) => CompileTimePure

DefinedMethod(ObjectType(extensible_classes/transitivity/case1/Class),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case1.Class{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case1/PublicSubclass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case1.PublicSubclass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case2/Class),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case2.Class{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case2/PackageVisibleSubclass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case2.PackageVisibleSubclass{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case2/TestCase),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case2.TestCase{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case3/Class),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case3.Class{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case3/EffectivelyFinalClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case3.EffectivelyFinalClass{ private void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case3/PublicClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case3.PublicClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case3/PublicFinalClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case3.PublicFinalClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case4/UnknownSupertype),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case4.UnknownSupertype{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/transitivity/case5/PublicClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case5.PublicClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case5/PublicFinalClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case5.PublicFinalClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case5/TransitivelyExtensible),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case5.TransitivelyExtensible{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case6/HiddenSubclass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case6.HiddenSubclass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case6/InternalSubtype),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case6.InternalSubtype{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case6/PublicClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case6.PublicClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case6/PublicFinalClass),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case6.PublicFinalClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/transitivity/case6/TransitivelyExtensible),<init>,MethodDescriptor((): void),extensible_classes.transitivity.case6.TransitivelyExtensible{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/Class),<init>,MethodDescriptor((): void),extensible_classes.visibility.Class{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/Enum),<clinit>,MethodDescriptor((): void),extensible_classes.visibility.Enum{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/Enum),<init>,MethodDescriptor((java.lang.String, int): void),extensible_classes.visibility.Enum{ private void <init>(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/Enum),valueOf,MethodDescriptor((java.lang.String): extensible_classes.visibility.Enum),extensible_classes.visibility.Enum{ public static extensible_classes.visibility.Enum valueOf(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/Enum),values,MethodDescriptor((): extensible_classes.visibility.Enum[]),extensible_classes.visibility.Enum{ public static extensible_classes.visibility.Enum[] values() }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/FinalClass),<init>,MethodDescriptor((): void),extensible_classes.visibility.FinalClass{ void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/PublicClass),<init>,MethodDescriptor((): void),extensible_classes.visibility.PublicClass{ public void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/PublicClassWithPrivConstructors),<init>,MethodDescriptor((): void),extensible_classes.visibility.PublicClassWithPrivConstructors{ private void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/PublicClassWithPrivateConstructor),<init>,MethodDescriptor((): void),extensible_classes.visibility.PublicClassWithPrivateConstructor{ private void <init>() }) => Pure
DefinedMethod(ObjectType(extensible_classes/visibility/PublicEnum),<clinit>,MethodDescriptor((): void),extensible_classes.visibility.PublicEnum{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/PublicEnum),<init>,MethodDescriptor((java.lang.String, int): void),extensible_classes.visibility.PublicEnum{ private void <init>(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/PublicEnum),valueOf,MethodDescriptor((java.lang.String): extensible_classes.visibility.PublicEnum),extensible_classes.visibility.PublicEnum{ public static extensible_classes.visibility.PublicEnum valueOf(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/PublicEnum),values,MethodDescriptor((): extensible_classes.visibility.PublicEnum[]),extensible_classes.visibility.PublicEnum{ public static extensible_classes.visibility.PublicEnum[] values() }) => ImpureByAnalysis
DefinedMethod(ObjectType(extensible_classes/visibility/PublicFinalClass),<init>,MethodDescriptor((): void),extensible_classes.visibility.PublicFinalClass{ public void <init>() }) => Pure

DefinedMethod(ObjectType(pureness/Demo),<clinit>,MethodDescriptor((): void),pureness.Demo{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),<init>,MethodDescriptor((): void),pureness.Demo{ private void <init>() }) => Pure
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbs,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbs(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbsCallee,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbsCallee(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbsCalleeCallee1,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbsCalleeCallee1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbsCalleeCallee2,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbsCalleeCallee2(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbsCalleeCalleeCalle,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbsCalleeCalleeCalle(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),cpureCallsAbsCalleeCalleeCalleCallee,MethodDescriptor((int): int),pureness.Demo{ static int cpureCallsAbsCalleeCalleeCalleCallee(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureAtLast,MethodDescriptor((int): int),pureness.Demo{ public static int impureAtLast(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureCallsSystemFunction,MethodDescriptor((int): int),pureness.Demo{ public static int impureCallsSystemFunction(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),impureComplex1,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureComplex2,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex2(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureComplex3,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex3(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureComplex4,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex4(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureComplex5,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex5(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureComplex6,MethodDescriptor((int): int),pureness.Demo{ static int impureComplex6(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(pureness/Demo),impureMutuallyRecursiveCallCallsImpure1,MethodDescriptor((int): int),pureness.Demo{ static int impureMutuallyRecursiveCallCallsImpure1(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),impureMutuallyRecursiveCallCallsImpure2,MethodDescriptor((int): int),pureness.Demo{ static int impureMutuallyRecursiveCallCallsImpure2(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),impureRecursiveCallWithDependency1,MethodDescriptor((int): int),pureness.Demo{ static int impureRecursiveCallWithDependency1(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),impureRecursiveCallWithDependency2,MethodDescriptor((int): int),pureness.Demo{ static int impureRecursiveCallWithDependency2(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),impureRecursiveCallWithDependency3,MethodDescriptor((int): int),pureness.Demo{ static int impureRecursiveCallWithDependency3(int) }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),pureCallsMutuallyRecursivePureMethods,MethodDescriptor((int): int),pureness.Demo{ static int pureCallsMutuallyRecursivePureMethods(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureClosedSCC0,MethodDescriptor((int): int),pureness.Demo{ static int pureClosedSCC0(int) }) => DPure
DefinedMethod(ObjectType(pureness/Demo),pureClosedSCC1,MethodDescriptor((int): int),pureness.Demo{ static int pureClosedSCC1(int) }) => DPure
DefinedMethod(ObjectType(pureness/Demo),pureClosedSCC2,MethodDescriptor((int): int),pureness.Demo{ static int pureClosedSCC2(int) }) => DPure
DefinedMethod(ObjectType(pureness/Demo),pureClosedSCC3,MethodDescriptor((int): int),pureness.Demo{ static int pureClosedSCC3(int) }) => DPure
DefinedMethod(ObjectType(pureness/Demo),pureCyclicRecursiveCall1,MethodDescriptor((int): int),pureness.Demo{ static int pureCyclicRecursiveCall1(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureCyclicRecursiveCall2,MethodDescriptor((int): int),pureness.Demo{ static int pureCyclicRecursiveCall2(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureCyclicRecursiveCall3,MethodDescriptor((int): int),pureness.Demo{ static int pureCyclicRecursiveCall3(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureIdentity,MethodDescriptor((): pureness.Demo),pureness.Demo{ public pureness.Demo pureIdentity() }) => SideEffectFree
DefinedMethod(ObjectType(pureness/Demo),pureMutualRecursiveCall1,MethodDescriptor((int): int),pureness.Demo{ static int pureMutualRecursiveCall1(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureMutualRecursiveCall2,MethodDescriptor((int): int),pureness.Demo{ static int pureMutualRecursiveCall2(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureRecursiveCallWithDependency1,MethodDescriptor((int): int),pureness.Demo{ static int pureRecursiveCallWithDependency1(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureRecursiveCallWithDependency2,MethodDescriptor((int): int),pureness.Demo{ static int pureRecursiveCallWithDependency2(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureSimpleRecursiveCall,MethodDescriptor((int, int): int),pureness.Demo{ public static int pureSimpleRecursiveCall(int,int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureUnusedCallsMutuallyRecursivePureMethods,MethodDescriptor((int): int),pureness.Demo{ static int pureUnusedCallsMutuallyRecursivePureMethods(int) }) => Pure
DefinedMethod(ObjectType(pureness/Demo),pureUsesEffectivelyFinalField,MethodDescriptor((int, int): int),pureness.Demo{ public static int pureUsesEffectivelyFinalField(int,int) }) => DSideEffectFree

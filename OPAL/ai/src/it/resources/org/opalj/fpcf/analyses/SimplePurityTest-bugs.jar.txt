DefinedMethod(ObjectType(bugs/A),<init>,MethodDescriptor((): void),bugs.A{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/A),finalize,MethodDescriptor((): void),bugs.A{ public void finalize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/AbstractA),<init>,MethodDescriptor((): void),bugs.AbstractA{ public void <init>() }) => Pure
DefinedMethod(ObjectType(bugs/AbstractA),compareTo,MethodDescriptor((java.lang.Integer): int),bugs.AbstractA{ public int compareTo(java.lang.Integer) }) => Pure
DefinedMethod(ObjectType(bugs/AbstractA),compareTo,MethodDescriptor((java.lang.Object): int),bugs.AbstractA{ public int compareTo(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(bugs/AbstractA),equals,MethodDescriptor((bugs.SuperA): boolean),bugs.AbstractA{ public boolean equals(bugs.SuperA) }) => SideEffectFree
DefinedMethod(ObjectType(bugs/CloneNoSuperCloneCall),<init>,MethodDescriptor((): void),bugs.CloneNoSuperCloneCall{ public void <init>() }) => Pure
DefinedMethod(ObjectType(bugs/CloneNoSuperCloneCall),clone,MethodDescriptor((): java.lang.Object),bugs.CloneNoSuperCloneCall{ protected java.lang.Object clone() }) => SideEffectFree
DefinedMethod(ObjectType(bugs/CloneableNoClone),<init>,MethodDescriptor((): void),bugs.CloneableNoClone{ public void <init>() }) => Pure
DefinedMethod(ObjectType(bugs/SubA),<init>,MethodDescriptor((): void),bugs.SubA{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/SubA),finalize,MethodDescriptor((): void),bugs.SubA{ public void finalize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/SubCloneableNoClone),<init>,MethodDescriptor((): void),bugs.SubCloneableNoClone{ public void <init>() }) => Pure
DefinedMethod(ObjectType(bugs/SuperA),<init>,MethodDescriptor((int): void),bugs.SuperA{ public void <init>(int) }) => DPure
DefinedMethod(ObjectType(bugs/SuperA),finalize,MethodDescriptor((): void),bugs.SuperA{ public void finalize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/UselessCode),<init>,MethodDescriptor((): void),bugs.UselessCode{ public void <init>() }) => Pure
DefinedMethod(ObjectType(bugs/UselessCode),rangeCheck,MethodDescriptor((int): boolean),bugs.UselessCode{ public static boolean rangeCheck(int) }) => Pure
DefinedMethod(ObjectType(bugs/UselessCode),unusedInstance,MethodDescriptor((float, float): java.lang.Float),bugs.UselessCode{ public static java.lang.Float unusedInstance(float,float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(bugs/UselessCode),uselessComputation,MethodDescriptor((int): java.lang.Object),bugs.UselessCode{ public java.lang.Object uselessComputation(int) }) => Pure
DefinedMethod(ObjectType(bugs/UselessCode),uselessInstantiation,MethodDescriptor((int): java.lang.Object),bugs.UselessCode{ public java.lang.Object uselessInstantiation(int) }) => Pure
DefinedMethod(ObjectType(bugs/UselessCode),uselessMoreComplexTest,MethodDescriptor((int): java.lang.Object),bugs.UselessCode{ public java.lang.Object uselessMoreComplexTest(int) }) => Pure
DefinedMethod(ObjectType(bugs/UselessCode),uselessSimpleTest,MethodDescriptor((int): java.lang.Object),bugs.UselessCode{ public java.lang.Object uselessSimpleTest(int) }) => Pure

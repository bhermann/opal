DefinedMethod(ObjectType(tactest/ArithmeticExpressions),<init>,MethodDescriptor((): void),tactest.ArithmeticExpressions{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),directNegate,MethodDescriptor((boolean): boolean),tactest.ArithmeticExpressions{ boolean directNegate(boolean) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleAdd,MethodDescriptor((double, double): double),tactest.ArithmeticExpressions{ double doubleAdd(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleCmp,MethodDescriptor((double, double): boolean),tactest.ArithmeticExpressions{ boolean doubleCmp(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleDiv,MethodDescriptor((double, double): double),tactest.ArithmeticExpressions{ double doubleDiv(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleMul,MethodDescriptor((double, double): double),tactest.ArithmeticExpressions{ double doubleMul(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleNeg,MethodDescriptor((double): double),tactest.ArithmeticExpressions{ double doubleNeg(double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleRem,MethodDescriptor((double, double): double),tactest.ArithmeticExpressions{ double doubleRem(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleSub,MethodDescriptor((double, double): double),tactest.ArithmeticExpressions{ double doubleSub(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),doubleTest,MethodDescriptor((double, double): boolean),tactest.ArithmeticExpressions{ boolean doubleTest(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),embeddedNegate,MethodDescriptor((boolean): int),tactest.ArithmeticExpressions{ int embeddedNegate(boolean) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatAdd,MethodDescriptor((float, float): float),tactest.ArithmeticExpressions{ float floatAdd(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatCmp,MethodDescriptor((float, float): boolean),tactest.ArithmeticExpressions{ boolean floatCmp(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatDiv,MethodDescriptor((float, float): float),tactest.ArithmeticExpressions{ float floatDiv(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatMul,MethodDescriptor((float, float): float),tactest.ArithmeticExpressions{ float floatMul(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatNeg,MethodDescriptor((float): float),tactest.ArithmeticExpressions{ float floatNeg(float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatRem,MethodDescriptor((float, float): float),tactest.ArithmeticExpressions{ float floatRem(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),floatSub,MethodDescriptor((float, float): float),tactest.ArithmeticExpressions{ float floatSub(float,float) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),indirectNegate,MethodDescriptor((boolean): boolean),tactest.ArithmeticExpressions{ boolean indirectNegate(boolean) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerASh,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerASh(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerAdd,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerAdd(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerAnd,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerAnd(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerDiv,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerDiv(int,int) }) => DPure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerInc,MethodDescriptor((int): int),tactest.ArithmeticExpressions{ int integerInc(int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerMul,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerMul(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerNeg,MethodDescriptor((int): int),tactest.ArithmeticExpressions{ int integerNeg(int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerOr,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerOr(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerRem,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerRem(int,int) }) => DPure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerShL,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerShL(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerShR,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerShR(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerSub,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerSub(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerTest,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerTest(int,int) }) => DPure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),integerXOr,MethodDescriptor((int, int): int),tactest.ArithmeticExpressions{ int integerXOr(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longASh,MethodDescriptor((long, int): long),tactest.ArithmeticExpressions{ long longASh(long,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longAdd,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longAdd(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longAnd,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longAnd(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longDiv,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longDiv(long,long) }) => DPure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longMul,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longMul(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longNeg,MethodDescriptor((long): long),tactest.ArithmeticExpressions{ long longNeg(long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longOr,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longOr(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longRem,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longRem(long,long) }) => DPure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longShL,MethodDescriptor((long, int): long),tactest.ArithmeticExpressions{ long longShL(long,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longShR,MethodDescriptor((long, int): long),tactest.ArithmeticExpressions{ long longShR(long,int) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longSub,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longSub(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArithmeticExpressions),longXOr,MethodDescriptor((long, long): long),tactest.ArithmeticExpressions{ long longXOr(long,long) }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),<init>,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),byteArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void byteArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),charArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void charArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),doubleArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void doubleArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),floatArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void floatArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),intArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void intArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),longArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void longArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),multidimArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void multidimArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),refArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void refArray() }) => Pure
DefinedMethod(ObjectType(tactest/ArrayCreationAndManipulation),shortArray,MethodDescriptor((): void),tactest.ArrayCreationAndManipulation{ void shortArray() }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),<init>,MethodDescriptor((): void),tactest.CastInstructions{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),checkcast,MethodDescriptor((java.lang.Object): void),tactest.CastInstructions{ void checkcast(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(tactest/CastInstructions),d2f,MethodDescriptor((double): void),tactest.CastInstructions{ void d2f(double) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),d2i,MethodDescriptor((double): void),tactest.CastInstructions{ void d2i(double) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),d2l,MethodDescriptor((double): void),tactest.CastInstructions{ void d2l(double) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),f2d,MethodDescriptor((float): void),tactest.CastInstructions{ void f2d(float) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),f2i,MethodDescriptor((float): void),tactest.CastInstructions{ void f2i(float) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),f2l,MethodDescriptor((float): void),tactest.CastInstructions{ void f2l(float) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2b,MethodDescriptor((int): void),tactest.CastInstructions{ void i2b(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2c,MethodDescriptor((int): void),tactest.CastInstructions{ void i2c(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2d,MethodDescriptor((int): void),tactest.CastInstructions{ void i2d(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2f,MethodDescriptor((int): void),tactest.CastInstructions{ void i2f(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2l,MethodDescriptor((int): void),tactest.CastInstructions{ void i2l(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),i2s,MethodDescriptor((int): void),tactest.CastInstructions{ void i2s(int) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),l2d,MethodDescriptor((long): void),tactest.CastInstructions{ void l2d(long) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),l2f,MethodDescriptor((long): void),tactest.CastInstructions{ void l2f(long) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),l2i,MethodDescriptor((long): void),tactest.CastInstructions{ void l2i(long) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),typecheckList,MethodDescriptor((java.util.ArrayList): void),tactest.CastInstructions{ void typecheckList(java.util.ArrayList) }) => Pure
DefinedMethod(ObjectType(tactest/CastInstructions),typecheckString,MethodDescriptor((java.lang.String): void),tactest.CastInstructions{ void typecheckString(java.lang.String) }) => Pure
DefinedMethod(ObjectType(tactest/Constants),<init>,MethodDescriptor((): void),tactest.Constants{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),doubleConsts,MethodDescriptor((): void),tactest.Constants{ void doubleConsts() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),floatConsts,MethodDescriptor((): void),tactest.Constants{ void floatConsts() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),intConsts,MethodDescriptor((): void),tactest.Constants{ void intConsts() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),loadConstants,MethodDescriptor((): void),tactest.Constants{ void loadConstants() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),longConsts,MethodDescriptor((): void),tactest.Constants{ void longConsts() }) => Pure
DefinedMethod(ObjectType(tactest/Constants),nullReferenceConst,MethodDescriptor((): void),tactest.Constants{ void nullReferenceConst() }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),<init>,MethodDescriptor((): void),tactest.ControlSequences{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmpeq,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmpeq(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmpge,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmpge(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmpgt,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmpgt(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmple,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmple(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmplt,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmplt(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),icmpne,MethodDescriptor((int, int): int),tactest.ControlSequences{ int icmpne(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifTest,MethodDescriptor((int, int): int),tactest.ControlSequences{ int ifTest(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifacmpeq,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),tactest.ControlSequences{ java.lang.Object ifacmpeq(java.lang.Object,java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(tactest/ControlSequences),ifacmpne,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),tactest.ControlSequences{ java.lang.Object ifacmpne(java.lang.Object,java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(tactest/ControlSequences),ifeq,MethodDescriptor((int): int),tactest.ControlSequences{ int ifeq(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifge,MethodDescriptor((int): int),tactest.ControlSequences{ int ifge(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifgt,MethodDescriptor((int): int),tactest.ControlSequences{ int ifgt(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifle,MethodDescriptor((int): int),tactest.ControlSequences{ int ifle(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),iflt,MethodDescriptor((int): int),tactest.ControlSequences{ int iflt(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifne,MethodDescriptor((int): int),tactest.ControlSequences{ int ifne(int) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifnonnull,MethodDescriptor((java.lang.Object): java.lang.Object),tactest.ControlSequences{ java.lang.Object ifnonnull(java.lang.Object) }) => Pure
DefinedMethod(ObjectType(tactest/ControlSequences),ifnull,MethodDescriptor((java.lang.Object): java.lang.Object),tactest.ControlSequences{ java.lang.Object ifnull(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(tactest/MethodCalls),<init>,MethodDescriptor((): void),tactest.MethodCalls{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/MethodCalls),bar,MethodDescriptor((tactest.X, tactest.Y): java.lang.Object),tactest.MethodCalls{ public java.lang.Object bar(tactest.X,tactest.Y) }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/MethodCalls),barVarargs,MethodDescriptor((java.lang.Object[]): java.lang.Object),tactest.MethodCalls{ public java.lang.Object barVarargs(java.lang.Object[]) }) => SideEffectFree
DefinedMethod(ObjectType(tactest/MethodCalls),foo,MethodDescriptor((): void),tactest.MethodCalls{ public void foo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/MethodCalls),fooVarargs,MethodDescriptor((): void),tactest.MethodCalls{ public void fooVarargs() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/MethodSignatures),<init>,MethodDescriptor((): void),tactest.MethodSignatures{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),empty,MethodDescriptor((): void),tactest.MethodSignatures{ static void empty() }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeDoubleDouble,MethodDescriptor((double, double): void),tactest.MethodSignatures{ void iTakeDoubleDouble(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeDoubleDoubleInt,MethodDescriptor((double, double, int): void),tactest.MethodSignatures{ void iTakeDoubleDoubleInt(double,double,int) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeDoubleInt,MethodDescriptor((double, int): double),tactest.MethodSignatures{ double iTakeDoubleInt(double,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeDoubleIntDouble,MethodDescriptor((double, int, double): void),tactest.MethodSignatures{ void iTakeDoubleIntDouble(double,int,double) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeInt,MethodDescriptor((int): void),tactest.MethodSignatures{ void iTakeInt(int) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),iTakeIntDoubleDouble,MethodDescriptor((int, double, double): void),tactest.MethodSignatures{ void iTakeIntDoubleDouble(int,double,double) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeDoubleDouble,MethodDescriptor((double, double): double),tactest.MethodSignatures{ static double sTakeDoubleDouble(double,double) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeDoubleDoubleInt,MethodDescriptor((double, double, int): void),tactest.MethodSignatures{ static void sTakeDoubleDoubleInt(double,double,int) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeDoubleInt,MethodDescriptor((double, int): double),tactest.MethodSignatures{ static double sTakeDoubleInt(double,int) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeDoubleIntDouble,MethodDescriptor((double, int, double): void),tactest.MethodSignatures{ static void sTakeDoubleIntDouble(double,int,double) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeInt,MethodDescriptor((int): void),tactest.MethodSignatures{ static void sTakeInt(int) }) => Pure
DefinedMethod(ObjectType(tactest/MethodSignatures),sTakeIntDoubleDouble,MethodDescriptor((int, double, double): void),tactest.MethodSignatures{ static void sTakeIntDoubleDouble(int,double,double) }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),<init>,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),dup,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void dup() }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),invokeInterface,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void invokeInterface() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),invokeStatic,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void invokeStatic() }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),monitorEnterAndExit,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void monitorEnterAndExit() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),pop,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void pop() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),pop2case2,MethodDescriptor((): void),tactest.StackManipulationAndSynchronization{ void pop2case2() }) => ImpureByAnalysis
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),returnDouble,MethodDescriptor((): double),tactest.StackManipulationAndSynchronization{ double returnDouble() }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),returnInt,MethodDescriptor((): int),tactest.StackManipulationAndSynchronization{ int returnInt() }) => Pure
DefinedMethod(ObjectType(tactest/StackManipulationAndSynchronization),staticMethod,MethodDescriptor((int, int): int),tactest.StackManipulationAndSynchronization{ static int staticMethod(int,int) }) => Pure
DefinedMethod(ObjectType(tactest/SwitchStatements),<init>,MethodDescriptor((): void),tactest.SwitchStatements{ public void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/SwitchStatements),lookupSwitch,MethodDescriptor((int): int),tactest.SwitchStatements{ int lookupSwitch(int) }) => Pure
DefinedMethod(ObjectType(tactest/SwitchStatements),tableSwitch,MethodDescriptor((int): int),tactest.SwitchStatements{ int tableSwitch(int) }) => Pure
DefinedMethod(ObjectType(tactest/X),<init>,MethodDescriptor((): void),tactest.X{ void <init>() }) => Pure
DefinedMethod(ObjectType(tactest/Y),<init>,MethodDescriptor((): void),tactest.Y{ void <init>() }) => Pure

DefinedMethod(ObjectType(de/tud/cs/st/OpalSuite),<init>,MethodDescriptor((): void),de.tud.cs.st.OpalSuite{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.RegressionSuite): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public void <init>(de.tud.cs.st.bat.RegressionSuite) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),apply,MethodDescriptor((java.io.File): boolean),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public boolean apply(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.RegressionSuite, scala.runtime.ObjectRef): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public void <init>(de.tud.cs.st.bat.RegressionSuite,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),apply,MethodDescriptor((java.io.File): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public void apply(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.RegressionSuite): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public void <init>(de.tud.cs.st.bat.RegressionSuite) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),apply,MethodDescriptor((scala.collection.immutable.Set, java.lang.String): scala.collection.immutable.Set),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public scala.collection.immutable.Set apply(scala.collection.immutable.Set,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$1),<init>,MethodDescriptor((de.tud.cs.st.bat.RegressionSuite, java.util.zip.ZipFile, java.util.zip.ZipEntry): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$1{ public void <init>(de.tud.cs.st.bat.RegressionSuite,java.util.zip.ZipFile,java.util.zip.ZipEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$1),apply,MethodDescriptor((): java.io.InputStream),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$1{ public java.io.InputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$2),<init>,MethodDescriptor((de.tud.cs.st.bat.RegressionSuite, java.util.zip.ZipFile, java.util.zip.ZipEntry): void),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$2{ public void <init>(de.tud.cs.st.bat.RegressionSuite,java.util.zip.ZipFile,java.util.zip.ZipEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$2),apply,MethodDescriptor((): java.io.InputStream),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$2{ public java.io.InputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite$$anonfun$runTest$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite$$anonfun$runTest$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.RegressionSuite{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.RegressionSuite{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),asSeconds,MethodDescriptor((long, long): double),de.tud.cs.st.bat.RegressionSuite{ public double asSeconds(long,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),assert,MethodDescriptor((boolean): void),de.tud.cs.st.bat.RegressionSuite{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.bat.RegressionSuite{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.bat.RegressionSuite{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.bat.RegressionSuite{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.bat.RegressionSuite{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),execute,MethodDescriptor((): void),de.tud.cs.st.bat.RegressionSuite{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.RegressionSuite{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.RegressionSuite{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.RegressionSuite{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.RegressionSuite{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.bat.RegressionSuite{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.bat.RegressionSuite{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.bat.RegressionSuite{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.RegressionSuite{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.RegressionSuite{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.RegressionSuite{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.RegressionSuite{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.bat.RegressionSuite{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.bat.RegressionSuite{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.bat.RegressionSuite{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),nanoSecondsToMilliseconds,MethodDescriptor((double): double),de.tud.cs.st.bat.RegressionSuite{ public double nanoSecondsToMilliseconds(double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),nanoSecondsToSeconds,MethodDescriptor((double): double),de.tud.cs.st.bat.RegressionSuite{ public double nanoSecondsToSeconds(double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.bat.RegressionSuite{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.RegressionSuite{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.RegressionSuite{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.RegressionSuite{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.RegressionSuite{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.bat.RegressionSuite{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.bat.RegressionSuite{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.RegressionSuite{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),testCases,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.RegressionSuite{ private scala.collection.immutable.Map testCases() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.bat.RegressionSuite{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),time,MethodDescriptor((scala.Function1, scala.Function0): java.lang.Object),de.tud.cs.st.bat.RegressionSuite{ public java.lang.Object time(scala.Function1,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/RegressionSuite),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.bat.RegressionSuite{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader): void),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader): void),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationDefault_attributeReader$class),de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.AnnotationDefault_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$$anonfun$Annotations$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AnnotationsReader$$anonfun$Annotations$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$$anonfun$Annotations$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.AnnotationsReader$$anonfun$Annotations$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AnnotationsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$$anonfun$Annotations$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.AnnotationsReader$$anonfun$Annotations$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$$anonfun$Annotations$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AnnotationsReader$$anonfun$Annotations$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationsReader): void),de.tud.cs.st.bat.generic.reader.AnnotationsReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.AnnotationsReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$class),Annotation,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationsReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.AnnotationsReader$class{ public static java.lang.Object Annotation(de.tud.cs.st.bat.generic.reader.AnnotationsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AnnotationsReader$class),Annotations,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AnnotationsReader, java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.AnnotationsReader$class{ public static scala.RandomAccessSeq Annotations(de.tud.cs.st.bat.generic.reader.AnnotationsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader, java.io.DataInputStream, scala.RandomAccessSeq): void),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AttributesReader,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1): void),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),apply,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public java.lang.Object apply(java.io.DataInputStream,scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader): void),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AttributesReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),apply,MethodDescriptor((): scala.Function3),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public scala.Function3 apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),de$tud$cs$st$bat$generic$reader$AttributesReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.AttributesReader),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public de.tud.cs.st.bat.generic.reader.AttributesReader de$tud$cs$st$bat$generic$reader$AttributesReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attribute$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attribute$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader): void),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public void <init>(de.tud.cs.st.bat.generic.reader.AttributesReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),apply,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public boolean apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$$anonfun$Attributes$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.AttributesReader$$anonfun$Attributes$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader): void),de.tud.cs.st.bat.generic.reader.AttributesReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.AttributesReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$class),Attribute,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader, java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.generic.reader.AttributesReader$class{ public static java.lang.Object Attribute(de.tud.cs.st.bat.generic.reader.AttributesReader,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$class),Attributes,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader, java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.generic.reader.AttributesReader$class{ public static scala.Seq Attributes(de.tud.cs.st.bat.generic.reader.AttributesReader,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$class),reflMethod$Method1,MethodDescriptor((java.lang.Class): java.lang.reflect.Method),de.tud.cs.st.bat.generic.reader.AttributesReader$class{ public static java.lang.reflect.Method reflMethod$Method1(java.lang.Class) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/AttributesReader$class),register,MethodDescriptor((de.tud.cs.st.bat.generic.reader.AttributesReader, scala.Tuple2): void),de.tud.cs.st.bat.generic.reader.AttributesReader$class{ public static void register(de.tud.cs.st.bat.generic.reader.AttributesReader,scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ClassFileReader$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ClassFileReader, java.io.DataInputStream): void),de.tud.cs.st.bat.generic.reader.ClassFileReader$$anonfun$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ClassFileReader,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$$anonfun$1),apply,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ClassFileReader$$anonfun$1{ public int apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.ClassFileReader$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ClassFileReader$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ClassFileReader): void),de.tud.cs.st.bat.generic.reader.ClassFileReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.ClassFileReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$class),ClassFile,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ClassFileReader, java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.ClassFileReader$class{ public static java.lang.Object ClassFile(de.tud.cs.st.bat.generic.reader.ClassFileReader,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ClassFileReader$class),ClassFile,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ClassFileReader, scala.Function0): java.lang.Object),de.tud.cs.st.bat.generic.reader.ClassFileReader$class{ public static java.lang.Object ClassFile(de.tud.cs.st.bat.generic.reader.ClassFileReader,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/CodeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.CodeReader): void),de.tud.cs.st.bat.generic.reader.CodeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.CodeReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/CodeReader$class),Code,MethodDescriptor((de.tud.cs.st.bat.generic.reader.CodeReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.CodeReader$class{ public static java.lang.Object Code(de.tud.cs.st.bat.generic.reader.CodeReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Code_attributeReader): void),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Code_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$Code_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.Code_attributeReader),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.Code_attributeReader de$tud$cs$st$bat$generic$reader$Code_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Code_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Code_attributeReader): void),de.tud.cs.st.bat.generic.reader.Code_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Code_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Code_attributeReader$class),de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Code_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.Code_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.Code_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader): void),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader): void),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ConstantValue_attributeReader$class),de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.ConstantValue_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$10),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$10{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$11),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$11{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public void <init>(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),apply,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public java.lang.Object apply(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$$anonfun$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$$anonfun$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader): void),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Constant_PoolReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Constant_PoolReader$class),Constant_Pool,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Constant_PoolReader, java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.Constant_PoolReader$class{ public static scala.RandomAccessSeq Constant_Pool(de.tud.cs.st.bat.generic.reader.Constant_PoolReader,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader): void),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader): void),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Deprecated_attributeReader$class),de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader(de.tud.cs.st.bat.generic.reader.Deprecated_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValue$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValue$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValue$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValue$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValue$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValue$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValue$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValue$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValuePairs$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValuePairs$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValuePairs$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValuePairs$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValuePairs$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValuePairs$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$$anonfun$ElementValuePairs$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$$anonfun$ElementValuePairs$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader): void),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$class),ElementValue,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$class{ public static java.lang.Object ElementValue(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$class),ElementValuePair,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$class{ public static java.lang.Object ElementValuePair(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ElementValuePairsReader$class),ElementValuePairs,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ElementValuePairsReader, java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.ElementValuePairsReader$class{ public static scala.RandomAccessSeq ElementValuePairs(de.tud.cs.st.bat.generic.reader.ElementValuePairsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader): void),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader): void),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/EnclosingMethod_attributeReader$class),de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.EnclosingMethod_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1, java.io.DataInputStream): void),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1{ public int apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader): void),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader): void),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Exceptions_attributeReader$class),de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.Exceptions_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$$anonfun$Fields$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.FieldsReader$$anonfun$Fields$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$$anonfun$Fields$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.FieldsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.FieldsReader$$anonfun$Fields$1{ public void <init>(de.tud.cs.st.bat.generic.reader.FieldsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$$anonfun$Fields$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.FieldsReader$$anonfun$Fields$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$$anonfun$Fields$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.FieldsReader$$anonfun$Fields$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.FieldsReader): void),de.tud.cs.st.bat.generic.reader.FieldsReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.FieldsReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$class),Fields,MethodDescriptor((de.tud.cs.st.bat.generic.reader.FieldsReader, java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.FieldsReader$class{ public static scala.RandomAccessSeq Fields(de.tud.cs.st.bat.generic.reader.FieldsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/FieldsReader$class),de$tud$cs$st$bat$generic$reader$FieldsReader$$Field_Info,MethodDescriptor((de.tud.cs.st.bat.generic.reader.FieldsReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.FieldsReader$class{ public static java.lang.Object de$tud$cs$st$bat$generic$reader$FieldsReader$$Field_Info(de.tud.cs.st.bat.generic.reader.FieldsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader): void),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader): void),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/InnerClasses_attributeReader$class),de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.InnerClasses_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LineNumberTable_attributeReader$class),de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.LineNumberTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTable_attributeReader$class),de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.LocalVariableTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/LocalVariableTypeTable_attributeReader$class),de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.LocalVariableTypeTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$$anonfun$Methods$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.MethodsReader$$anonfun$Methods$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$$anonfun$Methods$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.MethodsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.MethodsReader$$anonfun$Methods$1{ public void <init>(de.tud.cs.st.bat.generic.reader.MethodsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$$anonfun$Methods$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.MethodsReader$$anonfun$Methods$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$$anonfun$Methods$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.MethodsReader$$anonfun$Methods$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.MethodsReader): void),de.tud.cs.st.bat.generic.reader.MethodsReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.MethodsReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$class),Methods,MethodDescriptor((de.tud.cs.st.bat.generic.reader.MethodsReader, java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.MethodsReader$class{ public static scala.RandomAccessSeq Methods(de.tud.cs.st.bat.generic.reader.MethodsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/MethodsReader$class),de$tud$cs$st$bat$generic$reader$MethodsReader$$Method_Info,MethodDescriptor((de.tud.cs.st.bat.generic.reader.MethodsReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.MethodsReader$class{ public static java.lang.Object de$tud$cs$st$bat$generic$reader$MethodsReader$$Method_Info(de.tud.cs.st.bat.generic.reader.MethodsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1): void),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public void <init>(de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),apply,MethodDescriptor((): scala.runtime.BoxedArray),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public scala.runtime.BoxedArray apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),de$tud$cs$st$bat$generic$reader$ParameterAnnotationsReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader de$tud$cs$st$bat$generic$reader$ParameterAnnotationsReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$$anonfun$ParameterAnnotations$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader): void),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/ParameterAnnotationsReader$class),ParameterAnnotations,MethodDescriptor((de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader, java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader$class{ public static scala.RandomAccessSeq ParameterAnnotations(de.tud.cs.st.bat.generic.reader.ParameterAnnotationsReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleAnnotations_attributeReader$class),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeInvisibleParameterAnnotations_attributeReader$class),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.RuntimeInvisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleAnnotations_attributeReader$class),de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.RuntimeVisibleAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader): void),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/RuntimeVisibleParameterAnnotations_attributeReader$class),de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.RuntimeVisibleParameterAnnotations_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Signature_attributeReader): void),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Signature_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Signature_attributeReader): void),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Signature_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Signature_attributeReader$class),de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Signature_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.Signature_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.Signature_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SkipUnknown_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader): void),de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SkipUnknown_attributeReader$class),Unknown_attribute,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader, java.io.DataInputStream, java.lang.Object, int): scala.runtime.Null$),de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader$class{ public static scala.runtime.Null$ Unknown_attribute(de.tud.cs.st.bat.generic.reader.SkipUnknown_attributeReader,java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader): void),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader): void),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceDebugExtension_attributeReader$class),de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.SourceDebugExtension_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader): void),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader): void),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/SourceFile_attributeReader$class),de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.SourceFile_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$1{ public void <init>(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$2),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$2{ public void <init>(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$3),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$3{ public void <init>(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$$anonfun$StackMapFrame$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$$anonfun$StackMapFrame$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader): void),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.StackMapFrameReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),StackMapFrame,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ public static java.lang.Object StackMapFrame(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),gd1$1,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, int): boolean),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ private static boolean gd1$1(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,int) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),gd2$1,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, int): boolean),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ private static boolean gd2$1(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,int) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),gd3$1,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, int): boolean),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ private static boolean gd3$1(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,int) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),gd4$1,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, int): boolean),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ private static boolean gd4$1(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,int) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapFrameReader$class),gd5$1,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapFrameReader, int): boolean),de.tud.cs.st.bat.generic.reader.StackMapFrameReader$class{ private static boolean gd5$1(de.tud.cs.st.bat.generic.reader.StackMapFrameReader,int) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1, java.io.DataInputStream, java.lang.Object): void),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader): void),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/StackMapTable_attributeReader$class),de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.StackMapTable_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader): void),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public void <init>(de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$$anonfun$de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader): void),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Synthetic_attributeReader$class),de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader): scala.Tuple2),de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader$class{ public static scala.Tuple2 de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader(de.tud.cs.st.bat.generic.reader.Synthetic_attributeReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Unknown_attributeReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Unknown_attributeReader): void),de.tud.cs.st.bat.generic.reader.Unknown_attributeReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.Unknown_attributeReader) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/Unknown_attributeReader$class),Unknown_attribute,MethodDescriptor((de.tud.cs.st.bat.generic.reader.Unknown_attributeReader, java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.generic.reader.Unknown_attributeReader$class{ public static java.lang.Object Unknown_attribute(de.tud.cs.st.bat.generic.reader.Unknown_attributeReader,java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),<init>,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public void <init>(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),apply,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public java.lang.Object apply(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$$anonfun$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$$anonfun$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$class),$init$,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader): void),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$class{ public static void $init$(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/generic/reader/VerificationTypeInfoReader$class),VerificationTypeInfo,MethodDescriptor((de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader, java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader$class{ public static java.lang.Object VerificationTypeInfo(de.tud.cs.st.bat.generic.reader.VerificationTypeInfoReader,java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ABSTRACT${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ABSTRACT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ABSTRACT{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ANNOTATION${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ANNOTATION),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ANNOTATION{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_BRIDGE${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_BRIDGE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_BRIDGE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_BRIDGE${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_BRIDGE${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_BRIDGE${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_BRIDGE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_BRIDGE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_BRIDGE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_BRIDGE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_BRIDGE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_BRIDGE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ENUM${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ENUM${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_ENUM${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ENUM${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ENUM${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_ENUM${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ENUM${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ENUM${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_ENUM${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ENUM${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ENUM{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_ENUM{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_ENUM{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_ENUM{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_ENUM{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_ENUM),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_ENUM{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_FINAL${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_FINAL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_FINAL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_FINAL${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_FINAL${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_FINAL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_FINAL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_FINAL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_FINAL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_FINAL{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_FINAL{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_FINAL{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_FINAL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_FINAL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_FINAL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_FINAL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_INTERFACE${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_INTERFACE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_INTERFACE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_INTERFACE${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_INTERFACE${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_INTERFACE${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_INTERFACE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_INTERFACE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_INTERFACE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_INTERFACE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_INTERFACE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_INTERFACE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_NATIVE${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_NATIVE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_NATIVE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_NATIVE${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_NATIVE${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_NATIVE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_NATIVE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_NATIVE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_NATIVE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_NATIVE{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_NATIVE{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_NATIVE{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_NATIVE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_NATIVE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_NATIVE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_NATIVE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PRIVATE${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PRIVATE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PRIVATE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PRIVATE${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PRIVATE${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PRIVATE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PRIVATE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_PRIVATE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PRIVATE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PRIVATE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PRIVATE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PROTECTED${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PROTECTED${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PROTECTED${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PROTECTED${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PROTECTED${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PROTECTED${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PROTECTED${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_PROTECTED${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PROTECTED${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PROTECTED),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PROTECTED{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PUBLIC${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PUBLIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_PUBLIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PUBLIC${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PUBLIC${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PUBLIC${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PUBLIC${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_PUBLIC${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PUBLIC${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_PUBLIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_PUBLIC{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STATIC${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_STATIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_STATIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STATIC${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STATIC${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_STATIC${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STATIC${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_STATIC${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STATIC${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STATIC{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STATIC{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STATIC{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STATIC{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_STATIC{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STATIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STATIC{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STRICT${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_STRICT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_STRICT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STRICT${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STRICT${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_STRICT${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STRICT${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_STRICT${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STRICT${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STRICT{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_STRICT{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STRICT{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_STRICT{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_STRICT{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_STRICT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_STRICT{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SUPER${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SUPER${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SUPER${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SUPER${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SUPER${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_SUPER${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SUPER${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SUPER${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_SUPER${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SUPER${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SUPER{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SUPER{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_SUPER{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SUPER{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SUPER{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SUPER),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SUPER{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNCHRONIZED),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNCHRONIZED{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNTHETIC${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_SYNTHETIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_SYNTHETIC{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_TRANSIENT${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_TRANSIENT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_TRANSIENT{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VARARGS${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_VARARGS${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_VARARGS${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VARARGS${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VARARGS${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_VARARGS${ public scala.runtime.Null$ javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_VARARGS${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VARARGS${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_VARARGS${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VARARGS${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VARARGS{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VARARGS{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),javaName,MethodDescriptor((): scala.runtime.Null$),de.tud.cs.st.bat.native.ACC_VARARGS{ public static scala.runtime.Null$ javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VARARGS{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_VARARGS{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VARARGS),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VARARGS{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VOLATILE${ public boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_VOLATILE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ACC_VOLATILE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VOLATILE${ public boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VOLATILE${ public java.lang.String javaName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE${ public int mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_VOLATILE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VOLATILE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.ACC_VOLATILE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VOLATILE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),$u2208,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static boolean $u2208(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),element_of,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static boolean element_of(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),javaName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static java.lang.String javaName() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),mask,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static int mask() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ACC_VOLATILE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ACC_VOLATILE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlag$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag): void),de.tud.cs.st.bat.native.AccessFlag$class{ public static void $init$(de.tud.cs.st.bat.native.AccessFlag) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlag$class),$u2208,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag, int): boolean),de.tud.cs.st.bat.native.AccessFlag$class{ public static boolean $u2208(de.tud.cs.st.bat.native.AccessFlag,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlag$class),element_of,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag, int): boolean),de.tud.cs.st.bat.native.AccessFlag$class{ public static boolean element_of(de.tud.cs.st.bat.native.AccessFlag,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag): scala.xml.Elem),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.native.AccessFlag) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.AccessFlags$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlags${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlags${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlags${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags$),toXML,MethodDescriptor((int, scala.Enumeration$Value): scala.xml.Elem),de.tud.cs.st.bat.native.AccessFlags${ public scala.xml.Elem toXML(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlags{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlags),toXML,MethodDescriptor((int, scala.Enumeration$Value): scala.xml.Elem),de.tud.cs.st.bat.native.AccessFlags{ public static scala.xml.Elem toXML(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlagsContext${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlagsContext${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),CLASS,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.Enumeration$Value CLASS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),CLASS_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq CLASS_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),CLASS_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq CLASS_VISIBILITY_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),FIELD,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.Enumeration$Value FIELD() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),FIELD_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq FIELD_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),FIELD_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq FIELD_VISIBILITY_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),INNER_CLASS,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.Enumeration$Value INNER_CLASS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),INNER_CLASS_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq INNER_CLASS_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),INNER_CLASS_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq INNER_CLASS_VISIBILITY_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),MEMBER_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq MEMBER_VISIBILITY_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),METHOD,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.Enumeration$Value METHOD() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),METHOD_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq METHOD_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext$),METHOD_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext${ public scala.RandomAccessSeq METHOD_VISIBILITY_FLAGS() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsContext{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),CLASS,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Value CLASS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),CLASS_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq CLASS_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),CLASS_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq CLASS_VISIBILITY_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),FIELD,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Value FIELD() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),FIELD_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq FIELD_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),FIELD_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq FIELD_VISIBILITY_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),INNER_CLASS,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Value INNER_CLASS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),INNER_CLASS_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq INNER_CLASS_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),INNER_CLASS_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq INNER_CLASS_VISIBILITY_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),MEMBER_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq MEMBER_VISIBILITY_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),METHOD,MethodDescriptor((): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Value METHOD() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),METHOD_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq METHOD_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),METHOD_VISIBILITY_FLAGS,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.RandomAccessSeq METHOD_VISIBILITY_FLAGS() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),Set32,MethodDescriptor((): scala.Enumeration$Set32),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Set32 Set32() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),Set32,MethodDescriptor((int): scala.Enumeration$Set32),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Set32 Set32(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),Set64,MethodDescriptor((): scala.Enumeration$Set64),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Set64 Set64() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),Set64,MethodDescriptor((long): scala.Enumeration$Set64),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Set64 Set64(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),apply,MethodDescriptor((int): scala.Enumeration$Value),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Enumeration$Value apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),elements,MethodDescriptor((): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Iterator elements() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),exists,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.bat.native.AccessFlagsContext{ public static boolean exists(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),filter,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Iterator filter(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),flatMap,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Iterator flatMap(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),forall,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.bat.native.AccessFlagsContext{ public static boolean forall(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.bat.native.AccessFlagsContext{ public static void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),map,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Iterator map(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),maskToBit,MethodDescriptor((long): int),de.tud.cs.st.bat.native.AccessFlagsContext{ public static int maskToBit(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),maxId,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsContext{ public static int maxId() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.AccessFlagsContext{ public static java.lang.String name() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsContext),valueOf,MethodDescriptor((java.lang.String): scala.Option),de.tud.cs.st.bat.native.AccessFlagsContext{ public static scala.Option valueOf(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsIterator${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlagsIterator${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AccessFlagsIterator${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator$),apply,MethodDescriptor((int, scala.Enumeration$Value): de.tud.cs.st.bat.native.AccessFlagsIterator),de.tud.cs.st.bat.native.AccessFlagsIterator${ public de.tud.cs.st.bat.native.AccessFlagsIterator apply(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),$colon$bslash,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object $colon$bslash(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),$div$colon,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object $div$colon(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),$plus$plus,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object $plus$plus(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsIterator{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),<init>,MethodDescriptor((int, scala.Enumeration$Value): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void <init>(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),addString,MethodDescriptor((scala.StringBuilder, java.lang.String, java.lang.String, java.lang.String): scala.StringBuilder),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.StringBuilder addString(scala.StringBuilder,java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),append,MethodDescriptor((scala.Iterator): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object append(scala.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),buffered,MethodDescriptor((): scala.BufferedIterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.BufferedIterator buffered() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),collect,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Seq collect() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),contains,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.AccessFlagsIterator{ public boolean contains(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),copyToArray,MethodDescriptor((scala.runtime.BoxedArray, int): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void copyToArray(scala.runtime.BoxedArray,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),copyToBuffer,MethodDescriptor((scala.collection.mutable.Buffer): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void copyToBuffer(scala.collection.mutable.Buffer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),counted,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object counted() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),drop,MethodDescriptor((int): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator drop(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),dropWhile,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator dropWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),duplicate,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Tuple2 duplicate() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),exists,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.bat.native.AccessFlagsIterator{ public boolean exists(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),filter,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator filter(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),find,MethodDescriptor((scala.Function1): scala.Option),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Option find(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),findIndexOf,MethodDescriptor((scala.Function1): int),de.tud.cs.st.bat.native.AccessFlagsIterator{ public int findIndexOf(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),flags,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsIterator{ private int flags() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),flags_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ private void flags_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),flatMap,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator flatMap(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),foldLeft,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object foldLeft(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),foldRight,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object foldRight(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),forall,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.bat.native.AccessFlagsIterator{ public boolean forall(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),hasNext,MethodDescriptor((): boolean),de.tud.cs.st.bat.native.AccessFlagsIterator{ public boolean hasNext() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),index,MethodDescriptor((): int),de.tud.cs.st.bat.native.AccessFlagsIterator{ private int index() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),indexOf,MethodDescriptor((java.lang.Object): int),de.tud.cs.st.bat.native.AccessFlagsIterator{ public int indexOf(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),index_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ private void index_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),map,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator map(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),mkString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.String mkString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),mkString,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.String mkString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),mkString,MethodDescriptor((java.lang.String, java.lang.String, java.lang.String): java.lang.String),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.String mkString(java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),next,MethodDescriptor((): de.tud.cs.st.bat.native.AccessFlag),de.tud.cs.st.bat.native.AccessFlagsIterator{ public de.tud.cs.st.bat.native.AccessFlag next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),next,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),potentialAccessFlags,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.AccessFlagsIterator{ private scala.RandomAccessSeq potentialAccessFlags() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),readInto,MethodDescriptor((scala.runtime.BoxedArray): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void readInto(scala.runtime.BoxedArray) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),readInto,MethodDescriptor((scala.runtime.BoxedArray, int): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void readInto(scala.runtime.BoxedArray,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),readInto,MethodDescriptor((scala.runtime.BoxedArray, int, int): void),de.tud.cs.st.bat.native.AccessFlagsIterator{ public void readInto(scala.runtime.BoxedArray,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),reduceLeft,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object reduceLeft(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),reduceRight,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object reduceRight(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),slice,MethodDescriptor((int, int): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator slice(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),take,MethodDescriptor((int): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator take(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),takeWhile,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.Iterator takeWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),toList,MethodDescriptor((): scala.List),de.tud.cs.st.bat.native.AccessFlagsIterator{ public scala.List toList() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),zip,MethodDescriptor((scala.Iterator): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object zip(scala.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AccessFlagsIterator),zipWithIndex,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.AccessFlagsIterator{ public java.lang.Object zipWithIndex() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AnnotationDefault_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AnnotationDefault_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AnnotationDefault_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.AnnotationDefault_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.AnnotationDefault_attribute): void),de.tud.cs.st.bat.native.AnnotationDefault_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.AnnotationDefault_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationDefault_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.AnnotationDefault_attribute): java.lang.String),de.tud.cs.st.bat.native.AnnotationDefault_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.AnnotationDefault_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.AnnotationValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AnnotationValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.AnnotationValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AnnotationValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.AnnotationValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/AppendFrame$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.AppendFrame): void),de.tud.cs.st.bat.native.AppendFrame$class{ public static void $init$(de.tud.cs.st.bat.native.AppendFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ArrayValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ArrayValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ArrayValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ArrayValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ArrayValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ArrayValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ArrayValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.ArrayValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/BooleanValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.BooleanValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/BooleanValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.BooleanValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/BooleanValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.BooleanValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/BooleanValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.BooleanValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ByteValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ByteValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ByteValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ByteValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ByteValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ByteValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ByteValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.ByteValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Class_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Class_info): void),de.tud.cs.st.bat.native.CONSTANT_Class_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Class_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Class_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Class_info): int),de.tud.cs.st.bat.native.CONSTANT_Class_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Class_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Double_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Double_info): void),de.tud.cs.st.bat.native.CONSTANT_Double_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Double_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Double_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Double_info): int),de.tud.cs.st.bat.native.CONSTANT_Double_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Double_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Fieldref_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Fieldref_info): void),de.tud.cs.st.bat.native.CONSTANT_Fieldref_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Fieldref_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Fieldref_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Fieldref_info): int),de.tud.cs.st.bat.native.CONSTANT_Fieldref_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Fieldref_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Float_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Float_info): void),de.tud.cs.st.bat.native.CONSTANT_Float_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Float_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Float_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Float_info): int),de.tud.cs.st.bat.native.CONSTANT_Float_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Float_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Integer_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Integer_info): void),de.tud.cs.st.bat.native.CONSTANT_Integer_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Integer_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Integer_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Integer_info): int),de.tud.cs.st.bat.native.CONSTANT_Integer_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Integer_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_InterfaceMethodref_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info): void),de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_InterfaceMethodref_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info): int),de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_InterfaceMethodref_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Long_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Long_info): void),de.tud.cs.st.bat.native.CONSTANT_Long_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Long_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Long_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Long_info): int),de.tud.cs.st.bat.native.CONSTANT_Long_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Long_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Methodref_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Methodref_info): void),de.tud.cs.st.bat.native.CONSTANT_Methodref_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Methodref_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Methodref_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Methodref_info): int),de.tud.cs.st.bat.native.CONSTANT_Methodref_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Methodref_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_NameAndType_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_NameAndType_info): void),de.tud.cs.st.bat.native.CONSTANT_NameAndType_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_NameAndType_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_NameAndType_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_NameAndType_info): int),de.tud.cs.st.bat.native.CONSTANT_NameAndType_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_NameAndType_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_String_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_String_info): void),de.tud.cs.st.bat.native.CONSTANT_String_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_String_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_String_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_String_info): int),de.tud.cs.st.bat.native.CONSTANT_String_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_String_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Utf8_info$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Utf8_info): void),de.tud.cs.st.bat.native.CONSTANT_Utf8_info$class{ public static void $init$(de.tud.cs.st.bat.native.CONSTANT_Utf8_info) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CONSTANT_Utf8_info$class),Constant_Type_Value,MethodDescriptor((de.tud.cs.st.bat.native.CONSTANT_Utf8_info): int),de.tud.cs.st.bat.native.CONSTANT_Utf8_info$class{ public static int Constant_Type_Value(de.tud.cs.st.bat.native.CONSTANT_Utf8_info) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CharValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.CharValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CharValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.CharValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CharValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.CharValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/CharValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.CharValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ChopFrame$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.ChopFrame): void),de.tud.cs.st.bat.native.ChopFrame$class{ public static void $init$(de.tud.cs.st.bat.native.ChopFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassFile$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ClassFile${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassFile$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ClassFile${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassFile$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ClassFile${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassFile$),magic,MethodDescriptor((): int),de.tud.cs.st.bat.native.ClassFile${ public int magic() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ClassValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ClassValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ClassValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ClassValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.ClassValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Code_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Code_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Code_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.Code_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Code_attribute): void),de.tud.cs.st.bat.native.Code_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Code_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Code_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.Code_attribute): java.lang.String),de.tud.cs.st.bat.native.Code_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.Code_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ConstantValue_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ConstantValue_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ConstantValue_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.ConstantValue_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.ConstantValue_attribute): void),de.tud.cs.st.bat.native.ConstantValue_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.ConstantValue_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.ConstantValue_attribute): int),de.tud.cs.st.bat.native.ConstantValue_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.ConstantValue_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ConstantValue_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.ConstantValue_attribute): java.lang.String),de.tud.cs.st.bat.native.ConstantValue_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.ConstantValue_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Class,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Class() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Double,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Double() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Fieldref,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Fieldref() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Float,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Float() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Integer,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Integer() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_InterfaceMethodref,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_InterfaceMethodref() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Long,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Long() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Methodref,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Methodref() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_NameAndType,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_NameAndType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_String,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_String() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Constant_Pool_Entry$),CONSTANT_Utf8,MethodDescriptor((): int),de.tud.cs.st.bat.native.Constant_Pool_Entry${ public int CONSTANT_Utf8() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Deprecated_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Deprecated_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Deprecated_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.Deprecated_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Deprecated_attribute): void),de.tud.cs.st.bat.native.Deprecated_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Deprecated_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.Deprecated_attribute): int),de.tud.cs.st.bat.native.Deprecated_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.Deprecated_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Deprecated_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.Deprecated_attribute): java.lang.String),de.tud.cs.st.bat.native.Deprecated_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.Deprecated_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/DoubleValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.DoubleValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/DoubleValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.DoubleValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/DoubleValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.DoubleValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/DoubleValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.DoubleValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/DoubleVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.DoubleVariableInfo): void),de.tud.cs.st.bat.native.DoubleVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.DoubleVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.EnclosingMethod_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.EnclosingMethod_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.EnclosingMethod_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.EnclosingMethod_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.EnclosingMethod_attribute): void),de.tud.cs.st.bat.native.EnclosingMethod_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.EnclosingMethod_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.EnclosingMethod_attribute): int),de.tud.cs.st.bat.native.EnclosingMethod_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.EnclosingMethod_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnclosingMethod_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.EnclosingMethod_attribute): java.lang.String),de.tud.cs.st.bat.native.EnclosingMethod_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.EnclosingMethod_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnumValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.EnumValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnumValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.EnumValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnumValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.EnumValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/EnumValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.EnumValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Exceptions_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Exceptions_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Exceptions_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.Exceptions_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Exceptions_attribute): void),de.tud.cs.st.bat.native.Exceptions_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Exceptions_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.Exceptions_attribute): int),de.tud.cs.st.bat.native.Exceptions_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Exceptions_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.Exceptions_attribute): java.lang.String),de.tud.cs.st.bat.native.Exceptions_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.Exceptions_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FloatValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.FloatValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FloatValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.FloatValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FloatValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.FloatValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FloatValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.FloatValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FloatVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.FloatVariableInfo): void),de.tud.cs.st.bat.native.FloatVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.FloatVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/FullFrame$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.FullFrame): void),de.tud.cs.st.bat.native.FullFrame$class{ public static void $init$(de.tud.cs.st.bat.native.FullFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.InnerClasses_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.InnerClasses_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.InnerClasses_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.InnerClasses_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.InnerClasses_attribute): void),de.tud.cs.st.bat.native.InnerClasses_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.InnerClasses_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.InnerClasses_attribute): int),de.tud.cs.st.bat.native.InnerClasses_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.InnerClasses_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/InnerClasses_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.InnerClasses_attribute): java.lang.String),de.tud.cs.st.bat.native.InnerClasses_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.InnerClasses_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/IntValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.IntValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/IntValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.IntValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/IntValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.IntValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/IntValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.IntValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/IntegerVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.IntegerVariableInfo): void),de.tud.cs.st.bat.native.IntegerVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.IntegerVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.LineNumberTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LineNumberTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LineNumberTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.LineNumberTable_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.LineNumberTable_attribute): void),de.tud.cs.st.bat.native.LineNumberTable_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.LineNumberTable_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.LineNumberTable_attribute): int),de.tud.cs.st.bat.native.LineNumberTable_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.LineNumberTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LineNumberTable_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.LineNumberTable_attribute): java.lang.String),de.tud.cs.st.bat.native.LineNumberTable_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.LineNumberTable_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.LocalVariableTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LocalVariableTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LocalVariableTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.LocalVariableTable_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTable_attribute): void),de.tud.cs.st.bat.native.LocalVariableTable_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.LocalVariableTable_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTable_attribute): int),de.tud.cs.st.bat.native.LocalVariableTable_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.LocalVariableTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTable_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTable_attribute): java.lang.String),de.tud.cs.st.bat.native.LocalVariableTable_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.LocalVariableTable_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute): void),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute): int),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LocalVariableTypeTable_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute): java.lang.String),de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.LocalVariableTypeTable_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LongValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.LongValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LongValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LongValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LongValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.LongValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LongValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.LongValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/LongVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.LongVariableInfo): void),de.tud.cs.st.bat.native.LongVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.LongVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/NullVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.NullVariableInfo): void),de.tud.cs.st.bat.native.NullVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.NullVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ObjectVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.ObjectVariableInfo): void),de.tud.cs.st.bat.native.ObjectVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.ObjectVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute): void),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleAnnotations_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute): java.lang.String),de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.RuntimeInvisibleAnnotations_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute): void),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeInvisibleParameterAnnotations_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute): java.lang.String),de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.RuntimeInvisibleParameterAnnotations_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute): void),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleAnnotations_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute): java.lang.String),de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.RuntimeVisibleAnnotations_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute): void),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/RuntimeVisibleParameterAnnotations_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute): java.lang.String),de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.RuntimeVisibleParameterAnnotations_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SameFrame$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SameFrame): void),de.tud.cs.st.bat.native.SameFrame$class{ public static void $init$(de.tud.cs.st.bat.native.SameFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SameFrameExtended$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SameFrameExtended): void),de.tud.cs.st.bat.native.SameFrameExtended$class{ public static void $init$(de.tud.cs.st.bat.native.SameFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SameLocals1StackItemFrame$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SameLocals1StackItemFrame): void),de.tud.cs.st.bat.native.SameLocals1StackItemFrame$class{ public static void $init$(de.tud.cs.st.bat.native.SameLocals1StackItemFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SameLocals1StackItemFrameExtended$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SameLocals1StackItemFrameExtended): void),de.tud.cs.st.bat.native.SameLocals1StackItemFrameExtended$class{ public static void $init$(de.tud.cs.st.bat.native.SameLocals1StackItemFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ShortValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.ShortValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ShortValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ShortValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ShortValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.ShortValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/ShortValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.ShortValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Signature_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Signature_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Signature_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.Signature_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Signature_attribute): void),de.tud.cs.st.bat.native.Signature_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Signature_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.Signature_attribute): int),de.tud.cs.st.bat.native.Signature_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.Signature_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Signature_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.Signature_attribute): java.lang.String),de.tud.cs.st.bat.native.Signature_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.Signature_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.SourceDebugExtension_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.SourceDebugExtension_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.SourceDebugExtension_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.SourceDebugExtension_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SourceDebugExtension_attribute): void),de.tud.cs.st.bat.native.SourceDebugExtension_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.SourceDebugExtension_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.SourceDebugExtension_attribute): int),de.tud.cs.st.bat.native.SourceDebugExtension_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.SourceDebugExtension_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceDebugExtension_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.SourceDebugExtension_attribute): java.lang.String),de.tud.cs.st.bat.native.SourceDebugExtension_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.SourceDebugExtension_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.SourceFile_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.SourceFile_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.SourceFile_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.SourceFile_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.SourceFile_attribute): void),de.tud.cs.st.bat.native.SourceFile_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.SourceFile_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.SourceFile_attribute): int),de.tud.cs.st.bat.native.SourceFile_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.SourceFile_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/SourceFile_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.SourceFile_attribute): java.lang.String),de.tud.cs.st.bat.native.SourceFile_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.SourceFile_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StackMapTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.StackMapTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StackMapTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.StackMapTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StackMapTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.StackMapTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StackMapTable_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.StackMapTable_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StackMapTable_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.StackMapTable_attribute): void),de.tud.cs.st.bat.native.StackMapTable_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.StackMapTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StringValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.StringValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StringValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.StringValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StringValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.StringValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/StringValue$),tag,MethodDescriptor((): char),de.tud.cs.st.bat.native.StringValue${ public char tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.Synthetic_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Synthetic_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.Synthetic_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.Synthetic_attribute${ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Synthetic_attribute): void),de.tud.cs.st.bat.native.Synthetic_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Synthetic_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.Synthetic_attribute): int),de.tud.cs.st.bat.native.Synthetic_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.Synthetic_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Synthetic_attribute$class),attribute_name,MethodDescriptor((de.tud.cs.st.bat.native.Synthetic_attribute): java.lang.String),de.tud.cs.st.bat.native.Synthetic_attribute$class{ public static java.lang.String attribute_name(de.tud.cs.st.bat.native.Synthetic_attribute) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/TopVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.TopVariableInfo): void),de.tud.cs.st.bat.native.TopVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.TopVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/UninitializedThisVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.UninitializedThisVariableInfo): void),de.tud.cs.st.bat.native.UninitializedThisVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.UninitializedThisVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/UninitializedVariableInfo$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.UninitializedVariableInfo): void),de.tud.cs.st.bat.native.UninitializedVariableInfo$class{ public static void $init$(de.tud.cs.st.bat.native.UninitializedVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Unknown_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.Unknown_attribute): void),de.tud.cs.st.bat.native.Unknown_attribute$class{ public static void $init$(de.tud.cs.st.bat.native.Unknown_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/Unknown_attribute$class),attribute_length,MethodDescriptor((de.tud.cs.st.bat.native.Unknown_attribute): int),de.tud.cs.st.bat.native.Unknown_attribute$class{ public static int attribute_length(de.tud.cs.st.bat.native.Unknown_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.VerificationTypeInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.VerificationTypeInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Double,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Double() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Float,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Float() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Integer,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Integer() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Long,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Long() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Null,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Null() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Object,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Object() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Top,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Top() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_UninitializedThis,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_UninitializedThis() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/VerificationTypeInfo$),ITEM_Unitialized,MethodDescriptor((): int),de.tud.cs.st.bat.native.VerificationTypeInfo${ public int ITEM_Unitialized() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Annotation,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Annotation(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.native.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.native.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AnnotationDefault_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object AnnotationDefault_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue AnnotationValue(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AnnotationValue,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object AnnotationValue(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ArrayValue(scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Attributes,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Attributes(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),BooleanValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object BooleanValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ByteValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ByteValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Class_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$ CONSTANT_Class_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Class_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Double_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$ CONSTANT_Double_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Double_info,MethodDescriptor((double): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$ CONSTANT_Fieldref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Float_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$ CONSTANT_Float_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Float_info,MethodDescriptor((float): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Integer_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$ CONSTANT_Integer_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Integer_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$ CONSTANT_InterfaceMethodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Long_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$ CONSTANT_Long_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Long_info,MethodDescriptor((long): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Methodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$ CONSTANT_Methodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Methodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$ CONSTANT_NameAndType_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_String_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$ CONSTANT_String_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_String_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Utf8_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$ CONSTANT_Utf8_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CharValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object CharValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ChopFrame,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ChopFrame,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ClassFile(int,int,int,int,int,scala.RandomAccessSeq,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassFile,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ClassValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Code,MethodDescriptor((byte[], java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Code(byte[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Code_attribute,MethodDescriptor((int, int, int, int, java.lang.Object, scala.RandomAccessSeq, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Code_attribute(int,int,int,int,java.lang.Object,scala.RandomAccessSeq,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ConstantValue_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ConstantValue_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Deprecated_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Deprecated_attribute(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),DoubleValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object DoubleValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),DoubleVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo DoubleVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),DoubleVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object DoubleVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.native.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.native.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValuePair,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ElementValuePair(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),EnclosingMethod_attribute,MethodDescriptor((int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object EnclosingMethod_attribute(int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),EnclosingMethod_attribute,MethodDescriptor((int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute EnclosingMethod_attribute(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),EnumValue,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object EnumValue(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ExceptionTableEntry(int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Exceptions_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Field_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Field_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FloatValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object FloatValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FloatVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo FloatVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FloatVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object FloatVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),InnerClassesEntry,MethodDescriptor((int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object InnerClassesEntry(int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),InnerClassesEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry InnerClassesEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object InnerClasses_attribute(int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute InnerClasses_attribute(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),IntValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object IntValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),IntegerVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo IntegerVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),IntegerVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object IntegerVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LineNumberTableEntry,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LineNumberTableEntry(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LineNumberTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LocalVariableTableEntry(int,int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry LocalVariableTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LocalVariableTypeTableEntry(int,int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry LocalVariableTypeTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LongValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LongValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LongVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo LongVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),LongVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object LongVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Method_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Method_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),NullVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo NullVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),NullVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object NullVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ObjectVariableInfo,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ObjectVariableInfo(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ObjectVariableInfo,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo ObjectVariableInfo(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object RuntimeInvisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object RuntimeInvisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object RuntimeVisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object RuntimeVisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameFrame,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameFrame,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameFrameExtended,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameFrameExtended,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameLocals1StackItemFrame,MethodDescriptor((int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameLocals1StackItemFrame(int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameLocals1StackItemFrame,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SameLocals1StackItemFrame(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameLocals1StackItemFrameExtended(int,int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SameLocals1StackItemFrameExtended(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ShortValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object ShortValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Signature_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Signature_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Signature_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute Signature_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SourceDebugExtension_attribute(int,int,java.lang.String,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute SourceDebugExtension_attribute(int,int,java.lang.String,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SourceFile_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object SourceFile_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),StackMapFrame,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object StackMapFrame(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object StackMapTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute StackMapTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),StringValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object StringValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Synthetic_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Synthetic_attribute(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),TopVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo TopVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),TopVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object TopVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),UninitializedThisVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo UninitializedThisVariableInfo() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),UninitializedThisVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object UninitializedThisVariableInfo() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),UninitializedVariableInfo,MethodDescriptor((int): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.VerificationTypeInfo UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),UninitializedVariableInfo,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Unknown_attribute,MethodDescriptor((int, byte[], java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Unknown_attribute(int,byte[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Unknown_attribute,MethodDescriptor((int, byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute Unknown_attribute(int,byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object Unknown_attribute(java.io.DataInputStream,scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),VerificationTypeInfo,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public java.lang.Object VerificationTypeInfo(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.collection.immutable.Map de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq,MethodDescriptor((scala.collection.immutable.Map): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public void de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq(scala.collection.immutable.Map) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader,MethodDescriptor((): scala.Function1[]),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Function1[] de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq,MethodDescriptor((scala.Function1[]): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public void de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq(scala.Function1[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader,MethodDescriptor((): scala.Function2[]),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public scala.Function2[] de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader_$eq,MethodDescriptor((scala.Function2[]): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public void de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader_$eq(scala.Function2[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework${ public void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),element_value_pairs,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public java.lang.Object element_value_pairs() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),element_value_pairs,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public scala.RandomAccessSeq element_value_pairs() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),gd38$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ private boolean gd38$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Annotation),type_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation{ public int type_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),apply,MethodDescriptor((int, int, de.tud.cs.st.bat.native.ElementValue): de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute apply(int,int,de.tud.cs.st.bat.native.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),<init>,MethodDescriptor((int, int, de.tud.cs.st.bat.native.ElementValue): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public void <init>(int,int,de.tud.cs.st.bat.native.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),element_value,MethodDescriptor((): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public de.tud.cs.st.bat.native.ElementValue element_value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),element_value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public java.lang.Object element_value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),gd39$1,MethodDescriptor((de.tud.cs.st.bat.native.ElementValue, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ private boolean gd39$1(de.tud.cs.st.bat.native.ElementValue,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationDefault_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),apply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation): de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue apply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public void <init>(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),annotation,MethodDescriptor((): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation annotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),annotation,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public java.lang.Object annotation() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),gd36$1,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ private boolean gd36$1(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AnnotationValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),gd50$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ private boolean gd50$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),offset_delta,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public int offset_delta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),verification_type_info_locals,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public scala.RandomAccessSeq verification_type_info_locals() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$AppendFrame),verification_type_info_locals,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$AppendFrame{ public scala.Seq verification_type_info_locals() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),apply,MethodDescriptor((scala.Seq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue apply(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),<init>,MethodDescriptor((scala.Seq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public void <init>(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),gd37$1,MethodDescriptor((scala.Seq): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ private boolean gd37$1(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ArrayValue),values,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ArrayValue{ public scala.Seq values() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),gd32$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ private boolean gd32$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$BooleanValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$BooleanValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),gd25$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ private boolean gd25$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ByteValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ByteValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),gd26$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ private boolean gd26$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$CharValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$CharValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),gd48$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ private boolean gd48$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),offset_delta,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public int offset_delta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ChopFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ChopFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),apply,MethodDescriptor((scala.RandomAccessSeq, int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile apply(scala.RandomAccessSeq,int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),<init>,MethodDescriptor((scala.RandomAccessSeq, int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public void <init>(scala.RandomAccessSeq,int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),access_flags,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int access_flags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),attributes,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.Object attributes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),constant_pool,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public scala.RandomAccessSeq constant_pool() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),fields,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.Object fields() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),fields,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public scala.RandomAccessSeq fields() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),gd1$1,MethodDescriptor((scala.Seq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, int, int, int, int, int, scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ private boolean gd1$1(scala.Seq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),interfaces,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.Object interfaces() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),interfaces,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public scala.RandomAccessSeq interfaces() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),major_version,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int major_version() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),methods,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.Object methods() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),methods,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public scala.RandomAccessSeq methods() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),minor_version,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int minor_version() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),super_class,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int super_class() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),this_class,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public int this_class() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassFile),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),gd34$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ private boolean gd34$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ClassValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),apply,MethodDescriptor((byte[]): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code apply(byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),<init>,MethodDescriptor((byte[]): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public void <init>(byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),code,MethodDescriptor((): byte[]),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public byte[] code() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),gd21$1,MethodDescriptor((byte[]): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ private boolean gd21$1(byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),apply,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code, scala.RandomAccessSeq, scala.Seq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute apply(int,int,int,int,de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),<init>,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code, scala.RandomAccessSeq, scala.Seq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public void <init>(int,int,int,int,de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),attributes,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.Object attributes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),code,MethodDescriptor((): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code code() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),code,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.Object code() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),exception_table,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public scala.RandomAccessSeq exception_table() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),exception_table,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public scala.Seq exception_table() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),gd22$1,MethodDescriptor((scala.Seq, scala.RandomAccessSeq, de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code, int, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ private boolean gd22$1(scala.Seq,scala.RandomAccessSeq,de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),max_locals,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int max_locals() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),max_stack,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int max_stack() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Code_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),constantvalue_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int constantvalue_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),gd9$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ private boolean gd9$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ConstantValue_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),gd10$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ private boolean gd10$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Deprecated_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),gd27$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ private boolean gd27$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$DoubleVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$DoubleVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),apply,MethodDescriptor((int, de.tud.cs.st.bat.native.ElementValue): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair apply(int,de.tud.cs.st.bat.native.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),<init>,MethodDescriptor((int, de.tud.cs.st.bat.native.ElementValue): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public void <init>(int,de.tud.cs.st.bat.native.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),element_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public int element_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),element_value,MethodDescriptor((): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public de.tud.cs.st.bat.native.ElementValue element_value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),element_value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public java.lang.Object element_value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),gd24$1,MethodDescriptor((de.tud.cs.st.bat.native.ElementValue, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ private boolean gd24$1(de.tud.cs.st.bat.native.ElementValue,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ElementValuePair),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),apply,MethodDescriptor((int, int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute apply(int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),<init>,MethodDescriptor((int, int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public void <init>(int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),class_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int class_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),gd14$1,MethodDescriptor((int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ private boolean gd14$1(int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),method_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int method_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnclosingMethod_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),const_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public int const_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),gd35$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ private boolean gd35$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$EnumValue),type_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnumValue{ public int type_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),apply,MethodDescriptor((int, int, int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry apply(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),<init>,MethodDescriptor((int, int, int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public void <init>(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),catch_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int catch_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),end_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int end_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),gd23$1,MethodDescriptor((int, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ private boolean gd23$1(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),handler_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int handler_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),start_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public int start_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ExceptionTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),exception_index_table,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public scala.RandomAccessSeq exception_index_table() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),exception_index_table,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public scala.Seq exception_index_table() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),gd13$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ private boolean gd13$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Exceptions_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),apply,MethodDescriptor((int, int, int, scala.Seq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info apply(int,int,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),<init>,MethodDescriptor((int, int, int, scala.Seq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public void <init>(int,int,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),access_flags,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int access_flags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),attributes,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public java.lang.Object attributes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),descriptor_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int descriptor_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),gd2$1,MethodDescriptor((scala.Seq, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ private boolean gd2$1(scala.Seq,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Field_Info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),gd28$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ private boolean gd28$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FloatVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FloatVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame apply(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public void <init>(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),gd51$1,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ private boolean gd51$1(scala.RandomAccessSeq,scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),offset_delta,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public int offset_delta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),verification_type_info_locals,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public scala.RandomAccessSeq verification_type_info_locals() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),verification_type_info_locals,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public scala.Seq verification_type_info_locals() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),verification_type_info_stack,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public scala.RandomAccessSeq verification_type_info_stack() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$FullFrame),verification_type_info_stack,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$FullFrame{ public scala.Seq verification_type_info_stack() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),apply,MethodDescriptor((int, int, int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry apply(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),<init>,MethodDescriptor((int, int, int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public void <init>(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),gd7$1,MethodDescriptor((int, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ private boolean gd7$1(int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),inner_class_access_flags,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int inner_class_access_flags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),inner_class_info_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int inner_class_info_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),inner_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int inner_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),outer_class_info_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int outer_class_info_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClassesEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),classes,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public scala.RandomAccessSeq classes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),classes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public scala.Seq classes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),gd6$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ private boolean gd6$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$InnerClasses_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),gd29$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ private boolean gd29$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$IntegerVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$IntegerVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),gd16$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ private boolean gd16$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),line_number,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public int line_number() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),start_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public int start_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),gd15$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ private boolean gd15$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),line_number_table,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public scala.RandomAccessSeq line_number_table() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),line_number_table,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public scala.Seq line_number_table() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LineNumberTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),apply,MethodDescriptor((int, int, int, int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry apply(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),<init>,MethodDescriptor((int, int, int, int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public void <init>(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),descriptor_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int descriptor_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),gd17$1,MethodDescriptor((int, int, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ private boolean gd17$1(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),start_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public int start_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),gd18$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ private boolean gd18$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),local_variable_table,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public scala.RandomAccessSeq local_variable_table() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),local_variable_table,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public scala.Seq local_variable_table() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),apply,MethodDescriptor((int, int, int, int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry apply(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),<init>,MethodDescriptor((int, int, int, int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public void <init>(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),gd19$1,MethodDescriptor((int, int, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ private boolean gd19$1(int,int,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),signature_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int signature_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),start_pc,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public int start_pc() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),apply,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute apply(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),<init>,MethodDescriptor((int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public void <init>(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),gd20$1,MethodDescriptor((scala.RandomAccessSeq, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ private boolean gd20$1(scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),local_variable_type_table,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public scala.RandomAccessSeq local_variable_type_table() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),local_variable_type_table,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public scala.Seq local_variable_type_table() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LocalVariableTypeTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),gd30$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ private boolean gd30$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$LongVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$LongVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),apply,MethodDescriptor((int, int, int, scala.Seq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info apply(int,int,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),<init>,MethodDescriptor((int, int, int, scala.Seq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public void <init>(int,int,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),accessFlags,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int accessFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),attributes,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public java.lang.Object attributes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),descriptor_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int descriptor_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),gd3$1,MethodDescriptor((scala.Seq, int, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ private boolean gd3$1(scala.Seq,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Method_Info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$NullVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$NullVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),cpool_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public int cpool_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),gd53$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ private boolean gd53$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ObjectVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ObjectVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),annotations,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public java.lang.Object annotations() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public scala.RandomAccessSeq annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),gd41$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ private boolean gd41$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),gd43$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ private boolean gd43$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),parameter_annotations,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.Object parameter_annotations() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),parameter_annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public scala.RandomAccessSeq parameter_annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),annotations,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public java.lang.Object annotations() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public scala.RandomAccessSeq annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),gd40$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ private boolean gd40$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),gd42$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ private boolean gd42$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),parameter_annotations,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public java.lang.Object parameter_annotations() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),parameter_annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public scala.RandomAccessSeq parameter_annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),gd45$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ private boolean gd45$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),gd49$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ private boolean gd49$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),offset_delta,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public int offset_delta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameFrameExtended),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameFrameExtended{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),apply,MethodDescriptor((int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame apply(int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),<init>,MethodDescriptor((int, de.tud.cs.st.bat.native.VerificationTypeInfo): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public void <init>(int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),gd46$1,MethodDescriptor((de.tud.cs.st.bat.native.VerificationTypeInfo, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ private boolean gd46$1(de.tud.cs.st.bat.native.VerificationTypeInfo,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),verification_type_info_stack,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public de.tud.cs.st.bat.native.VerificationTypeInfo verification_type_info_stack() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrame),verification_type_info_stack,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrame{ public java.lang.Object verification_type_info_stack() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),apply,MethodDescriptor((int, int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended apply(int,int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),<init>,MethodDescriptor((int, int, de.tud.cs.st.bat.native.VerificationTypeInfo): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public void <init>(int,int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),frame_type,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public int frame_type() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),gd47$1,MethodDescriptor((de.tud.cs.st.bat.native.VerificationTypeInfo, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ private boolean gd47$1(de.tud.cs.st.bat.native.VerificationTypeInfo,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),offset_delta,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public int offset_delta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),verification_type_info_stack,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public de.tud.cs.st.bat.native.VerificationTypeInfo verification_type_info_stack() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SameLocals1StackItemFrameExtended),verification_type_info_stack,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SameLocals1StackItemFrameExtended{ public java.lang.Object verification_type_info_stack() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),gd31$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ private boolean gd31$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$ShortValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$ShortValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),gd8$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ private boolean gd8$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),signature_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public int signature_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Signature_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),apply,MethodDescriptor((int, java.lang.String): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute apply(int,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),<init>,MethodDescriptor((int, java.lang.String): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public void <init>(int,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),debug_extension,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public java.lang.String debug_extension() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),gd12$1,MethodDescriptor((java.lang.String, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ private boolean gd12$1(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceDebugExtension_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),gd5$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ private boolean gd5$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),sourceFile_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public int sourceFile_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$SourceFile_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public java.lang.String attribute_name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),attribute_name_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public void attribute_name_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),gd44$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ private boolean gd44$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),stack_map_frames,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public java.lang.Object stack_map_frames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),stack_map_frames,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public scala.RandomAccessSeq stack_map_frames() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StackMapTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),const_value_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public int const_value_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),gd33$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ private boolean gd33$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$StringValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$StringValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public int attribute_length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public java.lang.String attribute_name() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),gd11$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ private boolean gd11$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Synthetic_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$TopVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$TopVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public java.lang.Object readResolve() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedThisVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedThisVariableInfo${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),gd52$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ private boolean gd52$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),offset,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public int offset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public int tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),tag_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public void tag_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$UninitializedVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$UninitializedVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),apply,MethodDescriptor((int, byte[]): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute apply(int,byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute): scala.Some),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),<init>,MethodDescriptor((int, byte[]): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public void <init>(int,byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),attribute_length,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public int attribute_length() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),attribute_name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public int attribute_name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),gd4$1,MethodDescriptor((byte[], int): boolean),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ private boolean gd4$1(byte[],int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),info,MethodDescriptor((): byte[]),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public byte[] info() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework$Unknown_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.native.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.native.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue AnnotationValue(de.tud.cs.st.bat.native.reader.BasicJava6Framework$Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ChopFrame,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$ClassFile ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ClassFile,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.native.reader.BasicJava6Framework$Code,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),DoubleVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo DoubleVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.native.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.native.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),EnclosingMethod_attribute,MethodDescriptor((int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$EnclosingMethod_attribute EnclosingMethod_attribute(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Field_Info Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),FloatVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo FloatVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),InnerClassesEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClassesEntry InnerClassesEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$InnerClasses_attribute InnerClasses_attribute(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),IntegerVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo IntegerVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTableEntry LocalVariableTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTable_attribute LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTableEntry LocalVariableTypeTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$LocalVariableTypeTable_attribute LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),LongVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo LongVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Method_Info Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),NullVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo NullVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ObjectVariableInfo,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo ObjectVariableInfo(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SameFrame,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SameFrameExtended,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SameLocals1StackItemFrame,MethodDescriptor((int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameLocals1StackItemFrame(int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, de.tud.cs.st.bat.native.VerificationTypeInfo): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapFrame SameLocals1StackItemFrameExtended(int,int,de.tud.cs.st.bat.native.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Signature_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Signature_attribute Signature_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceDebugExtension_attribute SourceDebugExtension_attribute(int,int,java.lang.String,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),StackMapFrame,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object StackMapFrame(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$StackMapTable_attribute StackMapTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.ElementValue),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),TopVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo TopVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),UninitializedThisVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo UninitializedThisVariableInfo() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),UninitializedVariableInfo,MethodDescriptor((int): de.tud.cs.st.bat.native.VerificationTypeInfo),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.VerificationTypeInfo UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Unknown_attribute,MethodDescriptor((int, byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static de.tud.cs.st.bat.native.reader.BasicJava6Framework$Unknown_attribute Unknown_attribute(int,byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),VerificationTypeInfo,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static java.lang.Object VerificationTypeInfo(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/BasicJava6Framework),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.native.reader.BasicJava6Framework{ public static void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Class_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Class_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Class_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),apply,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, double): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Double_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Double_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),gd2$1,MethodDescriptor((double): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ private boolean gd2$1(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Double_info),value,MethodDescriptor((): double),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info{ public double value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),class_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int class_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Fieldref_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Fieldref_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),gd8$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ private boolean gd8$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),name_and_type_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int name_and_type_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Fieldref_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),apply,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info apply(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, float): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Float_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Float_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),gd3$1,MethodDescriptor((float): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ private boolean gd3$1(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Float_info),value,MethodDescriptor((): float),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info{ public float value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Integer_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Integer_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),gd4$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ private boolean gd4$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Integer_info),value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info{ public int value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),class_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int class_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),gd10$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ private boolean gd10$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),name_and_type_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int name_and_type_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),apply,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info apply(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, long): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Long_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Long_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),gd5$1,MethodDescriptor((long): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ private boolean gd5$1(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Long_info),value,MethodDescriptor((): long),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info{ public long value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),class_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int class_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Methodref_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Methodref_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),gd9$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ private boolean gd9$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),name_and_type_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int name_and_type_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Methodref_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_NameAndType_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_NameAndType_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),descriptor_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int descriptor_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),gd11$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ private boolean gd11$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),name_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int name_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_NameAndType_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),apply,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_String_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_String_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),gd7$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ private boolean gd7$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),string_index,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public int string_index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_String_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info$),unapply,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info): scala.Some),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info${ public scala.Some unapply(de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),<init>,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, java.lang.String): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public void <init>(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),Constant_Type_Value,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public int Constant_Type_Value() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Utf8_info$$$outer,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding de$tud$cs$st$bat$native$reader$Constant_PoolBinding$CONSTANT_Utf8_info$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),gd6$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ private boolean gd6$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$CONSTANT_Utf8_info),value,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info{ public java.lang.String value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding): void),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static void $init$(de.tud.cs.st.bat.native.reader.Constant_PoolBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Class_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Double_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Fieldref_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Float_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Integer_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_InterfaceMethodref_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Long_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Methodref_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_NameAndType_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_String_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/native/reader/Constant_PoolBinding$class),CONSTANT_Utf8_info,MethodDescriptor((de.tud.cs.st.bat.native.reader.Constant_PoolBinding, java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.native.reader.Constant_PoolBinding$class{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(de.tud.cs.st.bat.native.reader.Constant_PoolBinding,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.AALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.AASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ACONST_NULLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ACONST_NULLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ALOADFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),componentType,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public de.tud.cs.st.bat.prolog.TypeTerm componentType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ANEWARRAYFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ANEWARRAYFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ARETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ARETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ARETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ARETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ARETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ARETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ARRAYLENGTHFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ARRAYLENGTHFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ASTOREFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ATHROWFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ATHROWFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ATHROWFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ATHROWFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ATHROWFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ATHROWFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ATHROWFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AbstractTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AbstractTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AbstractTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm$),abstract_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.AbstractTerm${ public de.tud.cs.st.bat.prolog.AbstractTerm abstract_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm$),abstract_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.AbstractTerm${ public de.tud.cs.st.bat.prolog.AbstractTerm abstract_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AbstractTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.AbstractTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AbstractTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AbstractTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.AbstractTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AbstractTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AbstractTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AbstractTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.AbstractTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.AbstractTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AbstractTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AbstractTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AnnotationAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AnnotationAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.AnnotationAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AnnotationAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.AnnotationAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact$),apply,MethodDescriptor((de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.prolog.RuntimeVisibleTerm, de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.AnnotationFact),de.tud.cs.st.bat.prolog.AnnotationFact${ public de.tud.cs.st.bat.prolog.AnnotationFact apply(de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.prolog.RuntimeVisibleTerm,de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),<init>,MethodDescriptor((de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.prolog.RuntimeVisibleTerm, de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.AnnotationFact{ public void <init>(de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.prolog.RuntimeVisibleTerm,de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),annotationTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.bat.prolog.TypeTerm annotationTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),elementValuePairTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.sae.GroundTerms elementValuePairTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AnnotationFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.AnnotationFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),keyAtom,MethodDescriptor((): de.tud.cs.st.sae.KeyAtom),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.sae.KeyAtom keyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),runtimeVisibleTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.RuntimeVisibleTerm),de.tud.cs.st.bat.prolog.AnnotationFact{ public de.tud.cs.st.bat.prolog.RuntimeVisibleTerm runtimeVisibleTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.AnnotationValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.AnnotationValueTerm),de.tud.cs.st.bat.prolog.AnnotationValueTerm${ public de.tud.cs.st.bat.prolog.AnnotationValueTerm apply(de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public void <init>(de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),annotationTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public de.tud.cs.st.bat.prolog.TypeTerm annotationTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),elementValuePairTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public de.tud.cs.st.sae.GroundTerms elementValuePairTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/AnnotationValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.AnnotationValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayTypeTerm$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.ArrayTypeTerm$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$$anonfun$apply$1),apply,MethodDescriptor((): de.tud.cs.st.bat.prolog.ArrayTypeTerm),de.tud.cs.st.bat.prolog.ArrayTypeTerm$$anonfun$apply$1{ public de.tud.cs.st.bat.prolog.ArrayTypeTerm apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ArrayTypeTerm$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ArrayTypeTerm$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayTypeTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ArrayTypeTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ArrayTypeTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): de.tud.cs.st.bat.prolog.ArrayTypeTerm),de.tud.cs.st.bat.prolog.ArrayTypeTerm${ public de.tud.cs.st.bat.prolog.ArrayTypeTerm apply(de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.ArrayTypeTerm${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public void <init>(de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayTypeTerm{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayTypeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TypeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ArrayValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ArrayValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.ArrayValueTerm),de.tud.cs.st.bat.prolog.ArrayValueTerm${ public de.tud.cs.st.bat.prolog.ArrayValueTerm apply(de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public void <init>(de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public de.tud.cs.st.sae.GroundTerms apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ArrayValueTerm),valueTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.ArrayValueTerm{ public de.tud.cs.st.sae.GroundTerms valueTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.BALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.BALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.BALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.BASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.BASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.BASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.BIPUSHFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.BIPUSHFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.BIPUSHFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BIPUSHFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BIPUSHFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BIPUSHFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BIPUSHFact),value,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.BIPUSHFact{ public de.tud.cs.st.sae.IntegerAtom value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanFlagTerm$class),$init$,MethodDescriptor((de.tud.cs.st.bat.prolog.BooleanFlagTerm): void),de.tud.cs.st.bat.prolog.BooleanFlagTerm$class{ public static void $init$(de.tud.cs.st.bat.prolog.BooleanFlagTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanFlagTerm$class),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.BooleanFlagTerm, int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.BooleanFlagTerm$class{ public static de.tud.cs.st.sae.TruthValueAtom apply(de.tud.cs.st.bat.prolog.BooleanFlagTerm,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanFlagTerm$class),arity,MethodDescriptor((de.tud.cs.st.bat.prolog.BooleanFlagTerm): int),de.tud.cs.st.bat.prolog.BooleanFlagTerm$class{ public static int arity(de.tud.cs.st.bat.prolog.BooleanFlagTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BooleanTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BooleanTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BooleanTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BooleanTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BooleanTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): de.tud.cs.st.bat.prolog.BooleanValueTerm),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public de.tud.cs.st.bat.prolog.BooleanValueTerm apply(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),noValueTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.BooleanValueTerm),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public de.tud.cs.st.bat.prolog.BooleanValueTerm noValueTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm$),yesValueTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.BooleanValueTerm),de.tud.cs.st.bat.prolog.BooleanValueTerm${ public de.tud.cs.st.bat.prolog.BooleanValueTerm yesValueTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public de.tud.cs.st.sae.TruthValueAtom valueAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BooleanValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.BooleanValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BridgeTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BridgeTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BridgeTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm$),bridge_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.BridgeTerm),de.tud.cs.st.bat.prolog.BridgeTerm${ public de.tud.cs.st.bat.prolog.BridgeTerm bridge_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm$),bridge_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.BridgeTerm),de.tud.cs.st.bat.prolog.BridgeTerm${ public de.tud.cs.st.bat.prolog.BridgeTerm bridge_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BridgeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.BridgeTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.BridgeTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.BridgeTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.BridgeTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BridgeTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BridgeTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BridgeTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.BridgeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.BridgeTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BridgeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BridgeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ByteTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ByteTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ByteTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ByteTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ByteTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ByteValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ByteValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.ByteValueTerm),de.tud.cs.st.bat.prolog.ByteValueTerm${ public de.tud.cs.st.bat.prolog.ByteValueTerm apply(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ByteValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ByteValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ByteValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.ByteValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ByteValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ByteValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ByteValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ByteValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ByteValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ByteValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ByteValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.ByteValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),apply,MethodDescriptor((double): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public void apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1, java.util.zip.ZipFile, java.util.zip.ZipEntry): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2{ public void <init>(de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1,java.util.zip.ZipFile,java.util.zip.ZipEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2),apply,MethodDescriptor((): java.io.InputStream),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2{ public java.io.InputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1, java.lang.String): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3{ public void <init>(de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3),apply,MethodDescriptor((): java.io.FileInputStream),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3{ public java.io.FileInputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1, java.lang.String): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4{ public void <init>(de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4),apply,MethodDescriptor((): java.io.InputStream),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4{ public java.io.InputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1$$anonfun$apply$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),apply,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public void apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2),<init>,MethodDescriptor((java.lang.String[], scala.runtime.IntRef, de.tud.cs.st.bat.prolog.reader.Factory$): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2{ public void <init>(java.lang.String[],scala.runtime.IntRef,de.tud.cs.st.bat.prolog.reader.Factory$) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2),apply,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$$anonfun$main$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.BytecodeToProlog$$anonfun$main$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),aggregateTimes,MethodDescriptor((scala.Symbol, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public java.lang.Object aggregateTimes(scala.Symbol,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),aggregatedTimes,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public scala.collection.mutable.Map aggregatedTimes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),aggregatedTimes_$eq,MethodDescriptor((scala.collection.mutable.Map): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public void aggregatedTimes_$eq(scala.collection.mutable.Map) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),asSeconds,MethodDescriptor((long, long): double),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public double asSeconds(long,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),nanoSecondsToMilliseconds,MethodDescriptor((double): double),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public double nanoSecondsToMilliseconds(double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),nanoSecondsToSeconds,MethodDescriptor((double): double),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public double nanoSecondsToSeconds(double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),printAggregatedTimes,MethodDescriptor((scala.Symbol, java.lang.String): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public void printAggregatedTimes(scala.Symbol,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),resetAggregatedTimes,MethodDescriptor((scala.Symbol): void),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public void resetAggregatedTimes(scala.Symbol) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),time,MethodDescriptor((java.lang.String, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public java.lang.Object time(java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog$),time,MethodDescriptor((scala.Function1, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog${ public java.lang.Object time(scala.Function1,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),aggregateTimes,MethodDescriptor((scala.Symbol, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static java.lang.Object aggregateTimes(scala.Symbol,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),asSeconds,MethodDescriptor((long, long): double),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static double asSeconds(long,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),nanoSecondsToMilliseconds,MethodDescriptor((double): double),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static double nanoSecondsToMilliseconds(double) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),nanoSecondsToSeconds,MethodDescriptor((double): double),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static double nanoSecondsToSeconds(double) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),printAggregatedTimes,MethodDescriptor((scala.Symbol, java.lang.String): void),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static void printAggregatedTimes(scala.Symbol,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),resetAggregatedTimes,MethodDescriptor((scala.Symbol): void),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static void resetAggregatedTimes(scala.Symbol) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),time,MethodDescriptor((java.lang.String, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static java.lang.Object time(java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/BytecodeToProlog),time,MethodDescriptor((scala.Function1, scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.BytecodeToProlog{ public static java.lang.Object time(scala.Function1,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.CALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.CALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.CALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.CALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.CASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.CASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.CASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.CASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),referenceType,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.CHECKCASTFact{ public de.tud.cs.st.bat.prolog.TypeTerm referenceType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CHECKCASTFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.CharTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.CharTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.CharTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CharTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CharTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.CharValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.CharValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.CharValueTerm),de.tud.cs.st.bat.prolog.CharValueTerm${ public de.tud.cs.st.bat.prolog.CharValueTerm apply(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.CharValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.CharValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.CharValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.CharValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.CharValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.CharValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CharValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.CharValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.CharValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.CharValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/CharValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.CharValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ClassAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ClassAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ClassAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ClassAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ClassAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileFact): void),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public void <init>(de.tud.cs.st.bat.prolog.ClassFileFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldFact): void),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public void apply(de.tud.cs.st.bat.prolog.FieldFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileFact): void),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public void <init>(de.tud.cs.st.bat.prolog.ClassFileFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodFact): void),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public void apply(de.tud.cs.st.bat.prolog.MethodFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileFact$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassCategoryAtom, de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.sae.GroundTerms, de.tud.cs.st.bat.prolog.VisibilityAtom, de.tud.cs.st.bat.prolog.FinalTerm, de.tud.cs.st.bat.prolog.AbstractTerm, de.tud.cs.st.bat.prolog.SyntheticTerm, de.tud.cs.st.bat.prolog.DeprecatedTerm, scala.RandomAccessSeq, scala.RandomAccessSeq): void),de.tud.cs.st.bat.prolog.ClassFileFact{ public void <init>(de.tud.cs.st.bat.prolog.ClassCategoryAtom,de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.sae.GroundTerms,de.tud.cs.st.bat.prolog.VisibilityAtom,de.tud.cs.st.bat.prolog.FinalTerm,de.tud.cs.st.bat.prolog.AbstractTerm,de.tud.cs.st.bat.prolog.SyntheticTerm,de.tud.cs.st.bat.prolog.DeprecatedTerm,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),abstractTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.AbstractTerm abstractTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),classCategoryAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.ClassCategoryAtom),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.ClassCategoryAtom classCategoryAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),classFileKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.ClassFileKeyAtom),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.ClassFileKeyAtom classFileKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),deprecatedTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.DeprecatedTerm deprecatedTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),finalTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.FinalTerm finalTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ClassFileFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),implementedTypeTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.sae.GroundTerms implementedTypeTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassFileFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),superTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm superTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),syntheticTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.SyntheticTerm syntheticTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),thisTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm thisTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileFact),visibilityAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.VisibilityAtom),de.tud.cs.st.bat.prolog.ClassFileFact{ public de.tud.cs.st.bat.prolog.VisibilityAtom visibilityAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileFact): void),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public void <init>(de.tud.cs.st.bat.prolog.ClassFileFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public de.tud.cs.st.bat.prolog.ClassFileFact functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public de.tud.cs.st.sae.Fact functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),functor_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileFact): void),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public void functor_$eq(de.tud.cs.st.bat.prolog.ClassFileFact) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),keyPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public java.lang.String keyPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileKeyAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileKeyAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileSourceFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassFileSourceFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassFileSourceFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom, de.tud.cs.st.sae.StringAtom): de.tud.cs.st.bat.prolog.ClassFileSourceFact),de.tud.cs.st.bat.prolog.ClassFileSourceFact${ public de.tud.cs.st.bat.prolog.ClassFileSourceFact apply(de.tud.cs.st.bat.prolog.ClassFileKeyAtom,de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom, de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public void <init>(de.tud.cs.st.bat.prolog.ClassFileKeyAtom,de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),classFileKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.ClassFileKeyAtom),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public de.tud.cs.st.bat.prolog.ClassFileKeyAtom classFileKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),fileNameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public de.tud.cs.st.sae.StringAtom fileNameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassFileSourceFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassFileSourceFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ClassValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): de.tud.cs.st.bat.prolog.ClassValueTerm),de.tud.cs.st.bat.prolog.ClassValueTerm${ public de.tud.cs.st.bat.prolog.ClassValueTerm apply(de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.ClassValueTerm{ public void <init>(de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.ClassValueTerm{ public de.tud.cs.st.bat.prolog.TypeTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ClassValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ClassValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ClassValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ClassValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ClassValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ClassValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ClassValueTerm),typeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.ClassValueTerm{ public de.tud.cs.st.bat.prolog.TypeTerm typeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ComplexTypeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ComplexTypeTerm),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ComplexTypeTerm{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ComplexTypeTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ComplexTypeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ComplexTypeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TypeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.D2FFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.D2FFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.D2FFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.D2FFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.D2FFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.D2FFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2FFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.D2IFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.D2IFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.D2IFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.D2IFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.D2IFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.D2IFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2IFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.D2LFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.D2LFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.D2LFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.D2LFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.D2LFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.D2LFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/D2LFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DADDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DADDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DADDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DADDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DADDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DADDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DADDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DCMPGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DCMPGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DCMPGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DCMPGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DCMPGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DCMPGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DCMPLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DCMPLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DCMPLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DCMPLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DCMPLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DCMPLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCMPLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DCONST_0Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_0Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DCONST_1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DCONST_1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DDIVFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DDIVFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DDIVFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DDIVFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DDIVFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DDIVFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DDIVFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DLOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DLOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DLOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DLOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DLOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DLOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.DLOADFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DLOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DMULFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DMULFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DMULFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DMULFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DMULFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DMULFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DMULFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DNEGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DNEGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DNEGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DNEGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DNEGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DNEGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DNEGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DREMFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DREMFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DREMFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DREMFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DREMFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DREMFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DREMFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DRETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DRETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DRETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DRETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DRETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DRETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DRETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DSTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DSTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DSTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DSTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DSTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DSTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.DSTOREFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DSUBFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DSUBFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DSUBFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DSUBFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DSUBFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DSUBFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DSUBFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUP2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUP2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUP2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUP2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUP2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUP2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUP2_X1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUP2_X2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP2_X2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUPFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUPFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUPFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUPFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUPFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUPFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUPFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUP_X1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DUP_X2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DUP_X2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VisibilityAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VisibilityAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VisibilityAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DefaultVisibilityAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DefaultVisibilityAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DeprecatedTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DeprecatedTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DeprecatedTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm$),deprecated_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.DeprecatedTerm${ public de.tud.cs.st.bat.prolog.DeprecatedTerm deprecated_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm$),deprecated_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.DeprecatedTerm${ public de.tud.cs.st.bat.prolog.DeprecatedTerm deprecated_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DeprecatedTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DeprecatedTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DoubleTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DoubleTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DoubleTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DoubleTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DoubleTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DoubleValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.DoubleValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.FloatAtom): de.tud.cs.st.bat.prolog.DoubleValueTerm),de.tud.cs.st.bat.prolog.DoubleValueTerm${ public de.tud.cs.st.bat.prolog.DoubleValueTerm apply(de.tud.cs.st.sae.FloatAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.FloatAtom): void),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public void <init>(de.tud.cs.st.sae.FloatAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public de.tud.cs.st.sae.FloatAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/DoubleValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.DoubleValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ElementValuePairTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ElementValuePairTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ElementValuePairTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.ValueTerm): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.ElementValuePairTerm${ public de.tud.cs.st.bat.prolog.ElementValuePairTerm apply(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.ValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.ValueTerm): void),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public void <init>(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.ValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public de.tud.cs.st.sae.StringAtom nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ElementValuePairTerm),valueTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.ElementValuePairTerm{ public de.tud.cs.st.bat.prolog.ValueTerm valueTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.EnumAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.EnumAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.EnumAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.EnumAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.EnumAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.EnumAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.EnumAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.EnumAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.EnumAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.EnumValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.EnumValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.StringAtom): de.tud.cs.st.bat.prolog.EnumValueTerm),de.tud.cs.st.bat.prolog.EnumValueTerm${ public de.tud.cs.st.bat.prolog.EnumValueTerm apply(de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.EnumValueTerm{ public void <init>(de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.EnumValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.EnumValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.EnumValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),constNameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.EnumValueTerm{ public de.tud.cs.st.sae.StringAtom constNameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.EnumValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.EnumValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.EnumValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/EnumValueTerm),typeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.EnumValueTerm{ public de.tud.cs.st.bat.prolog.TypeTerm typeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm$),apply,MethodDescriptor((long, long, long, de.tud.cs.st.bat.prolog.ObjectTypeTerm): de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm${ public de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm apply(long,long,long,de.tud.cs.st.bat.prolog.ObjectTypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),<init>,MethodDescriptor((long, de.tud.cs.st.bat.prolog.ObjectTypeTerm): void),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public void <init>(long,de.tud.cs.st.bat.prolog.ObjectTypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),catchTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm catchTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),program_counters,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public long program_counters() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionTableEntryTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionsTableFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ExceptionsTableFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ExceptionsTableFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.ExceptionsTableFact),de.tud.cs.st.bat.prolog.ExceptionsTableFact${ public de.tud.cs.st.bat.prolog.ExceptionsTableFact apply(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),exceptionTableEntryTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public de.tud.cs.st.sae.GroundTerms exceptionTableEntryTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),methodKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodKeyAtom),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public de.tud.cs.st.bat.prolog.MethodKeyAtom methodKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ExceptionsTableFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ExceptionsTableFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.F2DFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.F2DFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.F2DFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.F2DFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.F2DFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.F2DFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2DFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.F2IFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.F2IFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.F2IFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.F2IFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.F2IFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.F2IFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2IFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.F2LFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.F2LFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.F2LFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.F2LFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.F2LFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.F2LFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/F2LFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FADDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FADDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FADDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FADDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FADDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FADDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FADDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FCMPGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FCMPGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FCMPGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FCMPGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FCMPGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FCMPGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FCMPLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FCMPLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FCMPLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FCMPLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FCMPLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FCMPLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCMPLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FCONST_0Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_0Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FCONST_1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FCONST_2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FCONST_2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FDIVFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FDIVFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FDIVFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FDIVFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FDIVFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FDIVFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FDIVFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FLOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FLOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FLOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FLOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FLOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FLOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.FLOADFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FLOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FMULFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FMULFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FMULFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FMULFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FMULFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FMULFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FMULFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FNEGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FNEGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FNEGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FNEGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FNEGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FNEGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FNEGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FREMFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FREMFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FREMFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FREMFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FREMFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FREMFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FREMFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FRETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FRETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FRETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FRETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FRETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FRETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FRETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FSTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FSTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FSTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FSTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FSTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FSTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.FSTOREFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.FSUBFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FSUBFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FSUBFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FSUBFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FSUBFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FSUBFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FSUBFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.bat.prolog.VisibilityAtom, de.tud.cs.st.bat.prolog.FinalTerm, de.tud.cs.st.bat.prolog.StaticTerm, de.tud.cs.st.bat.prolog.TransientTerm, de.tud.cs.st.bat.prolog.VolatileTerm, de.tud.cs.st.bat.prolog.SyntheticTerm, de.tud.cs.st.bat.prolog.DeprecatedTerm): void),de.tud.cs.st.bat.prolog.FieldFact{ public void <init>(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.bat.prolog.VisibilityAtom,de.tud.cs.st.bat.prolog.FinalTerm,de.tud.cs.st.bat.prolog.StaticTerm,de.tud.cs.st.bat.prolog.TransientTerm,de.tud.cs.st.bat.prolog.VolatileTerm,de.tud.cs.st.bat.prolog.SyntheticTerm,de.tud.cs.st.bat.prolog.DeprecatedTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),deprecatedTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.DeprecatedTerm deprecatedTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),fieldKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldKeyAtom),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.FieldKeyAtom fieldKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),finalTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.FinalTerm finalTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FieldFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FieldFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.sae.StringAtom nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),setClassFile,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom): void),de.tud.cs.st.bat.prolog.FieldFact{ public void setClassFile(de.tud.cs.st.bat.prolog.ClassFileKeyAtom) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),staticTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.StaticTerm staticTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),syntheticTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.SyntheticTerm syntheticTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),transientTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.TransientTerm transientTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),typeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.TypeTerm typeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),visibilityAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.VisibilityAtom),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.VisibilityAtom visibilityAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldFact),volatileTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.FieldFact{ public de.tud.cs.st.bat.prolog.VolatileTerm volatileTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldFact): void),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public void <init>(de.tud.cs.st.bat.prolog.FieldFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldFact),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public de.tud.cs.st.bat.prolog.FieldFact functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public de.tud.cs.st.sae.Fact functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),functor_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldFact): void),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public void functor_$eq(de.tud.cs.st.bat.prolog.FieldFact) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),keyPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public java.lang.String keyPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldKeyAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldKeyAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldRefTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FieldRefTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FieldRefTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.TypeTerm): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.FieldRefTerm${ public de.tud.cs.st.bat.prolog.FieldRefTerm apply(de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.FieldRefTerm${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),prototype,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.FieldRefTerm${ private de.tud.cs.st.bat.prolog.FieldRefTerm prototype() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm$),prototype_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldRefTerm): void),de.tud.cs.st.bat.prolog.FieldRefTerm${ private void prototype_$eq(de.tud.cs.st.bat.prolog.FieldRefTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldRefTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.FieldRefTerm{ public void <init>(de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FieldRefTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FieldRefTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldRefTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$declaringClassTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.FieldRefTerm{ private de.tud.cs.st.bat.prolog.ObjectTypeTerm de$tud$cs$st$bat$prolog$FieldRefTerm$$declaringClassTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$declaringClassTerm_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm): void),de.tud.cs.st.bat.prolog.FieldRefTerm{ public void de$tud$cs$st$bat$prolog$FieldRefTerm$$declaringClassTerm_$eq(de.tud.cs.st.bat.prolog.ObjectTypeTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$fieldTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.FieldRefTerm{ private de.tud.cs.st.bat.prolog.TypeTerm de$tud$cs$st$bat$prolog$FieldRefTerm$$fieldTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$fieldTypeTerm_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.FieldRefTerm{ public void de$tud$cs$st$bat$prolog$FieldRefTerm$$fieldTypeTerm_$eq(de.tud.cs.st.bat.prolog.TypeTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.FieldRefTerm{ private de.tud.cs.st.sae.StringAtom de$tud$cs$st$bat$prolog$FieldRefTerm$$nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),de$tud$cs$st$bat$prolog$FieldRefTerm$$nameAtom_$eq,MethodDescriptor((de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.FieldRefTerm{ public void de$tud$cs$st$bat$prolog$FieldRefTerm$$nameAtom_$eq(de.tud.cs.st.sae.StringAtom) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.FieldRefTerm{ public boolean equals(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FieldRefTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldRefTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldRefTerm{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FieldRefTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldRefTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldRefTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldValueFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FieldValueFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FieldValueFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldKeyAtom, de.tud.cs.st.bat.prolog.FieldValueTerm): de.tud.cs.st.bat.prolog.FieldValueFact),de.tud.cs.st.bat.prolog.FieldValueFact${ public de.tud.cs.st.bat.prolog.FieldValueFact apply(de.tud.cs.st.bat.prolog.FieldKeyAtom,de.tud.cs.st.bat.prolog.FieldValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldValueFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldKeyAtom, de.tud.cs.st.bat.prolog.FieldValueTerm): void),de.tud.cs.st.bat.prolog.FieldValueFact{ public void <init>(de.tud.cs.st.bat.prolog.FieldKeyAtom,de.tud.cs.st.bat.prolog.FieldValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FieldValueFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FieldValueFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FieldValueFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldValueFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),fieldKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldKeyAtom),de.tud.cs.st.bat.prolog.FieldValueFact{ public de.tud.cs.st.bat.prolog.FieldKeyAtom fieldKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),fieldValueTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldValueTerm),de.tud.cs.st.bat.prolog.FieldValueFact{ public de.tud.cs.st.bat.prolog.FieldValueTerm fieldValueTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FieldValueFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldValueFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FieldValueFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FieldValueFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FieldValueFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FinalTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FinalTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FinalTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm$),final_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.FinalTerm${ public de.tud.cs.st.bat.prolog.FinalTerm final_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm$),final_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.FinalTerm${ public de.tud.cs.st.bat.prolog.FinalTerm final_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FinalTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.FinalTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FinalTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FinalTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.FinalTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FinalTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FinalTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FinalTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FinalTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.FinalTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FinalTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FinalTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FloatTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FloatTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FloatTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FloatTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FloatTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FloatValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.FloatValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.FloatAtom): de.tud.cs.st.bat.prolog.FloatValueTerm),de.tud.cs.st.bat.prolog.FloatValueTerm${ public de.tud.cs.st.bat.prolog.FloatValueTerm apply(de.tud.cs.st.sae.FloatAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.FloatAtom): void),de.tud.cs.st.bat.prolog.FloatValueTerm{ public void <init>(de.tud.cs.st.sae.FloatAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.FloatValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.FloatValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.FloatValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.FloatValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.FloatValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FloatValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.FloatValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.FloatValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.bat.prolog.FloatValueTerm{ public de.tud.cs.st.sae.FloatAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/FloatValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.FloatValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.FieldRefTerm): void),de.tud.cs.st.bat.prolog.GETFIELDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.FieldRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.GETFIELDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.GETFIELDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.GETFIELDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),fieldRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.GETFIELDFact{ public de.tud.cs.st.bat.prolog.FieldRefTerm fieldRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.GETFIELDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.GETFIELDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETFIELDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.FieldRefTerm): void),de.tud.cs.st.bat.prolog.GETSTATICFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.FieldRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.GETSTATICFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.GETSTATICFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.GETSTATICFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),fieldRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.GETSTATICFact{ public de.tud.cs.st.bat.prolog.FieldRefTerm fieldRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.GETSTATICFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.GETSTATICFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GETSTATICFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.GOTOFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.GOTOFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.GOTOFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.GOTOFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.GOTOFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.GOTOFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.GOTOFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/GOTOFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2BFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2BFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2BFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2BFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2BFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2BFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2BFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2CFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2CFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2CFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2CFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2CFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2CFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2CFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2DFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2DFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2DFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2DFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2DFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2DFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2DFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2FFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2FFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2FFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2FFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2FFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2FFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2FFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2LFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2LFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2LFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2LFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2LFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2LFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2LFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.I2SFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.I2SFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.I2SFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.I2SFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.I2SFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.I2SFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/I2SFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IADDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IADDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IADDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IADDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IADDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IADDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IADDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IANDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IANDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IANDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IANDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IANDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IANDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IANDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_0Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_0Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_3Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_3Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_4Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_4Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_5Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_5Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ICONST_M1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ICONST_M1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IDIVFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IDIVFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IDIVFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IDIVFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IDIVFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IDIVFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IDIVFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFEQFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFEQFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFEQFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFEQFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFEQFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFEQFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFEQFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFEQFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFGEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFGEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFGEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFGEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFGEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFGEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFGEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFGTFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFGTFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFGTFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFGTFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFGTFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFGTFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFGTFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFGTFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFLEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFLEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFLEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFLEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFLEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFLEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFLEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFLTFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFLTFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFLTFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFLTFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFLTFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFLTFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFLTFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFLTFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFNEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFNEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFNEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFNEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFNEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFNEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFNEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFNONNULLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNONNULLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IFNULLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IFNULLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IFNULLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IFNULLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IFNULLFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IFNULLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IFNULLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IFNULLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ACMPEQFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPEQFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ACMPGEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPGEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ACMPNEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ACMPNEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ICMPEQFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPEQFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ICMPGTFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPGTFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ICMPLEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ICMPLTFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPLTFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IF_ICMPNEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IF_ICMPNEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IINCFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IINCFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IINCFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IINCFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),constValue,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IINCFact{ public de.tud.cs.st.sae.IntegerAtom constValue() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IINCFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IINCFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IINCFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IINCFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ILOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ILOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ILOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ILOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ILOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ILOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ILOADFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ILOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IMULFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IMULFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IMULFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IMULFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IMULFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IMULFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IMULFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.INEGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INEGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INEGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INEGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INEGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INEGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INEGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),referenceType,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.INSTANCEOFFact{ public de.tud.cs.st.bat.prolog.TypeTerm referenceType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INSTANCEOFFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.PretendedMethodRefTerm): void),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.PretendedMethodRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),pretendedMethodRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.PretendedMethodRefTerm),de.tud.cs.st.bat.prolog.INVOKEDYNAMICFact{ public de.tud.cs.st.bat.prolog.PretendedMethodRefTerm pretendedMethodRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEDYNAMICFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.MethodRefTerm, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.MethodRefTerm,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),count,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public de.tud.cs.st.sae.IntegerAtom count() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),methodRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.INVOKEINTERFACEFact{ public de.tud.cs.st.bat.prolog.MethodRefTerm methodRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEINTERFACEFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.MethodRefTerm): void),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.MethodRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),methodRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.INVOKESPECIALFact{ public de.tud.cs.st.bat.prolog.MethodRefTerm methodRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESPECIALFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.MethodRefTerm): void),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.MethodRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),methodRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.INVOKESTATICFact{ public de.tud.cs.st.bat.prolog.MethodRefTerm methodRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKESTATICFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.MethodRefTerm): void),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.MethodRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),methodRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.INVOKEVIRTUALFact{ public de.tud.cs.st.bat.prolog.MethodRefTerm methodRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/INVOKEVIRTUALFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IORFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IORFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IORFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IORFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IORFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IORFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IORFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IREMFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IREMFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IREMFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IREMFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IREMFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IREMFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IREMFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IRETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IRETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IRETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IRETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IRETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IRETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IRETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ISHLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ISHLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ISHLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ISHLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ISHLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ISHLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ISHRFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ISHRFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ISHRFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ISHRFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ISHRFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ISHRFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISHRFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ISTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ISTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ISTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ISTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ISTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ISTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ISTOREFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ISUBFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ISUBFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ISUBFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ISUBFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ISUBFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ISUBFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ISUBFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IUSHRFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IUSHRFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IUSHRFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IUSHRFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IUSHRFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IUSHRFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IUSHRFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IXORFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IXORFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IXORFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IXORFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IXORFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IXORFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IXORFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InstructionFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InstructionFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.InstructionFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InstructionFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InstructionFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InstructionFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.IntTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.IntTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IntTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IntTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IntTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.IntValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.IntValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.IntValueTerm),de.tud.cs.st.bat.prolog.IntValueTerm${ public de.tud.cs.st.bat.prolog.IntValueTerm apply(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.IntValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.IntValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.IntValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.IntValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.IntValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.IntValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IntValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.IntValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.IntValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.IntValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/IntValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.IntValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.InterfaceAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.InterfaceAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.InterfaceAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.InterfaceAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.InterfaceAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.InterfaceAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InterfaceAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InterfaceAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InterfaceAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/InterfaceAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InterfaceAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.JSRFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.JSRFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.JSRFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.JSRFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),branchoffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.JSRFact{ public de.tud.cs.st.sae.IntegerAtom branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.JSRFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.JSRFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/JSRFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.KeyValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.KeyValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.KeyValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.KeyValueTerm),de.tud.cs.st.bat.prolog.KeyValueTerm${ public de.tud.cs.st.bat.prolog.KeyValueTerm apply(de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.KeyValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.KeyValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.KeyValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.KeyValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.KeyValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.KeyValueTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.KeyValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.KeyValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),keyAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.KeyValueTerm{ public de.tud.cs.st.sae.IntegerAtom keyAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.KeyValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/KeyValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.KeyValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.L2DFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.L2DFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.L2DFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.L2DFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.L2DFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.L2DFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2DFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.L2FFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.L2FFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.L2FFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.L2FFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.L2FFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.L2FFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2FFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.L2IFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.L2IFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.L2IFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.L2IFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.L2IFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.L2IFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/L2IFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LADDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LADDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LADDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LADDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LADDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LADDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LADDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LANDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LANDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LANDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LANDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LANDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LANDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LANDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LCMPFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LCMPFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LCMPFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LCMPFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LCMPFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LCMPFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCMPFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LCONST_0Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_0Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LCONST_1Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LCONST_1Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.ValueTerm): void),de.tud.cs.st.bat.prolog.LDC2_WFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.ValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LDC2_WFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LDC2_WFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LDC2_WFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LDC2_WFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LDC2_WFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC2_WFact),value,MethodDescriptor((): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.LDC2_WFact{ public de.tud.cs.st.bat.prolog.ValueTerm value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.ValueTerm): void),de.tud.cs.st.bat.prolog.LDCFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.ValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LDCFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LDCFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LDCFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LDCFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LDCFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDCFact),value,MethodDescriptor((): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.LDCFact{ public de.tud.cs.st.bat.prolog.ValueTerm value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.ValueTerm): void),de.tud.cs.st.bat.prolog.LDC_WFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.ValueTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LDC_WFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LDC_WFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LDC_WFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LDC_WFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LDC_WFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDC_WFact),value,MethodDescriptor((): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.LDC_WFact{ public de.tud.cs.st.bat.prolog.ValueTerm value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LDIVFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LDIVFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LDIVFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LDIVFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LDIVFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LDIVFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LDIVFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LLOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LLOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LLOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LLOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LLOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LLOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LLOADFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LLOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LMULFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LMULFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LMULFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LMULFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LMULFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LMULFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LMULFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LNEGFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LNEGFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LNEGFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LNEGFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LNEGFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LNEGFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LNEGFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),defaultOffset,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public de.tud.cs.st.sae.IntegerAtom defaultOffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),npairs,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public de.tud.cs.st.sae.GroundTerms npairs() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),npairsCount,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LOOKUPSWITCHFact{ public de.tud.cs.st.sae.IntegerAtom npairsCount() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LOOKUPSWITCHFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LORFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LORFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LORFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LORFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LORFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LORFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LORFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LREMFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LREMFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LREMFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LREMFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LREMFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LREMFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LREMFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LRETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LRETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LRETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LRETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LRETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LRETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LRETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LSHLFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LSHLFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LSHLFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LSHLFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LSHLFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LSHLFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHLFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LSHRFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LSHRFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LSHRFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LSHRFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LSHRFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LSHRFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSHRFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LSTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LSTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LSTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LSTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LSTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LSTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LSTOREFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LSUBFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LSUBFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LSUBFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LSUBFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LSUBFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LSUBFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LSUBFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LUSHRFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LUSHRFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LUSHRFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LUSHRFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LUSHRFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LUSHRFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LUSHRFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LXORFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LXORFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LXORFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LXORFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LXORFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LXORFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LXORFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm${ public de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm apply(de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),lnAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public de.tud.cs.st.sae.IntegerAtom lnAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),pcAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public de.tud.cs.st.sae.IntegerAtom pcAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumberTableEntryTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumbersTableFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LineNumbersTableFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LineNumbersTableFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.LineNumbersTableFact),de.tud.cs.st.bat.prolog.LineNumbersTableFact${ public de.tud.cs.st.bat.prolog.LineNumbersTableFact apply(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),lineNumberTableEntryTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public de.tud.cs.st.sae.GroundTerms lineNumberTableEntryTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),methodKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodKeyAtom),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public de.tud.cs.st.bat.prolog.MethodKeyAtom methodKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LineNumbersTableFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LineNumbersTableFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LongTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LongTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LongTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LongTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LongTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LongValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.LongValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.LongValueTerm),de.tud.cs.st.bat.prolog.LongValueTerm${ public de.tud.cs.st.bat.prolog.LongValueTerm apply(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.LongValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.LongValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.LongValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.LongValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.LongValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.LongValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LongValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.LongValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.LongValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.LongValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/LongValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.LongValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MONITORENTERFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITORENTERFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MONITOREXITFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MONITOREXITFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.TypeTerm, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.TypeTerm,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),componentType,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public de.tud.cs.st.bat.prolog.TypeTerm componentType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),dimensions,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public de.tud.cs.st.sae.IntegerAtom dimensions() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MULTIANEWARRAYFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MULTIANEWARRAYFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.GroundTerms, de.tud.cs.st.bat.prolog.TypeTerm): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ public de.tud.cs.st.bat.prolog.MethodDescriptorTerm apply(de.tud.cs.st.sae.GroundTerms,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),prototype,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ private de.tud.cs.st.bat.prolog.MethodDescriptorTerm prototype() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm$),prototype_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodDescriptorTerm): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm${ private void prototype_$eq(de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.GroundTerms, de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public void <init>(de.tud.cs.st.sae.GroundTerms,de.tud.cs.st.bat.prolog.TypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$parameterTypeTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ private de.tud.cs.st.sae.GroundTerms de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$parameterTypeTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$parameterTypeTerms_$eq,MethodDescriptor((de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public void de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$parameterTypeTerms_$eq(de.tud.cs.st.sae.GroundTerms) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$returnTypeTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ private de.tud.cs.st.bat.prolog.TypeTerm de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$returnTypeTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$returnTypeTerm_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.TypeTerm): void),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public void de$tud$cs$st$bat$prolog$MethodDescriptorTerm$$returnTypeTerm_$eq(de.tud.cs.st.bat.prolog.TypeTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodDescriptorTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodDescriptorTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodExceptionsFact$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.MethodExceptionsFact$$anonfun$apply$1{ public void <init>(de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$$anonfun$apply$1),apply,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.MethodExceptionsFact$$anonfun$apply$1{ public de.tud.cs.st.sae.GroundTerms apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodExceptionsFact$$anonfun$apply$1{ public java.lang.Object apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodExceptionsFact$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodExceptionsFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodExceptionsFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodExceptionsFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): de.tud.cs.st.bat.prolog.MethodExceptionsFact),de.tud.cs.st.bat.prolog.MethodExceptionsFact${ public de.tud.cs.st.bat.prolog.MethodExceptionsFact apply(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.MethodExceptionsFact${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),exceptionsTerms,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public de.tud.cs.st.sae.GroundTerms exceptionsTerms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),methodKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodKeyAtom),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public de.tud.cs.st.bat.prolog.MethodKeyAtom methodKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodExceptionsFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodExceptionsFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodFact${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodFact${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodFact${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),ABSTRACT_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long ABSTRACT_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),BRIDGE_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long BRIDGE_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),DEFAULT_VISIBILITY,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long DEFAULT_VISIBILITY() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),DEPRECATED_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long DEPRECATED_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),FINAL_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long FINAL_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),NATIVE_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long NATIVE_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),PRIVATE_VISIBILITY,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long PRIVATE_VISIBILITY() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),PROTECTED_VISIBILITY,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long PROTECTED_VISIBILITY() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),PUBLIC_VISIBILITY,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long PUBLIC_VISIBILITY() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),STATIC_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long STATIC_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),STRICT_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long STRICT_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),SYNCHRONIZED_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long SYNCHRONIZED_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),SYNTHETIC_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long SYNTHETIC_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),VARARGS_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long VARARGS_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),VISIBILITY_MASK,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact${ public long VISIBILITY_MASK() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),apply,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm, long): de.tud.cs.st.bat.prolog.MethodFact),de.tud.cs.st.bat.prolog.MethodFact${ public de.tud.cs.st.bat.prolog.MethodFact apply(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact$),visibilityAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.VisibilityAtom[]),de.tud.cs.st.bat.prolog.MethodFact${ public de.tud.cs.st.bat.prolog.VisibilityAtom[] visibilityAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm, long): void),de.tud.cs.st.bat.prolog.MethodFact{ public void <init>(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MethodFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MethodFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.MethodFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),methodDescriptorTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.MethodFact{ public de.tud.cs.st.bat.prolog.MethodDescriptorTerm methodDescriptorTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),methodKeyAtom,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodKeyAtom),de.tud.cs.st.bat.prolog.MethodFact{ public de.tud.cs.st.bat.prolog.MethodKeyAtom methodKeyAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),methodPropertiesFlags,MethodDescriptor((): long),de.tud.cs.st.bat.prolog.MethodFact{ public long methodPropertiesFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.MethodFact{ public de.tud.cs.st.sae.StringAtom nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),setClassFile,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom): void),de.tud.cs.st.bat.prolog.MethodFact{ public void setClassFile(de.tud.cs.st.bat.prolog.ClassFileKeyAtom) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodFact): void),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public void <init>(de.tud.cs.st.bat.prolog.MethodFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodFact),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public de.tud.cs.st.bat.prolog.MethodFact functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),functor,MethodDescriptor((): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public de.tud.cs.st.sae.Fact functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),functor_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodFact): void),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public void functor_$eq(de.tud.cs.st.bat.prolog.MethodFact) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),keyPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public java.lang.String keyPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodKeyAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodKeyAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodRefTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodRefTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.MethodRefTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.MethodRefTerm${ public de.tud.cs.st.bat.prolog.MethodRefTerm apply(de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.MethodRefTerm${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),prototype,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodRefTerm),de.tud.cs.st.bat.prolog.MethodRefTerm${ private de.tud.cs.st.bat.prolog.MethodRefTerm prototype() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm$),prototype_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodRefTerm): void),de.tud.cs.st.bat.prolog.MethodRefTerm${ private void prototype_$eq(de.tud.cs.st.bat.prolog.MethodRefTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodRefTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm, de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm): void),de.tud.cs.st.bat.prolog.MethodRefTerm{ public void <init>(de.tud.cs.st.bat.prolog.ObjectTypeTerm,de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.MethodRefTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.MethodRefTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodRefTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$declaringClassTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.MethodRefTerm{ private de.tud.cs.st.bat.prolog.ObjectTypeTerm de$tud$cs$st$bat$prolog$MethodRefTerm$$declaringClassTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$declaringClassTerm_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.ObjectTypeTerm): void),de.tud.cs.st.bat.prolog.MethodRefTerm{ public void de$tud$cs$st$bat$prolog$MethodRefTerm$$declaringClassTerm_$eq(de.tud.cs.st.bat.prolog.ObjectTypeTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$methodDescriptorTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.MethodRefTerm{ private de.tud.cs.st.bat.prolog.MethodDescriptorTerm de$tud$cs$st$bat$prolog$MethodRefTerm$$methodDescriptorTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$methodDescriptorTerm_$eq,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodDescriptorTerm): void),de.tud.cs.st.bat.prolog.MethodRefTerm{ public void de$tud$cs$st$bat$prolog$MethodRefTerm$$methodDescriptorTerm_$eq(de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.MethodRefTerm{ private de.tud.cs.st.sae.StringAtom de$tud$cs$st$bat$prolog$MethodRefTerm$$nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),de$tud$cs$st$bat$prolog$MethodRefTerm$$nameAtom_$eq,MethodDescriptor((de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.MethodRefTerm{ public void de$tud$cs$st$bat$prolog$MethodRefTerm$$nameAtom_$eq(de.tud.cs.st.sae.StringAtom) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.MethodRefTerm{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.MethodRefTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodRefTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.MethodRefTerm{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.MethodRefTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/MethodRefTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.MethodRefTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),atype,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public de.tud.cs.st.sae.IntegerAtom atype() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.NEWARRAYFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWARRAYFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.ObjectTypeTerm): void),de.tud.cs.st.bat.prolog.NEWFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.ObjectTypeTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.NEWFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.NEWFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NEWFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.NEWFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.NEWFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),objectType,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.NEWFact{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm objectType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NEWFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.NOPFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.NOPFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.NOPFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NOPFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.NOPFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.NOPFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NOPFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NativeTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.NativeTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.NativeTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm$),native_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.NativeTerm),de.tud.cs.st.bat.prolog.NativeTerm${ public de.tud.cs.st.bat.prolog.NativeTerm native_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm$),native_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.NativeTerm),de.tud.cs.st.bat.prolog.NativeTerm${ public de.tud.cs.st.bat.prolog.NativeTerm native_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NativeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.NativeTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.NativeTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.NativeTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.NativeTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.NativeTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.NativeTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.NativeTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.NativeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.NativeTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/NativeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.NativeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ObjectTypeTerm$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$$anonfun$apply$2),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.prolog.ObjectTypeTerm$$anonfun$apply$2{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$$anonfun$apply$2),apply,MethodDescriptor((): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.ObjectTypeTerm$$anonfun$apply$2{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$$anonfun$apply$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ObjectTypeTerm$$anonfun$apply$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ObjectTypeTerm$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ObjectTypeTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ObjectTypeTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ObjectTypeTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.ObjectTypeTerm${ public de.tud.cs.st.bat.prolog.ObjectTypeTerm apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.prolog.ObjectTypeTerm${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public void <init>(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ObjectTypeTerm{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ObjectTypeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TypeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.POP2Fact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.POP2Fact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.POP2Fact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.POP2Fact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.POP2Fact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.POP2Fact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POP2Fact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.POPFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.POPFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.POPFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.POPFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.POPFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.POPFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/POPFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.FieldRefTerm): void),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.FieldRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),fieldRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public de.tud.cs.st.bat.prolog.FieldRefTerm fieldRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PUTFIELDFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTFIELDFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.bat.prolog.FieldRefTerm): void),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.bat.prolog.FieldRefTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),fieldRefTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.FieldRefTerm),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public de.tud.cs.st.bat.prolog.FieldRefTerm fieldRefTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PUTSTATICFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PUTSTATICFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm): de.tud.cs.st.bat.prolog.PretendedMethodRefTerm),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm${ public de.tud.cs.st.bat.prolog.PretendedMethodRefTerm apply(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom, de.tud.cs.st.bat.prolog.MethodDescriptorTerm): void),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public void <init>(de.tud.cs.st.sae.StringAtom,de.tud.cs.st.bat.prolog.MethodDescriptorTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),methodDescriptorTerm,MethodDescriptor((): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public de.tud.cs.st.bat.prolog.MethodDescriptorTerm methodDescriptorTerm() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),nameAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public de.tud.cs.st.sae.StringAtom nameAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PretendedMethodRefTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PretendedMethodRefTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VisibilityAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VisibilityAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VisibilityAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PrivateVisibilityAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PrivateVisibilityAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VisibilityAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VisibilityAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VisibilityAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ProtectedVisibilityAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ProtectedVisibilityAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PublicVisibilityAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.PublicVisibilityAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VisibilityAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.PublicVisibilityAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PublicVisibilityAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VisibilityAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VisibilityAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/PublicVisibilityAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.PublicVisibilityAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.RETFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.RETFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.RETFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.RETFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.RETFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.RETFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),lvIndex,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.RETFact{ public de.tud.cs.st.sae.IntegerAtom lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.RETURNFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.RETURNFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.RETURNFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.RETURNFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.RETURNFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.RETURNFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RETURNFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm$),runtime_visible_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.RuntimeVisibleTerm),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm${ public de.tud.cs.st.bat.prolog.RuntimeVisibleTerm runtime_visible_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm$),runtime_visible_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.RuntimeVisibleTerm),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm${ public de.tud.cs.st.bat.prolog.RuntimeVisibleTerm runtime_visible_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/RuntimeVisibleTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.RuntimeVisibleTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.SALOADFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SALOADFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SALOADFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SALOADFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SALOADFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SALOADFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SALOADFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.SASTOREFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SASTOREFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SASTOREFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SASTOREFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SASTOREFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SASTOREFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SASTOREFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.SIPUSHFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SIPUSHFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SIPUSHFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SIPUSHFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SIPUSHFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SIPUSHFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SIPUSHFact),value,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.SIPUSHFact{ public de.tud.cs.st.sae.IntegerAtom value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.SWAPFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SWAPFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SWAPFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SWAPFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SWAPFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SWAPFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SWAPFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ShortTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ShortTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ShortTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ShortTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ShortTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ShortValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.ShortValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): de.tud.cs.st.bat.prolog.ShortValueTerm),de.tud.cs.st.bat.prolog.ShortValueTerm${ public de.tud.cs.st.bat.prolog.ShortValueTerm apply(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtom): void),de.tud.cs.st.bat.prolog.ShortValueTerm{ public void <init>(de.tud.cs.st.sae.IntegerAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.ShortValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.ShortValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.ShortValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.ShortValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.ShortValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ShortValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.ShortValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.ShortValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.ShortValueTerm{ public de.tud.cs.st.sae.IntegerAtom valueAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/ShortValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.ShortValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleValueTerm$class),$init$,MethodDescriptor((de.tud.cs.st.bat.prolog.SimpleValueTerm): void),de.tud.cs.st.bat.prolog.SimpleValueTerm$class{ public static void $init$(de.tud.cs.st.bat.prolog.SimpleValueTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleValueTerm$class),apply,MethodDescriptor((de.tud.cs.st.bat.prolog.SimpleValueTerm, int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.SimpleValueTerm$class{ public static de.tud.cs.st.sae.ValueAtom apply(de.tud.cs.st.bat.prolog.SimpleValueTerm,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SimpleValueTerm$class),arity,MethodDescriptor((de.tud.cs.st.bat.prolog.SimpleValueTerm): int),de.tud.cs.st.bat.prolog.SimpleValueTerm$class{ public static int arity(de.tud.cs.st.bat.prolog.SimpleValueTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StaticTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StaticTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StaticTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm$),static_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.StaticTerm${ public de.tud.cs.st.bat.prolog.StaticTerm static_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm$),static_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.StaticTerm${ public de.tud.cs.st.bat.prolog.StaticTerm static_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StaticTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.StaticTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.StaticTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.StaticTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.StaticTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StaticTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.StaticTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StaticTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.StaticTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.StaticTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StaticTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StaticTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StrictTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StrictTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StrictTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm$),strict_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.StrictTerm),de.tud.cs.st.bat.prolog.StrictTerm${ public de.tud.cs.st.bat.prolog.StrictTerm strict_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm$),strict_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.StrictTerm),de.tud.cs.st.bat.prolog.StrictTerm${ public de.tud.cs.st.bat.prolog.StrictTerm strict_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StrictTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.StrictTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.StrictTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.StrictTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.StrictTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StrictTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.StrictTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StrictTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.StrictTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.StrictTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StrictTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StrictTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StringValueTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StringValueTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.StringValueTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm$),apply,MethodDescriptor((de.tud.cs.st.sae.StringAtom): de.tud.cs.st.bat.prolog.StringValueTerm),de.tud.cs.st.bat.prolog.StringValueTerm${ public de.tud.cs.st.bat.prolog.StringValueTerm apply(de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StringValueTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.StringAtom): void),de.tud.cs.st.bat.prolog.StringValueTerm{ public void <init>(de.tud.cs.st.sae.StringAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.StringValueTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.StringValueTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.StringValueTerm{ public de.tud.cs.st.sae.ValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.StringValueTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.StringValueTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StringValueTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.StringValueTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.StringValueTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.StringValueTerm{ public de.tud.cs.st.sae.StringAtom valueAtom() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/StringValueTerm),valueAtom,MethodDescriptor((): de.tud.cs.st.sae.ValueAtom),de.tud.cs.st.bat.prolog.StringValueTerm{ public de.tud.cs.st.sae.ValueAtom valueAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SynchronizedTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.SynchronizedTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.SynchronizedTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm$),synchronized_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.SynchronizedTerm),de.tud.cs.st.bat.prolog.SynchronizedTerm${ public de.tud.cs.st.bat.prolog.SynchronizedTerm synchronized_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm$),synchronized_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.SynchronizedTerm),de.tud.cs.st.bat.prolog.SynchronizedTerm${ public de.tud.cs.st.bat.prolog.SynchronizedTerm synchronized_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SynchronizedTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SynchronizedTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SyntheticTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.SyntheticTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.SyntheticTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm$),synthetic_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.SyntheticTerm${ public de.tud.cs.st.bat.prolog.SyntheticTerm synthetic_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm$),synthetic_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.SyntheticTerm${ public de.tud.cs.st.bat.prolog.SyntheticTerm synthetic_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SyntheticTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.SyntheticTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SyntheticTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SyntheticTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.SyntheticTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SyntheticTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.SyntheticTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SyntheticTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.SyntheticTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.SyntheticTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/SyntheticTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SyntheticTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.InstructionFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.IntegerAtom, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public void <init>(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.IntegerAtom,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),default,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.IntegerAtom default() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),high,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.IntegerAtom high() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.InstructionFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),jumpOffsets,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.GroundTerms jumpOffsets() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),low,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.TABLESWITCHFact{ public de.tud.cs.st.sae.IntegerAtom low() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TABLESWITCHFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.InstructionFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TransientTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.TransientTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.TransientTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm$),transient_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.TransientTerm${ public de.tud.cs.st.bat.prolog.TransientTerm transient_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm$),transient_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.TransientTerm${ public de.tud.cs.st.bat.prolog.TransientTerm transient_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TransientTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.TransientTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.TransientTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.TransientTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.TransientTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TransientTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.TransientTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TransientTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TransientTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.TransientTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TransientTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TransientTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TypeTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TypeTerm),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.TypeTerm{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TypeTerm),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TypeTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/TypeTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.TypeTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VarargsTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VarargsTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VarargsTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm$),varargs_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.VarargsTerm),de.tud.cs.st.bat.prolog.VarargsTerm${ public de.tud.cs.st.bat.prolog.VarargsTerm varargs_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm$),varargs_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.VarargsTerm),de.tud.cs.st.bat.prolog.VarargsTerm${ public de.tud.cs.st.bat.prolog.VarargsTerm varargs_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VarargsTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.VarargsTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VarargsTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VarargsTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.VarargsTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VarargsTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.VarargsTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VarargsTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VarargsTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.VarargsTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VarargsTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VarargsTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VisibilityAtom{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VisibilityAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VisibilityAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VisibilityAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VisibilityAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VisibilityAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VisibilityAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.TypeTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VoidTypeAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VoidTypeAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.VoidTypeAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VoidTypeAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VoidTypeAtom${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.TypeTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.SimpleTypeAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),category,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VoidTypeAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VoidTypeAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VolatileTerm${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VolatileTerm${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.VolatileTerm${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm$),volatile_no,MethodDescriptor((): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.VolatileTerm${ public de.tud.cs.st.bat.prolog.VolatileTerm volatile_no() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm$),volatile_yes,MethodDescriptor((): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.VolatileTerm${ public de.tud.cs.st.bat.prolog.VolatileTerm volatile_yes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VolatileTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),<init>,MethodDescriptor((de.tud.cs.st.sae.TruthValueAtom): void),de.tud.cs.st.bat.prolog.VolatileTerm{ public void <init>(de.tud.cs.st.sae.TruthValueAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.bat.prolog.VolatileTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.bat.prolog.VolatileTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.VolatileTerm{ public de.tud.cs.st.sae.TruthValueAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),arity,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.VolatileTerm{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.prolog.VolatileTerm{ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VolatileTerm{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.VolatileTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),state,MethodDescriptor((): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.bat.prolog.VolatileTerm{ public de.tud.cs.st.sae.TruthValueAtom state() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/VolatileTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.VolatileTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, scala.RandomAccessSeq): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),apply,MethodDescriptor((int): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.ClassFileFact): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.ClassFileFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public void apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$ClassFile$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$ClassFile$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.FieldFact): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.FieldFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public void apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Field_Info$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Field_Info$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.MethodFact): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.MethodFact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public void apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$Method_Info$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$Method_Info$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public de.tud.cs.st.bat.prolog.ElementValuePairTerm apply(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public void apply(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.bat.prolog.reader.ClassFileBinding),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public de.tud.cs.st.bat.prolog.reader.ClassFileBinding de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddAnnotationFacts$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public de.tud.cs.st.bat.prolog.ObjectTypeTerm apply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodExceptionsFact$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ExceptionTableEntry): de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public de.tud.cs.st.bat.prolog.ExceptionTableEntryTerm apply(de.tud.cs.st.bat.resolved.ExceptionTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodImplementationFacts$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.LineNumberTableEntry): de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public de.tud.cs.st.bat.prolog.LineNumberTableEntryTerm apply(de.tud.cs.st.bat.resolved.LineNumberTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.MethodKeyAtom, java.lang.Object): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.MethodKeyAtom,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public void apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$createAndAddMethodLineNumbersTableFact$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public de.tud.cs.st.bat.prolog.ValueTerm apply(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public de.tud.cs.st.bat.prolog.ElementValuePairTerm apply(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getElementValueTerm$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getElementValueTerm$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public de.tud.cs.st.bat.prolog.TypeTerm apply(de.tud.cs.st.bat.resolved.Type) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$$anonfun$getMethodDescriptorTerm$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$$anonfun$getMethodDescriptorTerm$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void $init$(de.tud.cs.st.bat.prolog.reader.ClassFileBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),ClassFile,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ClassFileFact ClassFile(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),Field_Info,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.FieldFact),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.FieldFact Field_Info(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),Method_Info,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.MethodFact),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.MethodFact Method_Info(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddAnnotationFacts,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddAnnotationFacts(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddClassFileSourceFact,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.ClassFileKeyAtom, de.tud.cs.st.bat.resolved.SourceFile_attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddClassFileSourceFact(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.ClassFileKeyAtom,de.tud.cs.st.bat.resolved.SourceFile_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddFieldValueFact,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.FieldKeyAtom, de.tud.cs.st.bat.resolved.ConstantValue_attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddFieldValueFact(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.FieldKeyAtom,de.tud.cs.st.bat.resolved.ConstantValue_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddMethodExceptionsFact,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Exceptions_attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddMethodExceptionsFact(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddMethodImplementationFacts,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddMethodImplementationFacts(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),createAndAddMethodLineNumbersTableFact,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.prolog.MethodKeyAtom, scala.Seq): void),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static void createAndAddMethodLineNumbersTableFact(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.prolog.MethodKeyAtom,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getAbstractTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.AbstractTerm getAbstractTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getArrayTypeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ArrayType): de.tud.cs.st.bat.prolog.ArrayTypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ArrayTypeTerm getArrayTypeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ArrayType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getBridgeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.BridgeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.BridgeTerm getBridgeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getClassCategoryAtom,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.ClassCategoryAtom),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ClassCategoryAtom getClassCategoryAtom(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getConstantValueTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ValueTerm getConstantValueTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getDeprecatedTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, scala.Seq): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.DeprecatedTerm getDeprecatedTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getElementValuePairTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ElementValuePair): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ElementValuePairTerm getElementValuePairTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getElementValueTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ValueTerm getElementValueTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getFieldTypeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.TypeTerm getFieldTypeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getFieldValueTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.FieldValueTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.FieldValueTerm getFieldValueTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getFinalTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.FinalTerm getFinalTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getMethodDescriptorTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.MethodDescriptorTerm getMethodDescriptorTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getNativeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.NativeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.NativeTerm getNativeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getObjectTypeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getObjectTypeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getStaticTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.StaticTerm getStaticTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getStrictTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.StrictTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.StrictTerm getStrictTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getStringAtom,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.RandomAccessSeq): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.sae.StringAtom getStringAtom(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getSynchronizedTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.SynchronizedTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.SynchronizedTerm getSynchronizedTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getSyntheticTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.Seq): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.SyntheticTerm getSyntheticTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getTransientTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.TransientTerm getTransientTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getTypeTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, de.tud.cs.st.bat.resolved.Type): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.TypeTerm getTypeTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,de.tud.cs.st.bat.resolved.Type) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getVarargsTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.VarargsTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.VarargsTerm getVarargsTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getVisibilityAtom,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.Enumeration$Value): de.tud.cs.st.bat.prolog.VisibilityAtom),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.VisibilityAtom getVisibilityAtom(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),getVolatileTerm,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.prolog.VolatileTerm getVolatileTerm(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),isDeprecated,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static boolean isDeprecated(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/ClassFileBinding$class),isSynthetic,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.ClassFileBinding, int, scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.ClassFileBinding$class{ public static boolean isSynthetic(de.tud.cs.st.bat.prolog.reader.ClassFileBinding,int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.CodeBinding): void),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public void <init>(de.tud.cs.st.bat.prolog.reader.CodeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),apply,MethodDescriptor((scala.Tuple2): de.tud.cs.st.bat.prolog.KeyValueTerm),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public de.tud.cs.st.bat.prolog.KeyValueTerm apply(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),<init>,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.CodeBinding): void),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public void <init>(de.tud.cs.st.bat.prolog.reader.CodeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),apply,MethodDescriptor((int): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public de.tud.cs.st.sae.IntegerAtom apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$$anonfun$createInstructionFact$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.prolog.reader.CodeBinding$$anonfun$createInstructionFact$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.CodeBinding): void),de.tud.cs.st.bat.prolog.reader.CodeBinding$class{ public static void $init$(de.tud.cs.st.bat.prolog.reader.CodeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/CodeBinding$class),createInstructionFact,MethodDescriptor((de.tud.cs.st.bat.prolog.reader.CodeBinding, de.tud.cs.st.bat.prolog.MethodKeyAtom, int, de.tud.cs.st.bat.resolved.Instruction): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.reader.CodeBinding$class{ public static de.tud.cs.st.sae.Fact createInstructionFact(de.tud.cs.st.bat.prolog.reader.CodeBinding,de.tud.cs.st.bat.prolog.MethodKeyAtom,int,de.tud.cs.st.bat.resolved.Instruction) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.Factory${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.reader.Factory${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Annotation,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Annotation(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),AnnotationDefault_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object AnnotationDefault_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue AnnotationValue(de.tud.cs.st.bat.resolved.Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),AnnotationValue,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object AnnotationValue(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ArrayValue(scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Attributes,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Attributes(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),BooleanValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object BooleanValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ByteValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ByteValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Class_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$ CONSTANT_Class_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Class_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Class_info_IndexToObjectType,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ObjectType CONSTANT_Class_info_IndexToObjectType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Double_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$ CONSTANT_Double_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Double_info,MethodDescriptor((double): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Fieldref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$ CONSTANT_Fieldref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Fieldref_info_IndexToFieldref,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple3 CONSTANT_Fieldref_info_IndexToFieldref(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Float_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$ CONSTANT_Float_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Float_info,MethodDescriptor((float): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Integer_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$ CONSTANT_Integer_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Integer_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$ CONSTANT_InterfaceMethodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Long_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$ CONSTANT_Long_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Long_info,MethodDescriptor((long): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_MethodRef_info_IndexToMethodRef,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple3 CONSTANT_MethodRef_info_IndexToMethodRef(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Methodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$ CONSTANT_Methodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Methodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_NameAndType_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$ CONSTANT_NameAndType_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_NameAndType_info_IndexToNameAndFieldType,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndFieldType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_String_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$ CONSTANT_String_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_String_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$ CONSTANT_Utf8_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info_IndexToFieldDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.FieldDescriptor CONSTANT_Utf8_info_IndexToFieldDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info_IndexToMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.MethodDescriptor CONSTANT_Utf8_info_IndexToMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Utf8_info_IndexToString,MethodDescriptor((int, scala.RandomAccessSeq): java.lang.String),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.String CONSTANT_Utf8_info_IndexToString(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CONSTANT_Value_IndexToConstantValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ConstantValue CONSTANT_Value_IndexToConstantValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CharValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object CharValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ClassFile(int,int,int,int,int,scala.RandomAccessSeq,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ClassFileFact ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassFile,MethodDescriptor((java.io.DataInputStream): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ClassFileFact ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassFile,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ClassValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Code,MethodDescriptor((byte[], java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Code(byte[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Instruction[] Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Code_attribute,MethodDescriptor((int, int, int, int, java.lang.Object, scala.RandomAccessSeq, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Code_attribute(int,int,int,int,java.lang.Object,scala.RandomAccessSeq,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ConstantValue_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ConstantValue_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Deprecated_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Deprecated_attribute(int,java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),DoubleValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object DoubleValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValuePair,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ElementValuePair(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),EnumValue,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object EnumValue(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ExceptionTableEntry(int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Exceptions_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),FieldDescriptorToFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldDescriptor): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.FieldType FieldDescriptorToFieldType(de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Field_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Field_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.FieldFact),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.FieldFact Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),FloatValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object FloatValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),IntValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object IntValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LineNumberTableEntry,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object LineNumberTableEntry(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object LineNumberTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LongValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object LongValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Method_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Method_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.MethodFact),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.MethodFact Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object RuntimeInvisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object RuntimeInvisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object RuntimeVisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object RuntimeVisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType,MethodDescriptor((scala.Seq, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Seq SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType(scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ShortValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object ShortValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),SourceFile_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object SourceFile_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),StringValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object StringValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Synthetic_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Synthetic_attribute(int,java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.resolved.Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): scala.runtime.Null$),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.runtime.Null$ Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq, int): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory${ public java.lang.Object Unknown_attribute(java.io.DataInputStream,scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),addFact,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void addFact(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),clearFacts,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.reader.Factory${ public boolean clearFacts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),clearFacts_$eq,MethodDescriptor((boolean): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void clearFacts_$eq(boolean) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddAnnotationFacts,MethodDescriptor((de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddAnnotationFacts(de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddClassFileSourceFact,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom, de.tud.cs.st.bat.resolved.SourceFile_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddClassFileSourceFact(de.tud.cs.st.bat.prolog.ClassFileKeyAtom,de.tud.cs.st.bat.resolved.SourceFile_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddFieldValueFact,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldKeyAtom, de.tud.cs.st.bat.resolved.ConstantValue_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddFieldValueFact(de.tud.cs.st.bat.prolog.FieldKeyAtom,de.tud.cs.st.bat.resolved.ConstantValue_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddMethodExceptionsFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Exceptions_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddMethodExceptionsFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddMethodImplementationFacts,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddMethodImplementationFacts(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createAndAddMethodLineNumbersTableFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, scala.Seq): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void createAndAddMethodLineNumbersTableFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),createInstructionFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, int, de.tud.cs.st.bat.resolved.Instruction): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.sae.Fact createInstructionFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,int,de.tud.cs.st.bat.resolved.Instruction) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.collection.immutable.Map de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq,MethodDescriptor((scala.collection.immutable.Map): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq(scala.collection.immutable.Map) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader,MethodDescriptor((): scala.Function1[]),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Function1[] de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq,MethodDescriptor((scala.Function1[]): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq(scala.Function1[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$annotation_mask,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.Factory${ public int de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$annotation_mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$annotation_mask_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$annotation_mask_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$class_category_mask,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.Factory${ public int de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$class_category_mask() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$class_category_mask_$eq,MethodDescriptor((int): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void de$tud$cs$st$bat$prolog$reader$ClassFileBinding$$class_category_mask_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers,MethodDescriptor((): scala.Function4[]),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Function4[] de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers_$eq,MethodDescriptor((scala.Function4[]): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers_$eq(scala.Function4[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),facts,MethodDescriptor((): scala.List),de.tud.cs.st.bat.prolog.reader.Factory${ private scala.List facts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),facts_$eq,MethodDescriptor((scala.List): void),de.tud.cs.st.bat.prolog.reader.Factory${ private void facts_$eq(scala.List) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getAbstractTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.AbstractTerm getAbstractTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getArrayTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayType): de.tud.cs.st.bat.prolog.ArrayTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ArrayTypeTerm getArrayTypeTerm(de.tud.cs.st.bat.resolved.ArrayType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getBridgeTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.BridgeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.BridgeTerm getBridgeTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getClassCategoryAtom,MethodDescriptor((int): de.tud.cs.st.bat.prolog.ClassCategoryAtom),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ClassCategoryAtom getClassCategoryAtom(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getConstantValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ValueTerm getConstantValueTerm(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getDeprecatedTerm,MethodDescriptor((scala.Seq): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.DeprecatedTerm getDeprecatedTerm(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getElementValuePairTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ElementValuePairTerm getElementValuePairTerm(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getElementValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ValueTerm getElementValueTerm(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getFacts,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory${ public scala.Seq getFacts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getFieldTypeTerm,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.TypeTerm getFieldTypeTerm(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getFieldValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.FieldValueTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.FieldValueTerm getFieldValueTerm(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getFinalTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.FinalTerm getFinalTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getMethodDescriptorTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.MethodDescriptorTerm getMethodDescriptorTerm(de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getNativeTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.NativeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.NativeTerm getNativeTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getObjectTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getObjectTypeTerm,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getStaticTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.StaticTerm getStaticTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getStrictTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.StrictTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.StrictTerm getStrictTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getStringAtom,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.sae.StringAtom getStringAtom(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getSynchronizedTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.SynchronizedTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.SynchronizedTerm getSynchronizedTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getSyntheticTerm,MethodDescriptor((int, scala.Seq): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.SyntheticTerm getSyntheticTerm(int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getTransientTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.TransientTerm getTransientTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.TypeTerm getTypeTerm(de.tud.cs.st.bat.resolved.Type) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getVarargsTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.VarargsTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.VarargsTerm getVarargsTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getVisibilityAtom,MethodDescriptor((int, scala.Enumeration$Value): de.tud.cs.st.bat.prolog.VisibilityAtom),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.VisibilityAtom getVisibilityAtom(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),getVolatileTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.reader.Factory${ public de.tud.cs.st.bat.prolog.VolatileTerm getVolatileTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),isDeprecated,MethodDescriptor((scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.Factory${ public boolean isDeprecated(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),isSynthetic,MethodDescriptor((int, scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.Factory${ public boolean isSynthetic(int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory$),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.prolog.reader.Factory${ public void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.prolog.reader.Factory{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue AnnotationValue(de.tud.cs.st.bat.resolved.Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Class_info_IndexToObjectType,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ObjectType CONSTANT_Class_info_IndexToObjectType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Fieldref_info_IndexToFieldref,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Tuple3 CONSTANT_Fieldref_info_IndexToFieldref(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_MethodRef_info_IndexToMethodRef,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Tuple3 CONSTANT_MethodRef_info_IndexToMethodRef(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_NameAndType_info_IndexToNameAndFieldType,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndFieldType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Utf8_info_IndexToFieldDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.FieldDescriptor CONSTANT_Utf8_info_IndexToFieldDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Utf8_info_IndexToMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.MethodDescriptor CONSTANT_Utf8_info_IndexToMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Utf8_info_IndexToString,MethodDescriptor((int, scala.RandomAccessSeq): java.lang.String),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.String CONSTANT_Utf8_info_IndexToString(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CONSTANT_Value_IndexToConstantValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ConstantValue CONSTANT_Value_IndexToConstantValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ClassFileFact ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ClassFile,MethodDescriptor((java.io.DataInputStream): de.tud.cs.st.bat.prolog.ClassFileFact),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ClassFileFact ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Instruction[] Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.prolog.reader.Factory{ public static java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),FieldDescriptorToFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldDescriptor): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.FieldType FieldDescriptorToFieldType(de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.FieldFact),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.FieldFact Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.MethodFact),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.MethodFact Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType,MethodDescriptor((scala.Seq, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Seq SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType(scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.resolved.Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): scala.runtime.Null$),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.runtime.Null$ Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),clearFacts,MethodDescriptor((): boolean),de.tud.cs.st.bat.prolog.reader.Factory{ public static boolean clearFacts() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),clearFacts_$eq,MethodDescriptor((boolean): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void clearFacts_$eq(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddAnnotationFacts,MethodDescriptor((de.tud.cs.st.sae.KeyAtom, de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddAnnotationFacts(de.tud.cs.st.sae.KeyAtom,de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddClassFileSourceFact,MethodDescriptor((de.tud.cs.st.bat.prolog.ClassFileKeyAtom, de.tud.cs.st.bat.resolved.SourceFile_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddClassFileSourceFact(de.tud.cs.st.bat.prolog.ClassFileKeyAtom,de.tud.cs.st.bat.resolved.SourceFile_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddFieldValueFact,MethodDescriptor((de.tud.cs.st.bat.prolog.FieldKeyAtom, de.tud.cs.st.bat.resolved.ConstantValue_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddFieldValueFact(de.tud.cs.st.bat.prolog.FieldKeyAtom,de.tud.cs.st.bat.resolved.ConstantValue_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddMethodExceptionsFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Exceptions_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddMethodExceptionsFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddMethodImplementationFacts,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddMethodImplementationFacts(de.tud.cs.st.bat.prolog.MethodKeyAtom,de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createAndAddMethodLineNumbersTableFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, scala.Seq): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void createAndAddMethodLineNumbersTableFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),createInstructionFact,MethodDescriptor((de.tud.cs.st.bat.prolog.MethodKeyAtom, int, de.tud.cs.st.bat.resolved.Instruction): de.tud.cs.st.sae.Fact),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.sae.Fact createInstructionFact(de.tud.cs.st.bat.prolog.MethodKeyAtom,int,de.tud.cs.st.bat.resolved.Instruction) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getAbstractTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.AbstractTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.AbstractTerm getAbstractTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getArrayTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayType): de.tud.cs.st.bat.prolog.ArrayTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ArrayTypeTerm getArrayTypeTerm(de.tud.cs.st.bat.resolved.ArrayType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getBridgeTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.BridgeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.BridgeTerm getBridgeTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getClassCategoryAtom,MethodDescriptor((int): de.tud.cs.st.bat.prolog.ClassCategoryAtom),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ClassCategoryAtom getClassCategoryAtom(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getConstantValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ValueTerm getConstantValueTerm(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getDeprecatedTerm,MethodDescriptor((scala.Seq): de.tud.cs.st.bat.prolog.DeprecatedTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.DeprecatedTerm getDeprecatedTerm(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getElementValuePairTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): de.tud.cs.st.bat.prolog.ElementValuePairTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ElementValuePairTerm getElementValuePairTerm(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getElementValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.prolog.ValueTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ValueTerm getElementValueTerm(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getFacts,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.prolog.reader.Factory{ public static scala.Seq getFacts() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getFieldTypeTerm,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.TypeTerm getFieldTypeTerm(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getFieldValueTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.prolog.FieldValueTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.FieldValueTerm getFieldValueTerm(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getFinalTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.FinalTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.FinalTerm getFinalTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getMethodDescriptorTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.prolog.MethodDescriptorTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.MethodDescriptorTerm getMethodDescriptorTerm(de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getNativeTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.NativeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.NativeTerm getNativeTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getObjectTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getObjectTypeTerm,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.prolog.ObjectTypeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.ObjectTypeTerm getObjectTypeTerm(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getStaticTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.StaticTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.StaticTerm getStaticTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getStrictTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.StrictTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.StrictTerm getStrictTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getStringAtom,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.sae.StringAtom getStringAtom(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getSynchronizedTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.SynchronizedTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.SynchronizedTerm getSynchronizedTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getSyntheticTerm,MethodDescriptor((int, scala.Seq): de.tud.cs.st.bat.prolog.SyntheticTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.SyntheticTerm getSyntheticTerm(int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getTransientTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.TransientTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.TransientTerm getTransientTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getTypeTerm,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): de.tud.cs.st.bat.prolog.TypeTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.TypeTerm getTypeTerm(de.tud.cs.st.bat.resolved.Type) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getVarargsTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.VarargsTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.VarargsTerm getVarargsTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getVisibilityAtom,MethodDescriptor((int, scala.Enumeration$Value): de.tud.cs.st.bat.prolog.VisibilityAtom),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.VisibilityAtom getVisibilityAtom(int,scala.Enumeration$Value) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),getVolatileTerm,MethodDescriptor((int): de.tud.cs.st.bat.prolog.VolatileTerm),de.tud.cs.st.bat.prolog.reader.Factory{ public static de.tud.cs.st.bat.prolog.VolatileTerm getVolatileTerm(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),isDeprecated,MethodDescriptor((scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.Factory{ public static boolean isDeprecated(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),isSynthetic,MethodDescriptor((int, scala.Seq): boolean),de.tud.cs.st.bat.prolog.reader.Factory{ public static boolean isSynthetic(int,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/prolog/reader/Factory),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.prolog.reader.Factory{ public static void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.AALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.AALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.AALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.AALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.AALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.AALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.AASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.AASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.AASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.AASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.AASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.AASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ACONST_NULL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ACONST_NULL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ACONST_NULL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ACONST_NULL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ACONST_NULL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ACONST_NULL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ACONST_NULL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ACONST_NULL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ACONST_NULL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ACONST_NULL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ACONST_NULL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ACONST_NULL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ALOAD${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ALOAD),de.tud.cs.st.bat.resolved.ALOAD${ public de.tud.cs.st.bat.resolved.ALOAD apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ALOAD${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ALOAD): scala.Some),de.tud.cs.st.bat.resolved.ALOAD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ALOAD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.ALOAD{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ALOAD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.ALOAD{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ALOAD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ALOAD_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ALOAD_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ALOAD_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ALOAD_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ALOAD_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ALOAD_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ALOAD_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ALOAD_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ALOAD_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ALOAD_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ALOAD_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ANEWARRAY${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ANEWARRAY${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ANEWARRAY${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ANEWARRAY${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): de.tud.cs.st.bat.resolved.ANEWARRAY),de.tud.cs.st.bat.resolved.ANEWARRAY${ public de.tud.cs.st.bat.resolved.ANEWARRAY apply(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ANEWARRAY${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ANEWARRAY${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ANEWARRAY${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ANEWARRAY): scala.Some),de.tud.cs.st.bat.resolved.ANEWARRAY${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ANEWARRAY) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ANEWARRAY{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): void),de.tud.cs.st.bat.resolved.ANEWARRAY{ public void <init>(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),componentType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ANEWARRAY{ public de.tud.cs.st.bat.resolved.ReferenceType componentType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ANEWARRAY{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ANEWARRAY{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.ANEWARRAY{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ANEWARRAY{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ANEWARRAY{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ANEWARRAY{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ANEWARRAY{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ANEWARRAY{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ANEWARRAY{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ANEWARRAY{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ANEWARRAY{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ANEWARRAY),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ANEWARRAY{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ARETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ARETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ARETURN${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ARETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ARETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ARETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ARETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ARETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ARETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ARETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ARRAYLENGTH${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ARRAYLENGTH),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ARRAYLENGTH{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ASTORE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ASTORE),de.tud.cs.st.bat.resolved.ASTORE${ public de.tud.cs.st.bat.resolved.ASTORE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ASTORE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ASTORE): scala.Some),de.tud.cs.st.bat.resolved.ASTORE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ASTORE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.ASTORE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ASTORE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.ASTORE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ASTORE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ASTORE_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ASTORE_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ASTORE_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ASTORE_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ASTORE_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ASTORE_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ASTORE_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ASTORE_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ASTORE_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ASTORE_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ASTORE_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ATHROW${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ATHROW${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ATHROW${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ATHROW${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ATHROW${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ATHROW${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ATHROW${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ATHROW${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ATHROW${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ATHROW${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ATHROW{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ATHROW{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ATHROW{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ATHROW{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ATHROW{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ATHROW),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ATHROW{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): void),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): scala.xml.Elem),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Annotation$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotation${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Annotation${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Annotation${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.resolved.Annotation${ public de.tud.cs.st.bat.resolved.Annotation apply(de.tud.cs.st.bat.resolved.FieldType,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Annotation${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.Annotation${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Annotation${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): scala.Some),de.tud.cs.st.bat.resolved.Annotation${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotation{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.Annotation{ public void <init>(de.tud.cs.st.bat.resolved.FieldType,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),annotationType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.Annotation{ public de.tud.cs.st.bat.resolved.FieldType annotationType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),elementValuePairs,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.Annotation{ public scala.RandomAccessSeq elementValuePairs() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Annotation{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),gd1$1,MethodDescriptor((scala.RandomAccessSeq, de.tud.cs.st.bat.resolved.FieldType): boolean),de.tud.cs.st.bat.resolved.Annotation{ private boolean gd1$1(scala.RandomAccessSeq,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotation{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotation{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Annotation{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Annotation{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Annotation{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotation),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Annotation{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public de.tud.cs.st.bat.resolved.AnnotationDefault_attribute apply(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.AnnotationDefault_attribute): scala.Some),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.AnnotationDefault_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): void),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public void <init>(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),elementValue,MethodDescriptor((): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public de.tud.cs.st.bat.resolved.ElementValue elementValue() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): boolean),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationDefault_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.AnnotationDefault_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AnnotationValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AnnotationValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AnnotationValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): de.tud.cs.st.bat.resolved.AnnotationValue),de.tud.cs.st.bat.resolved.AnnotationValue${ public de.tud.cs.st.bat.resolved.AnnotationValue apply(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.AnnotationValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AnnotationValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.AnnotationValue): scala.Some),de.tud.cs.st.bat.resolved.AnnotationValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.AnnotationValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): void),de.tud.cs.st.bat.resolved.AnnotationValue{ public void <init>(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),annotation,MethodDescriptor((): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.resolved.AnnotationValue{ public de.tud.cs.st.bat.resolved.Annotation annotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.AnnotationValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),gd13$1,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): boolean),de.tud.cs.st.bat.resolved.AnnotationValue{ private boolean gd13$1(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AnnotationValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AnnotationValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AnnotationValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.AnnotationValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AnnotationValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.AnnotationValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): scala.xml.Elem),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$$anonfun$annotationsToXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Annotations_Attribute$$anonfun$annotationsToXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotations_Attribute): void),de.tud.cs.st.bat.resolved.Annotations_Attribute$class{ public static void $init$(de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Annotations_Attribute$class),annotationsToXML,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotations_Attribute): scala.Seq),de.tud.cs.st.bat.resolved.Annotations_Attribute$class{ public static scala.Seq annotationsToXML(de.tud.cs.st.bat.resolved.Annotations_Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.AppendFrame): void),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.AppendFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.VerificationTypeInfo): scala.xml.Node),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AppendFrame$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AppendFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.AppendFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AppendFrame),de.tud.cs.st.bat.resolved.AppendFrame${ public de.tud.cs.st.bat.resolved.AppendFrame apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.AppendFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.AppendFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AppendFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.AppendFrame): scala.Some),de.tud.cs.st.bat.resolved.AppendFrame${ public scala.Some unapply(de.tud.cs.st.bat.resolved.AppendFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.AppendFrame{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.AppendFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),gd6$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.resolved.AppendFrame{ private boolean gd6$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),offsetDelta,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame{ public int offsetDelta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.AppendFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.AppendFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AppendFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.AppendFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.AppendFrame{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.AppendFrame{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/AppendFrame),verificationTypeInfoLocals,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.AppendFrame{ public scala.RandomAccessSeq verificationTypeInfoLocals() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayType$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$$anonfun$apply$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.ArrayType$$anonfun$apply$2{ public void <init>(de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$$anonfun$apply$2),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.ArrayType),de.tud.cs.st.bat.resolved.ArrayType$$anonfun$apply$2{ public de.tud.cs.st.bat.resolved.ArrayType apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$$anonfun$apply$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayType$$anonfun$apply$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayType$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): de.tud.cs.st.bat.resolved.ArrayType),de.tud.cs.st.bat.resolved.ArrayType${ public de.tud.cs.st.bat.resolved.ArrayType apply(de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.resolved.ArrayType${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayType): scala.Option),de.tud.cs.st.bat.resolved.ArrayType${ public scala.Option unapply(de.tud.cs.st.bat.resolved.ArrayType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.ArrayType{ public void <init>(de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),componentType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.ArrayType{ public de.tud.cs.st.bat.resolved.FieldType componentType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayType{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ArrayType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayType{ public java.lang.String toJava() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayType{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayTypeTest): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$1{ public void <init>(de.tud.cs.st.bat.resolved.ArrayTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayTypeTest): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$2{ public void <init>(de.tud.cs.st.bat.resolved.ArrayTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayTypeTest): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$3{ public void <init>(de.tud.cs.st.bat.resolved.ArrayTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$3),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$3{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),execute,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayTypeTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.bat.resolved.ArrayTypeTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayValue): void),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.ArrayValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue): scala.xml.Node),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayValue$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ArrayValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ArrayValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ArrayValue),de.tud.cs.st.bat.resolved.ArrayValue${ public de.tud.cs.st.bat.resolved.ArrayValue apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ArrayValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ArrayValue): scala.Some),de.tud.cs.st.bat.resolved.ArrayValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ArrayValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.ArrayValue{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ArrayValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),gd12$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.ArrayValue{ private boolean gd12$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ArrayValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ArrayValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ArrayValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ArrayValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ArrayValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ArrayValue),values,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.ArrayValue{ public scala.RandomAccessSeq values() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.BALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.BALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.BALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.BALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.BALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.BALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.BASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.BASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.BASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.BASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.BASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.BASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BIPUSH${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BIPUSH${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BIPUSH${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.BIPUSH),de.tud.cs.st.bat.resolved.BIPUSH${ public de.tud.cs.st.bat.resolved.BIPUSH apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.BIPUSH${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BIPUSH${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BIPUSH${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.BIPUSH): scala.Some),de.tud.cs.st.bat.resolved.BIPUSH${ public scala.Some unapply(de.tud.cs.st.bat.resolved.BIPUSH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.BIPUSH{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.BIPUSH{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.BIPUSH{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.BIPUSH{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BIPUSH{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BIPUSH{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BIPUSH{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BIPUSH{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.BIPUSH{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.BIPUSH{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BIPUSH),value,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BIPUSH{ public int value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BaseType$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.BaseType): void),de.tud.cs.st.bat.resolved.BaseType$class{ public static void $init$(de.tud.cs.st.bat.resolved.BaseType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BaseType$class),isBaseType,MethodDescriptor((de.tud.cs.st.bat.resolved.BaseType): boolean),de.tud.cs.st.bat.resolved.BaseType$class{ public static boolean isBaseType(de.tud.cs.st.bat.resolved.BaseType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BooleanType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BooleanType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.BooleanType),de.tud.cs.st.bat.resolved.BooleanType${ public de.tud.cs.st.bat.resolved.BooleanType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType$),bt,MethodDescriptor((): de.tud.cs.st.bat.resolved.BooleanType),de.tud.cs.st.bat.resolved.BooleanType${ private de.tud.cs.st.bat.resolved.BooleanType bt() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BooleanType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BooleanType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BooleanType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BooleanValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BooleanValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BooleanValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),apply,MethodDescriptor((boolean): de.tud.cs.st.bat.resolved.BooleanValue),de.tud.cs.st.bat.resolved.BooleanValue${ public de.tud.cs.st.bat.resolved.BooleanValue apply(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.BooleanValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BooleanValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BooleanValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.BooleanValue): scala.Some),de.tud.cs.st.bat.resolved.BooleanValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.BooleanValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),<init>,MethodDescriptor((boolean): void),de.tud.cs.st.bat.resolved.BooleanValue{ public void <init>(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.BooleanValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),gd8$1,MethodDescriptor((boolean): boolean),de.tud.cs.st.bat.resolved.BooleanValue{ private boolean gd8$1(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BooleanValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.BooleanValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BooleanValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BooleanValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.BooleanValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.BooleanValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BooleanValue),value,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.BooleanValue{ public boolean value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ByteType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ByteType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.ByteType),de.tud.cs.st.bat.resolved.ByteType${ public de.tud.cs.st.bat.resolved.ByteType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType$),bt,MethodDescriptor((): de.tud.cs.st.bat.resolved.ByteType),de.tud.cs.st.bat.resolved.ByteType${ private de.tud.cs.st.bat.resolved.ByteType bt() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ByteType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ByteType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ByteType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ByteType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ByteValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ByteValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ByteValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),apply,MethodDescriptor((byte): de.tud.cs.st.bat.resolved.ByteValue),de.tud.cs.st.bat.resolved.ByteValue${ public de.tud.cs.st.bat.resolved.ByteValue apply(byte) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ByteValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ByteValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ByteValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ByteValue): scala.Some),de.tud.cs.st.bat.resolved.ByteValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ByteValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),<init>,MethodDescriptor((byte): void),de.tud.cs.st.bat.resolved.ByteValue{ public void <init>(byte) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ByteValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),gd1$1,MethodDescriptor((byte): boolean),de.tud.cs.st.bat.resolved.ByteValue{ private boolean gd1$1(byte) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ByteValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ByteValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ByteValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ByteValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ByteValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ByteValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ByteValue),value,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ByteValue{ public byte value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1, java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1$$anonfun$apply$1),apply,MethodDescriptor((): java.io.FileInputStream),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1$$anonfun$apply$1{ public java.io.FileInputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),apply,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public void apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$$anonfun$main$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToText$$anonfun$main$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToText${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),anyToString,MethodDescriptor((java.lang.Object): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToText${ public java.lang.String anyToString(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),out,MethodDescriptor((): java.io.PrintStream),de.tud.cs.st.bat.resolved.BytecodeToText${ public java.io.PrintStream out() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),out_$eq,MethodDescriptor((java.io.PrintStream): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public void out_$eq(java.io.PrintStream) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),print,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public void print(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText$),println,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText${ public void println(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToText{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),anyToString,MethodDescriptor((java.lang.Object): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToText{ public static java.lang.String anyToString(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.resolved.BytecodeToText{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),out,MethodDescriptor((): java.io.PrintStream),de.tud.cs.st.bat.resolved.BytecodeToText{ public static java.io.PrintStream out() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),print,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText{ public static void print(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToText),println,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToText{ public static void println(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1, java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$1),apply,MethodDescriptor((): java.io.FileInputStream),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$1{ public java.io.FileInputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1, java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$2{ public void <init>(de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$2),apply,MethodDescriptor((): java.io.InputStream),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$2{ public java.io.InputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),<init>,MethodDescriptor((scala.xml.PrettyPrinter, java.lang.Object): void),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public void <init>(scala.xml.PrettyPrinter,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),apply,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public void apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$$anonfun$main$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToXML$$anonfun$main$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToXML${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),anyToString,MethodDescriptor((java.lang.Object): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToXML${ public java.lang.String anyToString(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),out,MethodDescriptor((): java.io.PrintStream),de.tud.cs.st.bat.resolved.BytecodeToXML${ public java.io.PrintStream out() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),out_$eq,MethodDescriptor((java.io.PrintStream): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public void out_$eq(java.io.PrintStream) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),print,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public void print(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML$),println,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML${ public void println(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),anyToString,MethodDescriptor((java.lang.Object): java.lang.String),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static java.lang.String anyToString(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),out,MethodDescriptor((): java.io.PrintStream),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static java.io.PrintStream out() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),print,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static void print(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/BytecodeToXML),println,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.BytecodeToXML{ public static void println(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.CALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.CALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.CALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.CALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.CALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.CALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.CASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.CASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.CASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.CASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.CASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.CASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CHECKCAST${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CHECKCAST${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CHECKCAST${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.CHECKCAST${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): de.tud.cs.st.bat.resolved.CHECKCAST),de.tud.cs.st.bat.resolved.CHECKCAST${ public de.tud.cs.st.bat.resolved.CHECKCAST apply(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.CHECKCAST${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.CHECKCAST${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CHECKCAST${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.CHECKCAST): scala.Some),de.tud.cs.st.bat.resolved.CHECKCAST${ public scala.Some unapply(de.tud.cs.st.bat.resolved.CHECKCAST) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CHECKCAST{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): void),de.tud.cs.st.bat.resolved.CHECKCAST{ public void <init>(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.CHECKCAST{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.CHECKCAST{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.CHECKCAST{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CHECKCAST{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CHECKCAST{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CHECKCAST{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CHECKCAST{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CHECKCAST{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CHECKCAST{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),referenceType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.CHECKCAST{ public de.tud.cs.st.bat.resolved.ReferenceType referenceType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CHECKCAST{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.CHECKCAST{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CHECKCAST),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.CHECKCAST{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CharType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CharType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.CharType),de.tud.cs.st.bat.resolved.CharType${ public de.tud.cs.st.bat.resolved.CharType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType$),ct,MethodDescriptor((): de.tud.cs.st.bat.resolved.CharType),de.tud.cs.st.bat.resolved.CharType${ private de.tud.cs.st.bat.resolved.CharType ct() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CharType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.CharType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CharType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CharType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CharValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.CharValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.CharValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),apply,MethodDescriptor((char): de.tud.cs.st.bat.resolved.CharValue),de.tud.cs.st.bat.resolved.CharValue${ public de.tud.cs.st.bat.resolved.CharValue apply(char) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.CharValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.CharValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CharValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.CharValue): scala.Some),de.tud.cs.st.bat.resolved.CharValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.CharValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),<init>,MethodDescriptor((char): void),de.tud.cs.st.bat.resolved.CharValue{ public void <init>(char) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.CharValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),gd2$1,MethodDescriptor((char): boolean),de.tud.cs.st.bat.resolved.CharValue{ private boolean gd2$1(char) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.CharValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.CharValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CharValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.CharValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.CharValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.CharValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/CharValue),value,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.CharValue{ public char value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ChopFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ChopFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.ChopFrame),de.tud.cs.st.bat.resolved.ChopFrame${ public de.tud.cs.st.bat.resolved.ChopFrame apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ChopFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.ChopFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ChopFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ChopFrame): scala.Some),de.tud.cs.st.bat.resolved.ChopFrame${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ChopFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.resolved.ChopFrame{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ChopFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),gd4$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.resolved.ChopFrame{ private boolean gd4$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),offsetDelta,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame{ public int offsetDelta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ChopFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ChopFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ChopFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ChopFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ChopFrame{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ChopFrame),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ChopFrame{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): void),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.native.AccessFlag) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): void),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public void <init>(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): scala.xml.Node),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): void),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public void <init>(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): void),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public void <init>(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Field_Info): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.Field_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): void),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public void <init>(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Method_Info): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.Method_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$$anonfun$toXML$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile$$anonfun$toXML$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ClassFile${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ClassFile${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),apply,MethodDescriptor((int, int, int, de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType, scala.Seq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq): de.tud.cs.st.bat.resolved.ClassFile),de.tud.cs.st.bat.resolved.ClassFile${ public de.tud.cs.st.bat.resolved.ClassFile apply(int,int,int,de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType,scala.Seq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.ClassFile${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassFile): scala.Some),de.tud.cs.st.bat.resolved.ClassFile${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ClassFile) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),<init>,MethodDescriptor((int, int, int, de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType, scala.Seq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq): void),de.tud.cs.st.bat.resolved.ClassFile{ public void <init>(int,int,int,de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType,scala.Seq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),accessFlags,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int accessFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.ClassFile{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ClassFile{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),fields,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.ClassFile{ public scala.RandomAccessSeq fields() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),gd1$1,MethodDescriptor((scala.Seq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType, int, int, int): boolean),de.tud.cs.st.bat.resolved.ClassFile{ private boolean gd1$1(scala.Seq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),interfaces,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.ClassFile{ public scala.Seq interfaces() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),majorVersion,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int majorVersion() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),methods,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.ClassFile{ public scala.RandomAccessSeq methods() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),minorVersion,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int minorVersion() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassFile{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ClassFile{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),superClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ClassFile{ public de.tud.cs.st.bat.resolved.ObjectType superClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),thisClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ClassFile{ public de.tud.cs.st.bat.resolved.ObjectType thisClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassFile{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassFile),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassFile{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ClassValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ClassValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReturnType): de.tud.cs.st.bat.resolved.ClassValue),de.tud.cs.st.bat.resolved.ClassValue${ public de.tud.cs.st.bat.resolved.ClassValue apply(de.tud.cs.st.bat.resolved.ReturnType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ClassValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ClassValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ClassValue): scala.Some),de.tud.cs.st.bat.resolved.ClassValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ClassValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReturnType): void),de.tud.cs.st.bat.resolved.ClassValue{ public void <init>(de.tud.cs.st.bat.resolved.ReturnType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ClassValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),gd10$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ReturnType): boolean),de.tud.cs.st.bat.resolved.ClassValue{ private boolean gd10$1(de.tud.cs.st.bat.resolved.ReturnType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ClassValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ClassValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ClassValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ClassValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ClassValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ClassValue),value,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReturnType),de.tud.cs.st.bat.resolved.ClassValue{ public de.tud.cs.st.bat.resolved.ReturnType value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public void <init>(de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction): boolean),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public boolean apply(de.tud.cs.st.bat.resolved.Instruction) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toString$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toString$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): scala.xml.Node),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Code_attribute): void),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public void <init>(de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ExceptionTableEntry): scala.xml.Elem),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.ExceptionTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$$anonfun$toXML$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute$$anonfun$toXML$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Code_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Code_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),apply,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.resolved.Code_attribute${ public de.tud.cs.st.bat.resolved.Code_attribute apply(int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Code_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.Code_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Code_attribute): scala.Some),de.tud.cs.st.bat.resolved.Code_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Code_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),<init>,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq): void),de.tud.cs.st.bat.resolved.Code_attribute{ public void <init>(int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.Code_attribute{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),code,MethodDescriptor((): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.resolved.Code_attribute{ public de.tud.cs.st.bat.resolved.Instruction[] code() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Code_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),exceptionTable,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.Code_attribute{ public scala.RandomAccessSeq exceptionTable() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),gd1$1,MethodDescriptor((scala.Seq, scala.RandomAccessSeq, de.tud.cs.st.bat.resolved.Instruction[], int, int): boolean),de.tud.cs.st.bat.resolved.Code_attribute{ private boolean gd1$1(scala.Seq,scala.RandomAccessSeq,de.tud.cs.st.bat.resolved.Instruction[],int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),maxLocals,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute{ public int maxLocals() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),maxStack,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute{ public int maxStack() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Code_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Code_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Code_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Code_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Code_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Code_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantClass${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantClass${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantClass${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantClass${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): de.tud.cs.st.bat.resolved.ConstantClass),de.tud.cs.st.bat.resolved.ConstantClass${ public de.tud.cs.st.bat.resolved.ConstantClass apply(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantClass${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantClass${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantClass${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantClass): scala.Some),de.tud.cs.st.bat.resolved.ConstantClass${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantClass) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantClass{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): void),de.tud.cs.st.bat.resolved.ConstantClass{ public void <init>(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantClass{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),gd6$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.ConstantClass{ private boolean gd6$1(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantClass{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantClass{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantClass{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantClass{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantClass{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantClass{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantClass{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantClass{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantClass{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantClass{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantClass{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),value,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantClass{ public de.tud.cs.st.bat.resolved.ReferenceType value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantClass{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ConstantClass{ public de.tud.cs.st.bat.resolved.ObjectType valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantClass),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantClass{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantDouble${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantDouble${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantDouble${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantDouble${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),apply,MethodDescriptor((double): de.tud.cs.st.bat.resolved.ConstantDouble),de.tud.cs.st.bat.resolved.ConstantDouble${ public de.tud.cs.st.bat.resolved.ConstantDouble apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantDouble${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantDouble${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantDouble${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantDouble): scala.Some),de.tud.cs.st.bat.resolved.ConstantDouble${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantDouble) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantDouble{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),<init>,MethodDescriptor((double): void),de.tud.cs.st.bat.resolved.ConstantDouble{ public void <init>(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantDouble{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),gd3$1,MethodDescriptor((double): boolean),de.tud.cs.st.bat.resolved.ConstantDouble{ private boolean gd3$1(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantDouble{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantDouble{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantDouble{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantDouble{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantDouble{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantDouble{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantDouble{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantDouble{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantDouble{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantDouble{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantDouble{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),value,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantDouble{ public double value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantDouble{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleType),de.tud.cs.st.bat.resolved.ConstantDouble{ public de.tud.cs.st.bat.resolved.DoubleType valueType() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantDouble),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantDouble{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantFloat${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantFloat${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantFloat${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantFloat${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),apply,MethodDescriptor((float): de.tud.cs.st.bat.resolved.ConstantFloat),de.tud.cs.st.bat.resolved.ConstantFloat${ public de.tud.cs.st.bat.resolved.ConstantFloat apply(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantFloat${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantFloat${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantFloat${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantFloat): scala.Some),de.tud.cs.st.bat.resolved.ConstantFloat${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantFloat) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantFloat{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),<init>,MethodDescriptor((float): void),de.tud.cs.st.bat.resolved.ConstantFloat{ public void <init>(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantFloat{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),gd4$1,MethodDescriptor((float): boolean),de.tud.cs.st.bat.resolved.ConstantFloat{ private boolean gd4$1(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantFloat{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantFloat{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantFloat{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantFloat{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantFloat{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantFloat{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantFloat{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantFloat{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantFloat{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantFloat{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantFloat{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),value,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantFloat{ public float value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantFloat{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatType),de.tud.cs.st.bat.resolved.ConstantFloat{ public de.tud.cs.st.bat.resolved.FloatType valueType() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantFloat),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantFloat{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantInteger${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantInteger${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantInteger${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ConstantInteger),de.tud.cs.st.bat.resolved.ConstantInteger${ public de.tud.cs.st.bat.resolved.ConstantInteger apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantInteger${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantInteger${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantInteger${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantInteger): scala.Some),de.tud.cs.st.bat.resolved.ConstantInteger${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantInteger) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.ConstantInteger{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantInteger{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),gd2$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.ConstantInteger{ private boolean gd2$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantInteger{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantInteger{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantInteger{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantInteger{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantInteger{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantInteger{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantInteger{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantInteger{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),value,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantInteger{ public int value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantInteger{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerType),de.tud.cs.st.bat.resolved.ConstantInteger{ public de.tud.cs.st.bat.resolved.IntegerType valueType() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantInteger),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantInteger{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantLong${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantLong${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantLong${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantLong${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantLong${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),apply,MethodDescriptor((long): de.tud.cs.st.bat.resolved.ConstantLong),de.tud.cs.st.bat.resolved.ConstantLong${ public de.tud.cs.st.bat.resolved.ConstantLong apply(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantLong${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantLong${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantLong): scala.Some),de.tud.cs.st.bat.resolved.ConstantLong${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantLong) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantLong{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),<init>,MethodDescriptor((long): void),de.tud.cs.st.bat.resolved.ConstantLong{ public void <init>(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantLong{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),gd1$1,MethodDescriptor((long): boolean),de.tud.cs.st.bat.resolved.ConstantLong{ private boolean gd1$1(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantLong{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantLong{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantLong{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantLong{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantLong{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantLong{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantLong{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantLong{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantLong{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantLong{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantLong{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),value,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantLong{ public long value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantLong{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongType),de.tud.cs.st.bat.resolved.ConstantLong{ public de.tud.cs.st.bat.resolved.LongType valueType() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantLong),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantLong{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantString${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantString${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantString${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantString${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantString${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.ConstantString),de.tud.cs.st.bat.resolved.ConstantString${ public de.tud.cs.st.bat.resolved.ConstantString apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantString${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantString): scala.Some),de.tud.cs.st.bat.resolved.ConstantString${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantString) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantString{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ConstantString{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantString{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),gd5$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.resolved.ConstantString{ private boolean gd5$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantString{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantString{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toBoolean,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ConstantString{ public boolean toBoolean() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toByte,MethodDescriptor((): byte),de.tud.cs.st.bat.resolved.ConstantString{ public byte toByte() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toChar,MethodDescriptor((): char),de.tud.cs.st.bat.resolved.ConstantString{ public char toChar() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantString{ public de.tud.cs.st.bat.resolved.ReferenceType toClass() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toDouble,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.ConstantString{ public double toDouble() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toFloat,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.ConstantString{ public float toFloat() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toInt,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantString{ public int toInt() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toLong,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.ConstantString{ public long toLong() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toShort,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ConstantString{ public short toShort() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),toUTF8,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.String toUTF8() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.Object value() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),value,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.String value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),valueToString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantString{ public java.lang.String valueToString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ConstantString{ public de.tud.cs.st.bat.resolved.ObjectType valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantString),valueType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.ConstantString{ public de.tud.cs.st.bat.resolved.Type valueType() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): void),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static void $init$(de.tud.cs.st.bat.resolved.ConstantValue) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toBoolean,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): boolean),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static boolean toBoolean(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toByte,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): byte),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static byte toByte(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toChar,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): char),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static char toChar(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toClass,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static de.tud.cs.st.bat.resolved.ReferenceType toClass(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toDouble,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): double),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static double toDouble(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toFloat,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): float),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static float toFloat(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toInt,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): int),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static int toInt(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toLong,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): long),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static long toLong(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toShort,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): short),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static short toShort(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue$class),toUTF8,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): java.lang.String),de.tud.cs.st.bat.resolved.ConstantValue$class{ public static java.lang.String toUTF8(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public de.tud.cs.st.bat.resolved.ConstantValue_attribute apply(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue_attribute): scala.Some),de.tud.cs.st.bat.resolved.ConstantValue_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ConstantValue_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): void),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public void <init>(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),constantValue,MethodDescriptor((): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public de.tud.cs.st.bat.resolved.ConstantValue constantValue() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): boolean),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ConstantValue_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ConstantValue_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2F${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2F${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2F${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2F${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2F${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2F${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.D2F${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2F${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2F${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.D2F${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2F{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2F{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2F{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2F{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2F{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2F),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2F{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2I${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2I${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2I${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2I${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2I${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2I${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.D2I${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2I${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2I${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.D2I${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2I{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2I{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2I{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2I{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2I{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2I),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2I{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2L${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.D2L${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2L${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2L${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2L${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2L${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.D2L${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2L${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2L${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.D2L${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.D2L{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2L{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.D2L{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.D2L{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.D2L{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/D2L),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.D2L{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DADD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DADD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DADD${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DADD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DADD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DADD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DADD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DADD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DADD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DADD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DADD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DADD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DADD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DADD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DADD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DADD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DADD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCMPG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCMPG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCMPG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCMPG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DCMPG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCMPG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCMPG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCMPL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCMPL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCMPL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCMPL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DCMPL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCMPL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCMPL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCMPL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCMPL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCMPL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCMPL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCONST_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCONST_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCONST_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCONST_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DCONST_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCONST_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCONST_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCONST_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DCONST_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCONST_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCONST_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DCONST_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DCONST_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DCONST_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DCONST_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DCONST_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DCONST_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DCONST_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DDIV${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DDIV${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DDIV${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DDIV${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DDIV${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DDIV${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DDIV${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DDIV${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DDIV${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DDIV${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DDIV{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DDIV{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DDIV{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DDIV{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DDIV{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DDIV),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DDIV{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DLOAD${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.DLOAD),de.tud.cs.st.bat.resolved.DLOAD${ public de.tud.cs.st.bat.resolved.DLOAD apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DLOAD${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.DLOAD): scala.Some),de.tud.cs.st.bat.resolved.DLOAD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.DLOAD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.DLOAD{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.DLOAD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.DLOAD{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DLOAD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DLOAD_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DLOAD_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DLOAD_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DLOAD_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DLOAD_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DLOAD_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DLOAD_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DLOAD_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DLOAD_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DLOAD_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DLOAD_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DMUL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DMUL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DMUL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DMUL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DMUL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DMUL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DMUL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DMUL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DMUL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DMUL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DMUL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DMUL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DMUL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DMUL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DMUL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DMUL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DMUL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DNEG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DNEG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DNEG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DNEG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DNEG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DNEG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DNEG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DNEG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DNEG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DNEG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DNEG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DNEG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DNEG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DNEG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DNEG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DNEG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DNEG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DREM${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DREM${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DREM${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DREM${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DREM${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DREM${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DREM${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DREM${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DREM${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DREM${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DREM{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DREM{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DREM{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DREM{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DREM{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DREM),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DREM{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DRETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DRETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DRETURN${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DRETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DRETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DRETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DRETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DRETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DRETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DRETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DRETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DRETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DRETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DRETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DRETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DRETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DRETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DSTORE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.DSTORE),de.tud.cs.st.bat.resolved.DSTORE${ public de.tud.cs.st.bat.resolved.DSTORE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DSTORE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.DSTORE): scala.Some),de.tud.cs.st.bat.resolved.DSTORE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.DSTORE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.DSTORE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.DSTORE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.DSTORE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSTORE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSTORE_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSTORE_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSTORE_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSTORE_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSTORE_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSTORE_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSTORE_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSTORE_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSTORE_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSTORE_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSTORE_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSUB${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DSUB${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSUB${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSUB${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSUB${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSUB${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DSUB${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSUB${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSUB${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DSUB${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DSUB{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSUB{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DSUB{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DSUB{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DSUB{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DSUB),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DSUB{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2_X1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2_X1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2_X1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2_X1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP2_X1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2_X1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2_X1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2_X2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP2_X2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2_X2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2_X2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP2_X2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP2_X2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP2_X2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP2_X2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP2_X2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP2_X2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP2_X2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP_X1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP_X1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP_X1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP_X1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP_X1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP_X1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP_X1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP_X2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DUP_X2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP_X2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP_X2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.DUP_X2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.DUP_X2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DUP_X2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DUP_X2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DUP_X2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DUP_X2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.DUP_X2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public de.tud.cs.st.bat.resolved.Deprecated_attribute apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public de.tud.cs.st.bat.resolved.Deprecated_attribute instance() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Deprecated_attribute): boolean),de.tud.cs.st.bat.resolved.Deprecated_attribute${ public boolean unapply(de.tud.cs.st.bat.resolved.Deprecated_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Deprecated_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Deprecated_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleType),de.tud.cs.st.bat.resolved.DoubleType${ public de.tud.cs.st.bat.resolved.DoubleType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType$),dt,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleType),de.tud.cs.st.bat.resolved.DoubleType${ private de.tud.cs.st.bat.resolved.DoubleType dt() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.DoubleType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DoubleValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),apply,MethodDescriptor((double): de.tud.cs.st.bat.resolved.DoubleValue),de.tud.cs.st.bat.resolved.DoubleValue${ public de.tud.cs.st.bat.resolved.DoubleValue apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.DoubleValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.DoubleValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.DoubleValue): scala.Some),de.tud.cs.st.bat.resolved.DoubleValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.DoubleValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),<init>,MethodDescriptor((double): void),de.tud.cs.st.bat.resolved.DoubleValue{ public void <init>(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.DoubleValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),gd3$1,MethodDescriptor((double): boolean),de.tud.cs.st.bat.resolved.DoubleValue{ private boolean gd3$1(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DoubleValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.DoubleValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.DoubleValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleValue),value,MethodDescriptor((): double),de.tud.cs.st.bat.resolved.DoubleValue{ public double value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleVariableInfo),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public de.tud.cs.st.bat.resolved.DoubleVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleVariableInfo),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public de.tud.cs.st.bat.resolved.DoubleVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.DoubleVariableInfo): boolean),de.tud.cs.st.bat.resolved.DoubleVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.DoubleVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/DoubleVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.DoubleVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ElementValuePair${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ElementValuePair${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ElementValuePair${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ElementValuePair${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),apply,MethodDescriptor((java.lang.String, de.tud.cs.st.bat.resolved.ElementValue): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.resolved.ElementValuePair${ public de.tud.cs.st.bat.resolved.ElementValuePair apply(java.lang.String,de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.ElementValuePair${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ElementValuePair${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValuePair): scala.Some),de.tud.cs.st.bat.resolved.ElementValuePair${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ElementValuePair) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ElementValuePair{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.bat.resolved.ElementValue): void),de.tud.cs.st.bat.resolved.ElementValuePair{ public void <init>(java.lang.String,de.tud.cs.st.bat.resolved.ElementValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),elementName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ElementValuePair{ public java.lang.String elementName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),elementValue,MethodDescriptor((): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.ElementValuePair{ public de.tud.cs.st.bat.resolved.ElementValue elementValue() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ElementValuePair{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ElementValue, java.lang.String): boolean),de.tud.cs.st.bat.resolved.ElementValuePair{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ElementValue,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ElementValuePair{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ElementValuePair{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ElementValuePair{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ElementValuePair{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ElementValuePair{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ElementValuePair),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ElementValuePair{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.resolved.EnclosingMethod_attribute),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public de.tud.cs.st.bat.resolved.EnclosingMethod_attribute apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.EnclosingMethod_attribute): scala.Some),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.EnclosingMethod_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),clazz,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public de.tud.cs.st.bat.resolved.ObjectType clazz() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),descriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public de.tud.cs.st.bat.resolved.MethodDescriptor descriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ private boolean gd1$1(de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnclosingMethod_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.EnclosingMethod_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnumValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.EnumValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.EnumValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String): de.tud.cs.st.bat.resolved.EnumValue),de.tud.cs.st.bat.resolved.EnumValue${ public de.tud.cs.st.bat.resolved.EnumValue apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.EnumValue${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.EnumValue${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnumValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.EnumValue): scala.Some),de.tud.cs.st.bat.resolved.EnumValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.EnumValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnumValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String): void),de.tud.cs.st.bat.resolved.EnumValue{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),constName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnumValue{ public java.lang.String constName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),enumType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.EnumValue{ public de.tud.cs.st.bat.resolved.ObjectType enumType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.EnumValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),gd11$1,MethodDescriptor((java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.EnumValue{ private boolean gd11$1(java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnumValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.EnumValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.EnumValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnumValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.EnumValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.EnumValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/EnumValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.EnumValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),apply,MethodDescriptor((int, int, int, de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public de.tud.cs.st.bat.resolved.ExceptionTableEntry apply(int,int,int,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ExceptionTableEntry): scala.Some),de.tud.cs.st.bat.resolved.ExceptionTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ExceptionTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),<init>,MethodDescriptor((int, int, int, de.tud.cs.st.bat.resolved.ObjectType): void),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public void <init>(int,int,int,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),catchType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public de.tud.cs.st.bat.resolved.ObjectType catchType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),endPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int endPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),gd2$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, int, int, int): boolean),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ private boolean gd2$1(de.tud.cs.st.bat.resolved.ObjectType,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),handlerPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int handlerPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),startPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public int startPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ExceptionTableEntry),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ExceptionTableEntry{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Exceptions_attribute): void),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): scala.xml.Elem),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Exceptions_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),apply,MethodDescriptor((scala.Seq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public de.tud.cs.st.bat.resolved.Exceptions_attribute apply(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Exceptions_attribute): scala.Some),de.tud.cs.st.bat.resolved.Exceptions_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Exceptions_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),<init>,MethodDescriptor((scala.Seq): void),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public void <init>(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),exceptionTable,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public scala.Seq exceptionTable() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),gd1$1,MethodDescriptor((scala.Seq): boolean),de.tud.cs.st.bat.resolved.Exceptions_attribute{ private boolean gd1$1(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Exceptions_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Exceptions_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2D${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2D${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2D${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2D${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2D${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2D${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.F2D${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2D${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2D${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.F2D${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2D{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2D{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2D{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2D{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2D{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2D),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2D{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2I${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2I${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2I${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2I${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2I${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2I${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.F2I${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2I${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2I${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.F2I${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2I{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2I{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2I{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2I{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2I{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2I),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2I{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2L${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.F2L${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2L${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2L${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2L${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2L${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.F2L${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2L${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2L${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.F2L${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.F2L{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2L{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.F2L{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.F2L{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.F2L{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/F2L),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.F2L{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FADD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FADD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FADD${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FADD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FADD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FADD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FADD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FADD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FADD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FADD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FADD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FADD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FADD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FADD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FADD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FADD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FADD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCMPG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCMPG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCMPG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCMPG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FCMPG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCMPG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCMPG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCMPL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCMPL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCMPL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCMPL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FCMPL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCMPL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCMPL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCMPL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCMPL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCMPL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCMPL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FCONST_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FCONST_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FCONST_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FCONST_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FCONST_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FCONST_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FCONST_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FCONST_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FCONST_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FCONST_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FDIV${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FDIV${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FDIV${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FDIV${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FDIV${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FDIV${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FDIV${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FDIV${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FDIV${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FDIV${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FDIV{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FDIV{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FDIV{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FDIV{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FDIV{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FDIV),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FDIV{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FLOAD${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.FLOAD),de.tud.cs.st.bat.resolved.FLOAD${ public de.tud.cs.st.bat.resolved.FLOAD apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FLOAD${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FLOAD): scala.Some),de.tud.cs.st.bat.resolved.FLOAD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.FLOAD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.FLOAD{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.FLOAD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.FLOAD{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FLOAD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FLOAD_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FLOAD_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FLOAD_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FLOAD_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FLOAD_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FLOAD_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FLOAD_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FLOAD_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FLOAD_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FLOAD_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FLOAD_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FMUL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FMUL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FMUL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FMUL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FMUL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FMUL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FMUL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FMUL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FMUL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FMUL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FMUL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FMUL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FMUL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FMUL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FMUL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FMUL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FMUL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FNEG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FNEG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FNEG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FNEG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FNEG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FNEG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FNEG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FNEG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FNEG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FNEG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FNEG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FNEG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FNEG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FNEG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FNEG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FNEG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FNEG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FREM${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FREM${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FREM${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FREM${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FREM${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FREM${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FREM${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FREM${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FREM${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FREM${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FREM{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FREM{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FREM{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FREM{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FREM{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FREM),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FREM{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FRETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FRETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FRETURN${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FRETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FRETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FRETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FRETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FRETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FRETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FRETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FRETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FRETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FRETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FRETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FRETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FRETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FRETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FSTORE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.FSTORE),de.tud.cs.st.bat.resolved.FSTORE${ public de.tud.cs.st.bat.resolved.FSTORE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FSTORE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FSTORE): scala.Some),de.tud.cs.st.bat.resolved.FSTORE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.FSTORE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.FSTORE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.FSTORE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.FSTORE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSTORE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSTORE_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSTORE_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSTORE_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSTORE_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSTORE_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSTORE_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSTORE_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSTORE_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSTORE_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSTORE_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSTORE_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSUB${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FSUB${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSUB${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSUB${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSUB${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSUB${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FSUB${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSUB${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSUB${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.FSUB${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FSUB{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSUB{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FSUB{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FSUB{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FSUB{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FSUB),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.FSUB{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldDescriptor${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldDescriptor${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldDescriptor${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.resolved.FieldDescriptor${ public de.tud.cs.st.bat.resolved.FieldDescriptor apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldDescriptor): scala.Option),de.tud.cs.st.bat.resolved.FieldDescriptor${ public scala.Option unapply(de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldDescriptor{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.FieldDescriptor{ public void <init>(de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.FieldDescriptor{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldDescriptor{ public java.lang.String toJava() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldDescriptor),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldDescriptor{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),ArrayTypeRegEx,MethodDescriptor((): scala.util.matching.Regex),de.tud.cs.st.bat.resolved.FieldType${ private scala.util.matching.Regex ArrayTypeRegEx() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),ObjectTypeRegEx,MethodDescriptor((): scala.util.matching.Regex),de.tud.cs.st.bat.resolved.FieldType${ private scala.util.matching.Regex ObjectTypeRegEx() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.FieldType${ public de.tud.cs.st.bat.resolved.FieldType apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.FieldType$class{ public static void $init$(de.tud.cs.st.bat.resolved.FieldType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldType$class),isFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): boolean),de.tud.cs.st.bat.resolved.FieldType$class{ public static boolean isFieldType(de.tud.cs.st.bat.resolved.FieldType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$1{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$10),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$10{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$10),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$10{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$10),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$10{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$10),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$10{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$10),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$10{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$2{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$3{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$3),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$3{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$4{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$4),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$4{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$5{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$5),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$5{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$5),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$5{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$6),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$6),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$6{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$6),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$6{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$6),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$6{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$7),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$7),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$7{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$7),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$7{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$7),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$7{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$8),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$8),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$8{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$8),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$8{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$8),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$8{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$9),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$9),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldTypeTest): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$9{ public void <init>(de.tud.cs.st.bat.resolved.FieldTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$9),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$9{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$9),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$9{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest$$anonfun$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest$$anonfun$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FieldTypeTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),execute,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.bat.resolved.FieldTypeTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FieldTypeTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.FieldTypeTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.bat.resolved.FieldTypeTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FieldTypeTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.bat.resolved.FieldTypeTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Field_Info): void),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Field_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag): scala.xml.Elem),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.native.AccessFlag) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Field_Info): void),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public void <init>(de.tud.cs.st.bat.resolved.Field_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): scala.xml.Node),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$$anonfun$toXML$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info$$anonfun$toXML$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Field_Info${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Field_Info${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),apply,MethodDescriptor((int, java.lang.String, de.tud.cs.st.bat.resolved.FieldDescriptor, scala.Seq): de.tud.cs.st.bat.resolved.Field_Info),de.tud.cs.st.bat.resolved.Field_Info${ public de.tud.cs.st.bat.resolved.Field_Info apply(int,java.lang.String,de.tud.cs.st.bat.resolved.FieldDescriptor,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Field_Info${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.Field_Info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Field_Info): scala.Some),de.tud.cs.st.bat.resolved.Field_Info${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Field_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),<init>,MethodDescriptor((int, java.lang.String, de.tud.cs.st.bat.resolved.FieldDescriptor, scala.Seq): void),de.tud.cs.st.bat.resolved.Field_Info{ public void <init>(int,java.lang.String,de.tud.cs.st.bat.resolved.FieldDescriptor,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),accessFlags,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info{ public int accessFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.Field_Info{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),descriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.resolved.Field_Info{ public de.tud.cs.st.bat.resolved.FieldDescriptor descriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Field_Info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),gd1$1,MethodDescriptor((scala.Seq, de.tud.cs.st.bat.resolved.FieldDescriptor, java.lang.String, int): boolean),de.tud.cs.st.bat.resolved.Field_Info{ private boolean gd1$1(scala.Seq,de.tud.cs.st.bat.resolved.FieldDescriptor,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Field_Info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Field_Info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Field_Info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Field_Info),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Field_Info{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatType),de.tud.cs.st.bat.resolved.FloatType${ public de.tud.cs.st.bat.resolved.FloatType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType$),ft,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatType),de.tud.cs.st.bat.resolved.FloatType${ private de.tud.cs.st.bat.resolved.FloatType ft() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.FloatType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FloatValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),apply,MethodDescriptor((float): de.tud.cs.st.bat.resolved.FloatValue),de.tud.cs.st.bat.resolved.FloatValue${ public de.tud.cs.st.bat.resolved.FloatValue apply(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FloatValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FloatValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FloatValue): scala.Some),de.tud.cs.st.bat.resolved.FloatValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.FloatValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),<init>,MethodDescriptor((float): void),de.tud.cs.st.bat.resolved.FloatValue{ public void <init>(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.FloatValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),gd4$1,MethodDescriptor((float): boolean),de.tud.cs.st.bat.resolved.FloatValue{ private boolean gd4$1(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FloatValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.FloatValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.FloatValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatValue),value,MethodDescriptor((): float),de.tud.cs.st.bat.resolved.FloatValue{ public float value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatVariableInfo),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public de.tud.cs.st.bat.resolved.FloatVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatVariableInfo),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public de.tud.cs.st.bat.resolved.FloatVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FloatVariableInfo): boolean),de.tud.cs.st.bat.resolved.FloatVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.FloatVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FloatVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.FloatVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FullFrame): void),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public void <init>(de.tud.cs.st.bat.resolved.FullFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.VerificationTypeInfo): scala.xml.Node),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.FullFrame): void),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public void <init>(de.tud.cs.st.bat.resolved.FullFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.VerificationTypeInfo): scala.xml.Node),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$$anonfun$toXML$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FullFrame$$anonfun$toXML$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FullFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.FullFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FullFrame),de.tud.cs.st.bat.resolved.FullFrame${ public de.tud.cs.st.bat.resolved.FullFrame apply(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.FullFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.FullFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FullFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.FullFrame): scala.Some),de.tud.cs.st.bat.resolved.FullFrame${ public scala.Some unapply(de.tud.cs.st.bat.resolved.FullFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.FullFrame{ public void <init>(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.FullFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),gd7$1,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.resolved.FullFrame{ private boolean gd7$1(scala.RandomAccessSeq,scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),offsetDelta,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame{ public int offsetDelta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.FullFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.FullFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FullFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.FullFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.FullFrame{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.FullFrame{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),verificationTypeInfoLocals,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.FullFrame{ public scala.RandomAccessSeq verificationTypeInfoLocals() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/FullFrame),verificationTypeInfoStack,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.FullFrame{ public scala.RandomAccessSeq verificationTypeInfoStack() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETFIELD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GETFIELD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GETFIELD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): de.tud.cs.st.bat.resolved.GETFIELD),de.tud.cs.st.bat.resolved.GETFIELD${ public de.tud.cs.st.bat.resolved.GETFIELD apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.GETFIELD${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.GETFIELD${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETFIELD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.GETFIELD): scala.Some),de.tud.cs.st.bat.resolved.GETFIELD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.GETFIELD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETFIELD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.GETFIELD{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.GETFIELD{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.GETFIELD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.GETFIELD{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.GETFIELD{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.GETFIELD{ private boolean gd1$1(de.tud.cs.st.bat.resolved.FieldType,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETFIELD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETFIELD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETFIELD{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETFIELD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETFIELD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.GETFIELD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETFIELD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETFIELD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.GETFIELD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETFIELD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.GETFIELD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETSTATIC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GETSTATIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GETSTATIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): de.tud.cs.st.bat.resolved.GETSTATIC),de.tud.cs.st.bat.resolved.GETSTATIC${ public de.tud.cs.st.bat.resolved.GETSTATIC apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.GETSTATIC${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.GETSTATIC${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETSTATIC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.GETSTATIC): scala.Some),de.tud.cs.st.bat.resolved.GETSTATIC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.GETSTATIC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETSTATIC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.GETSTATIC{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.GETSTATIC{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.GETSTATIC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.GETSTATIC{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.GETSTATIC{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.GETSTATIC{ private boolean gd1$1(de.tud.cs.st.bat.resolved.FieldType,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETSTATIC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETSTATIC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETSTATIC{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETSTATIC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GETSTATIC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.GETSTATIC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETSTATIC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GETSTATIC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.GETSTATIC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GETSTATIC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.GETSTATIC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GOTO${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GOTO${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.GOTO${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.GOTO),de.tud.cs.st.bat.resolved.GOTO${ public de.tud.cs.st.bat.resolved.GOTO apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.GOTO${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.GOTO${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.GOTO): scala.Some),de.tud.cs.st.bat.resolved.GOTO${ public scala.Some unapply(de.tud.cs.st.bat.resolved.GOTO) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.GOTO{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.GOTO{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.GOTO{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.GOTO{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.GOTO{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.GOTO{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.GOTO{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GOTO_W${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.GOTO_W${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.GOTO_W${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.GOTO_W),de.tud.cs.st.bat.resolved.GOTO_W${ public de.tud.cs.st.bat.resolved.GOTO_W apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.GOTO_W${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.GOTO_W${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO_W${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.GOTO_W): scala.Some),de.tud.cs.st.bat.resolved.GOTO_W${ public scala.Some unapply(de.tud.cs.st.bat.resolved.GOTO_W) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.GOTO_W{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.GOTO_W{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.GOTO_W{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.GOTO_W{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO_W{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.GOTO_W{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.GOTO_W{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO_W{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.GOTO_W{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.GOTO_W{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/GOTO_W),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.GOTO_W{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2B${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2B${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2B${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2B${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2B${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2B${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2B${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2B${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2B${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2B${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2B{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2B{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2B{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2B{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2B{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2B),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2B{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2C${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2C${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2C${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2C${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2C${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2C${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2C${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2C${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2C${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2C${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2C{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2C{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2C{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2C{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2C{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2C),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2C{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2D${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2D${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2D${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2D${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2D${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2D${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2D${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2D${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2D${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2D${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2D{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2D{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2D{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2D{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2D{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2D),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2D{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2F${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2F${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2F${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2F${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2F${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2F${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2F${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2F${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2F${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2F${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2F{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2F{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2F{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2F{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2F{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2F),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2F{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2L${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2L${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2L${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2L${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2L${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2L${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2L${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2L${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2L${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2L${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2L{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2L{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2L{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2L{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2L{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2L),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2L{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2S${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.I2S${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2S${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2S${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2S${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2S${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.I2S${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2S${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2S${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.I2S${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.I2S{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2S{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.I2S{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.I2S{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.I2S{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/I2S),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.I2S{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IADD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IADD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IADD${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IADD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IADD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IADD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IADD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IADD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IADD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IADD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IADD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IADD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IADD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IADD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IADD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IADD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IADD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IAND${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IAND${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IAND${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IAND${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IAND${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IAND${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IAND${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IAND${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IAND${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IAND${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IAND{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IAND{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IAND{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IAND{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IAND{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IAND),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IAND{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_4${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_4${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_4${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_4${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_4${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_4${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_4${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_4${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_4${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_4${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_4{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_4{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_4{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_4{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_4{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_4),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_4{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_5${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_5${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_5${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_5${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_5${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_5${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_5${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_5${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_5${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_5${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_5{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_5{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_5{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_5{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_5{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_5),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_5{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_M1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ICONST_M1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_M1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_M1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_M1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_M1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_M1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_M1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_M1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ICONST_M1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ICONST_M1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_M1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ICONST_M1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ICONST_M1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ICONST_M1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ICONST_M1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ICONST_M1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IDIV${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IDIV${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IDIV${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IDIV${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IDIV${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IDIV${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IDIV${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IDIV${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IDIV${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IDIV${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IDIV{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IDIV{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IDIV{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IDIV{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IDIV{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IDIV),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IDIV{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFEQ${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFEQ${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFEQ${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFEQ),de.tud.cs.st.bat.resolved.IFEQ${ public de.tud.cs.st.bat.resolved.IFEQ apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFEQ${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFEQ${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFEQ${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFEQ): scala.Some),de.tud.cs.st.bat.resolved.IFEQ${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFEQ) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFEQ{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFEQ{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFEQ{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFEQ{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFEQ{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFEQ{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFEQ{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFEQ{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFEQ{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFEQ{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFEQ),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFEQ{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFGE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFGE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFGE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFGE),de.tud.cs.st.bat.resolved.IFGE${ public de.tud.cs.st.bat.resolved.IFGE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFGE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFGE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFGE): scala.Some),de.tud.cs.st.bat.resolved.IFGE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFGE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFGE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFGE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFGE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFGE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFGE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFGE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFGE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFGT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFGT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFGT${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFGT),de.tud.cs.st.bat.resolved.IFGT${ public de.tud.cs.st.bat.resolved.IFGT apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFGT${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFGT${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGT${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFGT): scala.Some),de.tud.cs.st.bat.resolved.IFGT${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFGT) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFGT{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFGT{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFGT{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFGT{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGT{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFGT{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFGT{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGT{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFGT{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFGT{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFGT),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFGT{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFLE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFLE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFLE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFLE),de.tud.cs.st.bat.resolved.IFLE${ public de.tud.cs.st.bat.resolved.IFLE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFLE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFLE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFLE): scala.Some),de.tud.cs.st.bat.resolved.IFLE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFLE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFLE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFLE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFLE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFLE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFLE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFLE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFLE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFLT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFLT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFLT${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFLT),de.tud.cs.st.bat.resolved.IFLT${ public de.tud.cs.st.bat.resolved.IFLT apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFLT${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFLT${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLT${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFLT): scala.Some),de.tud.cs.st.bat.resolved.IFLT${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFLT) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFLT{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFLT{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFLT{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFLT{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLT{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFLT{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFLT{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLT{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFLT{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFLT{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFLT),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFLT{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFNE),de.tud.cs.st.bat.resolved.IFNE${ public de.tud.cs.st.bat.resolved.IFNE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFNE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFNE): scala.Some),de.tud.cs.st.bat.resolved.IFNE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFNE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFNE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFNE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFNE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFNE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFNE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFNE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFNE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNONNULL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNONNULL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNONNULL${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFNONNULL),de.tud.cs.st.bat.resolved.IFNONNULL${ public de.tud.cs.st.bat.resolved.IFNONNULL apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFNONNULL${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNONNULL${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNONNULL${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFNONNULL): scala.Some),de.tud.cs.st.bat.resolved.IFNONNULL${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFNONNULL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFNONNULL{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFNONNULL{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFNONNULL{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFNONNULL{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNONNULL{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNONNULL{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFNONNULL{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNONNULL{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNONNULL{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFNONNULL{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNONNULL),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFNONNULL{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNULL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IFNULL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNULL${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IFNULL),de.tud.cs.st.bat.resolved.IFNULL${ public de.tud.cs.st.bat.resolved.IFNULL apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IFNULL${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IFNULL${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNULL${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IFNULL): scala.Some),de.tud.cs.st.bat.resolved.IFNULL${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IFNULL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IFNULL{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IFNULL{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IFNULL{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IFNULL{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNULL{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IFNULL{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IFNULL{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNULL{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IFNULL{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IFNULL{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IFNULL),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IFNULL{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ACMPEQ),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public de.tud.cs.st.bat.resolved.IF_ACMPEQ apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ACMPEQ): scala.Some),de.tud.cs.st.bat.resolved.IF_ACMPEQ${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ACMPEQ) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPEQ),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ACMPEQ{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ACMPGE),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public de.tud.cs.st.bat.resolved.IF_ACMPGE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ACMPGE): scala.Some),de.tud.cs.st.bat.resolved.IF_ACMPGE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ACMPGE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ACMPGE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPGE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ACMPGE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ACMPNE),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public de.tud.cs.st.bat.resolved.IF_ACMPNE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ACMPNE): scala.Some),de.tud.cs.st.bat.resolved.IF_ACMPNE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ACMPNE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ACMPNE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ACMPNE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ACMPNE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ICMPEQ),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public de.tud.cs.st.bat.resolved.IF_ICMPEQ apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ICMPEQ): scala.Some),de.tud.cs.st.bat.resolved.IF_ICMPEQ${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ICMPEQ) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPEQ),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ICMPEQ{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ICMPGT),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public de.tud.cs.st.bat.resolved.IF_ICMPGT apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ICMPGT): scala.Some),de.tud.cs.st.bat.resolved.IF_ICMPGT${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ICMPGT) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ICMPGT{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPGT),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ICMPGT{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ICMPLE),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public de.tud.cs.st.bat.resolved.IF_ICMPLE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ICMPLE): scala.Some),de.tud.cs.st.bat.resolved.IF_ICMPLE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ICMPLE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ICMPLE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ICMPLE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ICMPLT),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public de.tud.cs.st.bat.resolved.IF_ICMPLT apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ICMPLT): scala.Some),de.tud.cs.st.bat.resolved.IF_ICMPLT${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ICMPLT) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ICMPLT{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPLT),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ICMPLT{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IF_ICMPNE),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public de.tud.cs.st.bat.resolved.IF_ICMPNE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IF_ICMPNE): scala.Some),de.tud.cs.st.bat.resolved.IF_ICMPNE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IF_ICMPNE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IF_ICMPNE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IF_ICMPNE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IF_ICMPNE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IINC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IINC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.IINC),de.tud.cs.st.bat.resolved.IINC${ public de.tud.cs.st.bat.resolved.IINC apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IINC${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.IINC${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IINC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IINC): scala.Some),de.tud.cs.st.bat.resolved.IINC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IINC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.resolved.IINC{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),constValue,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int constValue() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IINC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IINC{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),gd1$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.resolved.IINC{ private boolean gd1$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IINC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IINC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IINC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IINC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IINC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IINC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IINC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IINC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ILOAD${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ILOAD),de.tud.cs.st.bat.resolved.ILOAD${ public de.tud.cs.st.bat.resolved.ILOAD apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ILOAD${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ILOAD): scala.Some),de.tud.cs.st.bat.resolved.ILOAD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ILOAD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.ILOAD{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ILOAD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.ILOAD{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ILOAD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ILOAD_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ILOAD_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ILOAD_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ILOAD_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ILOAD_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ILOAD_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ILOAD_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ILOAD_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ILOAD_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ILOAD_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ILOAD_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IMUL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IMUL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IMUL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IMUL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IMUL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IMUL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IMUL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IMUL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IMUL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IMUL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IMUL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IMUL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IMUL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IMUL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IMUL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IMUL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IMUL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INEG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INEG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INEG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INEG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INEG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INEG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.INEG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INEG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INEG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INEG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INEG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INEG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INEG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INEG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INEG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INEG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INEG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INSTANCEOF${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INSTANCEOF${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INSTANCEOF${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.INSTANCEOF${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): de.tud.cs.st.bat.resolved.INSTANCEOF),de.tud.cs.st.bat.resolved.INSTANCEOF${ public de.tud.cs.st.bat.resolved.INSTANCEOF apply(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INSTANCEOF${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.INSTANCEOF${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INSTANCEOF${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INSTANCEOF): scala.Some),de.tud.cs.st.bat.resolved.INSTANCEOF${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INSTANCEOF) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INSTANCEOF{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): void),de.tud.cs.st.bat.resolved.INSTANCEOF{ public void <init>(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INSTANCEOF{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INSTANCEOF{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.INSTANCEOF{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INSTANCEOF{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INSTANCEOF{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INSTANCEOF{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INSTANCEOF{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INSTANCEOF{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INSTANCEOF{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),referenceType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.INSTANCEOF{ public de.tud.cs.st.bat.resolved.ReferenceType referenceType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INSTANCEOF{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INSTANCEOF{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INSTANCEOF),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INSTANCEOF{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),apply,MethodDescriptor((java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.resolved.INVOKEDYNAMIC),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public de.tud.cs.st.bat.resolved.INVOKEDYNAMIC apply(java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INVOKEDYNAMIC): scala.Some),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INVOKEDYNAMIC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),<init>,MethodDescriptor((java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public void <init>(java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String): boolean),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ private boolean gd1$1(de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),methodDescriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public de.tud.cs.st.bat.resolved.MethodDescriptor methodDescriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEDYNAMIC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INVOKEDYNAMIC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor, int): de.tud.cs.st.bat.resolved.INVOKEINTERFACE),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public de.tud.cs.st.bat.resolved.INVOKEINTERFACE apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INVOKEINTERFACE): scala.Some),de.tud.cs.st.bat.resolved.INVOKEINTERFACE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INVOKEINTERFACE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor, int): void),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),count,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public int count() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),gd1$1,MethodDescriptor((int, de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ private boolean gd1$1(int,de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),methodDescriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public de.tud.cs.st.bat.resolved.MethodDescriptor methodDescriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEINTERFACE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INVOKEINTERFACE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.resolved.INVOKESPECIAL),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public de.tud.cs.st.bat.resolved.INVOKESPECIAL apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INVOKESPECIAL): scala.Some),de.tud.cs.st.bat.resolved.INVOKESPECIAL${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INVOKESPECIAL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ private boolean gd1$1(de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),methodDescriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public de.tud.cs.st.bat.resolved.MethodDescriptor methodDescriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESPECIAL),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INVOKESPECIAL{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.resolved.INVOKESTATIC),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public de.tud.cs.st.bat.resolved.INVOKESTATIC apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INVOKESTATIC): scala.Some),de.tud.cs.st.bat.resolved.INVOKESTATIC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INVOKESTATIC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.INVOKESTATIC{ private boolean gd1$1(de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),methodDescriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public de.tud.cs.st.bat.resolved.MethodDescriptor methodDescriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKESTATIC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INVOKESTATIC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): de.tud.cs.st.bat.resolved.INVOKEVIRTUAL),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public de.tud.cs.st.bat.resolved.INVOKEVIRTUAL apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.INVOKEVIRTUAL): scala.Some),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL${ public scala.Some unapply(de.tud.cs.st.bat.resolved.INVOKEVIRTUAL) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ private boolean gd1$1(de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),methodDescriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public de.tud.cs.st.bat.resolved.MethodDescriptor methodDescriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/INVOKEVIRTUAL),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.INVOKEVIRTUAL{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IOR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IOR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IOR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IOR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IOR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IOR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IOR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IOR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IOR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IOR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IOR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IOR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IOR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IOR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IOR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IOR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IOR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IREM${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IREM${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IREM${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IREM${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IREM${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IREM${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IREM${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IREM${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IREM${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IREM${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IREM{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IREM{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IREM{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IREM{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IREM{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IREM),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IREM{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IRETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IRETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IRETURN${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IRETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IRETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IRETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IRETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IRETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IRETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IRETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IRETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IRETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IRETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IRETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IRETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IRETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IRETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISHL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISHL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISHL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISHL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISHL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISHL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISHL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISHL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISHL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISHL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISHR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISHR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISHR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISHR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISHR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISHR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISHR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISHR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISHR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISHR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISHR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISHR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISHR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ISTORE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ISTORE),de.tud.cs.st.bat.resolved.ISTORE${ public de.tud.cs.st.bat.resolved.ISTORE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ISTORE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ISTORE): scala.Some),de.tud.cs.st.bat.resolved.ISTORE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ISTORE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.ISTORE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ISTORE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.ISTORE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISTORE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISTORE_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISTORE_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISTORE_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISTORE_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISTORE_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISTORE_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISTORE_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISTORE_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISTORE_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISTORE_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISTORE_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISUB${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ISUB${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISUB${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISUB${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISUB${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISUB${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ISUB${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISUB${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISUB${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.ISUB${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ISUB{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISUB{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ISUB{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ISUB{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ISUB{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ISUB),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.ISUB{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IUSHR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IUSHR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IUSHR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IUSHR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IUSHR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IUSHR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IUSHR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IUSHR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IUSHR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IUSHR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IUSHR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IUSHR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IUSHR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IUSHR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IUSHR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IUSHR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IUSHR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IXOR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IXOR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IXOR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IXOR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IXOR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IXOR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.IXOR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IXOR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IXOR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.IXOR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.IXOR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IXOR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IXOR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IXOR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IXOR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IXOR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.IXOR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, int): de.tud.cs.st.bat.resolved.InnerClassesEntry),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public de.tud.cs.st.bat.resolved.InnerClassesEntry apply(de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.InnerClassesEntry): scala.Some),de.tud.cs.st.bat.resolved.InnerClassesEntry${ public scala.Some unapply(de.tud.cs.st.bat.resolved.InnerClassesEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, int): void),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),gd2$1,MethodDescriptor((int, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.InnerClassesEntry{ private boolean gd2$1(int,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),innerClassAccessFlags,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public int innerClassAccessFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),innerClassType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public de.tud.cs.st.bat.resolved.ObjectType innerClassType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),innerName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public java.lang.String innerName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),outerClassType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public de.tud.cs.st.bat.resolved.ObjectType outerClassType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClassesEntry),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.InnerClassesEntry{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.InnerClasses_attribute): void),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.InnerClasses_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.InnerClassesEntry): scala.xml.Elem),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.InnerClassesEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClasses_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClasses_attribute),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public de.tud.cs.st.bat.resolved.InnerClasses_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.InnerClasses_attribute): scala.Some),de.tud.cs.st.bat.resolved.InnerClasses_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.InnerClasses_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),classes,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public scala.RandomAccessSeq classes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InnerClasses_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.InnerClasses_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InstructionExceptions${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InstructionExceptions${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.InstructionExceptions${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),ArithmeticException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType ArithmeticException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),ArrayIndexOutOfBoundsException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType ArrayIndexOutOfBoundsException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),ArrayStoreException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType ArrayStoreException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),ClassCastException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType ClassCastException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),ExceptionInInitializerError,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType ExceptionInInitializerError() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),IllegalMonitorStateException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType IllegalMonitorStateException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),NegativeArraySizeException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType NegativeArraySizeException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions$),NullPointerException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions${ public de.tud.cs.st.bat.resolved.ObjectType NullPointerException() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),ArithmeticException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType ArithmeticException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),ArrayIndexOutOfBoundsException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType ArrayIndexOutOfBoundsException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),ArrayStoreException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType ArrayStoreException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),ClassCastException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType ClassCastException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),ExceptionInInitializerError,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType ExceptionInInitializerError() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),IllegalMonitorStateException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType IllegalMonitorStateException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),NegativeArraySizeException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType NegativeArraySizeException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/InstructionExceptions),NullPointerException,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.InstructionExceptions{ public static de.tud.cs.st.bat.resolved.ObjectType NullPointerException() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IntValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.IntValue),de.tud.cs.st.bat.resolved.IntValue${ public de.tud.cs.st.bat.resolved.IntValue apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.IntValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.IntValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IntValue): scala.Some),de.tud.cs.st.bat.resolved.IntValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.IntValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.IntValue{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IntValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),gd5$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.IntValue{ private boolean gd5$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IntValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.IntValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.IntValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntValue),value,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntValue{ public int value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerType),de.tud.cs.st.bat.resolved.IntegerType${ public de.tud.cs.st.bat.resolved.IntegerType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType$),it,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerType),de.tud.cs.st.bat.resolved.IntegerType${ private de.tud.cs.st.bat.resolved.IntegerType it() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.IntegerType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntegerType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntegerType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerVariableInfo),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public de.tud.cs.st.bat.resolved.IntegerVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerVariableInfo),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public de.tud.cs.st.bat.resolved.IntegerVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.IntegerVariableInfo): boolean),de.tud.cs.st.bat.resolved.IntegerVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.IntegerVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/IntegerVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.IntegerVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.JSR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.JSR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.JSR${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.JSR),de.tud.cs.st.bat.resolved.JSR${ public de.tud.cs.st.bat.resolved.JSR apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.JSR${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.JSR${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.JSR): scala.Some),de.tud.cs.st.bat.resolved.JSR${ public scala.Some unapply(de.tud.cs.st.bat.resolved.JSR) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.JSR{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.JSR{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.JSR{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.JSR{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.JSR{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.JSR{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.JSR{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.JSR_W${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.JSR_W${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.JSR_W${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.JSR_W),de.tud.cs.st.bat.resolved.JSR_W${ public de.tud.cs.st.bat.resolved.JSR_W apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.JSR_W${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.JSR_W${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR_W${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.JSR_W): scala.Some),de.tud.cs.st.bat.resolved.JSR_W${ public scala.Some unapply(de.tud.cs.st.bat.resolved.JSR_W) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.JSR_W{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),branchoffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W{ public int branchoffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.JSR_W{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.JSR_W{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.JSR_W{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR_W{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.JSR_W{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.JSR_W{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR_W{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.JSR_W{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.JSR_W{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/JSR_W),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.JSR_W{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2D${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2D${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2D${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2D${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2D${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2D${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.L2D${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2D${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2D${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.L2D${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2D{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2D{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2D{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2D{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2D{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2D),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2D{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2F${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2F${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2F${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2F${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2F${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2F${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.L2F${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2F${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2F${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.L2F${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2F{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2F{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2F{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2F{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2F{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2F),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2F{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2I${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.L2I${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2I${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2I${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2I${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2I${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.L2I${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2I${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2I${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.L2I${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.L2I{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2I{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.L2I{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.L2I{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.L2I{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/L2I),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.L2I{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LADD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LADD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LADD${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LADD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LADD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LADD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LADD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LADD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LADD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LADD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LADD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LADD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LADD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LADD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LADD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LADD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LADD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LAND${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LAND${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LAND${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LAND${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LAND${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LAND${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LAND${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LAND${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LAND${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LAND${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LAND{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LAND{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LAND{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LAND{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LAND{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LAND),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LAND{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCMP${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCMP${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCMP${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCMP${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCMP${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCMP${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LCMP${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCMP${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCMP${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LCMP${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCMP{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCMP{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCMP{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCMP{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCMP{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCMP),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCMP{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCONST_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCONST_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCONST_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCONST_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LCONST_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCONST_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCONST_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCONST_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LCONST_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCONST_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCONST_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LCONST_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LCONST_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LCONST_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LCONST_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LCONST_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LCONST_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LCONST_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.resolved.LDC),de.tud.cs.st.bat.resolved.LDC${ public de.tud.cs.st.bat.resolved.LDC apply(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LDC${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LDC): scala.Some),de.tud.cs.st.bat.resolved.LDC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LDC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): void),de.tud.cs.st.bat.resolved.LDC{ public void <init>(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LDC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LDC{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): boolean),de.tud.cs.st.bat.resolved.LDC{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LDC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LDC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LDC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC),value,MethodDescriptor((): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.LDC{ public de.tud.cs.st.bat.resolved.ConstantValue value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC2_W${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC2_W${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC2_W${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC2_W${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.resolved.LDC2_W),de.tud.cs.st.bat.resolved.LDC2_W${ public de.tud.cs.st.bat.resolved.LDC2_W apply(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LDC2_W${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC2_W${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC2_W${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LDC2_W): scala.Some),de.tud.cs.st.bat.resolved.LDC2_W${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LDC2_W) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC2_W{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): void),de.tud.cs.st.bat.resolved.LDC2_W{ public void <init>(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LDC2_W{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LDC2_W{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): boolean),de.tud.cs.st.bat.resolved.LDC2_W{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC2_W{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC2_W{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC2_W{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC2_W{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LDC2_W{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC2_W{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC2_W{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LDC2_W{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LDC2_W{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC2_W),value,MethodDescriptor((): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.LDC2_W{ public de.tud.cs.st.bat.resolved.ConstantValue value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC_W${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC_W${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDC_W${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC_W${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): de.tud.cs.st.bat.resolved.LDC_W),de.tud.cs.st.bat.resolved.LDC_W${ public de.tud.cs.st.bat.resolved.LDC_W apply(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LDC_W${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LDC_W${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC_W${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LDC_W): scala.Some),de.tud.cs.st.bat.resolved.LDC_W${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LDC_W) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC_W{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): void),de.tud.cs.st.bat.resolved.LDC_W{ public void <init>(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LDC_W{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LDC_W{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ConstantValue): boolean),de.tud.cs.st.bat.resolved.LDC_W{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ConstantValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC_W{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC_W{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC_W{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDC_W{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LDC_W{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC_W{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDC_W{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LDC_W{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LDC_W{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDC_W),value,MethodDescriptor((): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.LDC_W{ public de.tud.cs.st.bat.resolved.ConstantValue value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDIV${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LDIV${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LDIV${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDIV${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LDIV${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDIV${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LDIV${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDIV${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LDIV${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LDIV${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LDIV{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDIV{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LDIV{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LDIV{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LDIV{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LDIV),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LDIV{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LLOAD${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.LLOAD),de.tud.cs.st.bat.resolved.LLOAD${ public de.tud.cs.st.bat.resolved.LLOAD apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LLOAD${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LLOAD): scala.Some),de.tud.cs.st.bat.resolved.LLOAD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LLOAD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.LLOAD{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LLOAD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.LLOAD{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LLOAD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LLOAD_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LLOAD_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LLOAD_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LLOAD_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LLOAD_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LLOAD_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LLOAD_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LLOAD_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LLOAD_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LLOAD_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LLOAD_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LMUL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LMUL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LMUL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LMUL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LMUL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LMUL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LMUL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LMUL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LMUL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LMUL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LMUL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LMUL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LMUL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LMUL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LMUL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LMUL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LMUL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LNEG${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LNEG${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LNEG${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LNEG${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LNEG${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LNEG${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LNEG${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LNEG${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LNEG${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LNEG${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LNEG{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LNEG{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LNEG{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LNEG{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LNEG{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LNEG),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LNEG{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.LOOKUPSWITCH): void),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.LOOKUPSWITCH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),apply,MethodDescriptor((scala.Tuple2): scala.xml.Elem),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public scala.xml.Elem apply(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOOKUPSWITCH$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),apply,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LOOKUPSWITCH),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public de.tud.cs.st.bat.resolved.LOOKUPSWITCH apply(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LOOKUPSWITCH): scala.Some),de.tud.cs.st.bat.resolved.LOOKUPSWITCH${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LOOKUPSWITCH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),<init>,MethodDescriptor((int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public void <init>(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),defaultOffset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int defaultOffset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),gd1$1,MethodDescriptor((scala.RandomAccessSeq, int, int): boolean),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ private boolean gd1$1(scala.RandomAccessSeq,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),npairs,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public scala.RandomAccessSeq npairs() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),npairsCount,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int npairsCount() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOOKUPSWITCH),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LOOKUPSWITCH{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LOR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LOR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LOR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LOR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LOR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LOR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LOR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LOR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LOR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LOR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LOR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LOR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LOR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LREM${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LREM${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LREM${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LREM${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LREM${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LREM${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LREM${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LREM${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LREM${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LREM${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LREM{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LREM{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LREM{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LREM{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LREM{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LREM),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LREM{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LRETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LRETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LRETURN${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LRETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LRETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LRETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LRETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LRETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LRETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LRETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LRETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LRETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LRETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LRETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LRETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LRETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LRETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSHL${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSHL${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSHL${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHL${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSHL${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHL${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSHL${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHL${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSHL${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSHL${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSHL{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHL{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHL{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSHL{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHL{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHL),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSHL{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSHR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSHR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSHR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSHR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSHR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSHR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSHR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSHR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSHR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSHR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSHR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSHR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSHR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LSTORE${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.LSTORE),de.tud.cs.st.bat.resolved.LSTORE${ public de.tud.cs.st.bat.resolved.LSTORE apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LSTORE${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LSTORE): scala.Some),de.tud.cs.st.bat.resolved.LSTORE${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LSTORE) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.LSTORE{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LSTORE{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.LSTORE{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSTORE{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_0${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_0${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_0${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_0${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_0${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_0${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_0${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_0${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_0${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSTORE_0${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_0{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_0{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_0{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_0{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_0{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_0),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_0{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_1${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_1${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_1${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_1${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_1${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_1${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_1${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_1${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_1${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSTORE_1${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_1{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_1{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_1{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_1{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_1{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_1),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_1{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSTORE_2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_3${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSTORE_3${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_3${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_3${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_3${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_3${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_3${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_3${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_3${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSTORE_3${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSTORE_3{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_3{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSTORE_3{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSTORE_3{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSTORE_3{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSTORE_3),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSTORE_3{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSUB${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LSUB${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSUB${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSUB${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSUB${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSUB${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LSUB${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSUB${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSUB${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LSUB${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LSUB{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSUB{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LSUB{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LSUB{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LSUB{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LSUB),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LSUB{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LUSHR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LUSHR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LUSHR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LUSHR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LUSHR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LUSHR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LUSHR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LUSHR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LUSHR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LUSHR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LUSHR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LUSHR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LUSHR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LUSHR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LUSHR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LUSHR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LUSHR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LXOR${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LXOR${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LXOR${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LXOR${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LXOR${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LXOR${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.LXOR${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LXOR${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LXOR${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.LXOR${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.LXOR{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LXOR{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LXOR{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LXOR{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LXOR{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LXOR),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.LXOR{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public de.tud.cs.st.bat.resolved.LineNumberTableEntry apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LineNumberTableEntry): scala.Some),de.tud.cs.st.bat.resolved.LineNumberTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LineNumberTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),gd2$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ private boolean gd2$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),lineNumber,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public int lineNumber() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),startPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public int startPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTableEntry),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LineNumberTableEntry{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.LineNumberTable_attribute): void),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.LineNumberTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.LineNumberTableEntry): scala.xml.Elem),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.LineNumberTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTable_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public de.tud.cs.st.bat.resolved.LineNumberTable_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LineNumberTable_attribute): scala.Some),de.tud.cs.st.bat.resolved.LineNumberTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LineNumberTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),lineNumberTable,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public scala.RandomAccessSeq lineNumberTable() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LineNumberTable_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.LineNumberTable_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),apply,MethodDescriptor((int, int, java.lang.String, de.tud.cs.st.bat.resolved.FieldType, int): de.tud.cs.st.bat.resolved.LocalVariableTableEntry),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public de.tud.cs.st.bat.resolved.LocalVariableTableEntry apply(int,int,java.lang.String,de.tud.cs.st.bat.resolved.FieldType,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTableEntry): scala.Some),de.tud.cs.st.bat.resolved.LocalVariableTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LocalVariableTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),<init>,MethodDescriptor((int, int, java.lang.String, de.tud.cs.st.bat.resolved.FieldType, int): void),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public void <init>(int,int,java.lang.String,de.tud.cs.st.bat.resolved.FieldType,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),gd2$1,MethodDescriptor((int, de.tud.cs.st.bat.resolved.FieldType, java.lang.String, int, int): boolean),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ private boolean gd2$1(int,de.tud.cs.st.bat.resolved.FieldType,java.lang.String,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),index,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),length,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),startPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public int startPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTableEntry),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTableEntry{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTable_attribute): void),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.LocalVariableTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTableEntry): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.LocalVariableTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTable_attribute),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public de.tud.cs.st.bat.resolved.LocalVariableTable_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTable_attribute): scala.Some),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LocalVariableTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),localVariableTable,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public scala.RandomAccessSeq localVariableTable() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTable_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.LocalVariableTable_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),apply,MethodDescriptor((int, int, java.lang.String, java.lang.String, int): de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry apply(int,int,java.lang.String,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry): scala.Some),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),<init>,MethodDescriptor((int, int, java.lang.String, java.lang.String, int): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public void <init>(int,int,java.lang.String,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),gd2$1,MethodDescriptor((int, java.lang.String, java.lang.String, int, int): boolean),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ private boolean gd2$1(int,java.lang.String,java.lang.String,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),index,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),length,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int length() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),signature,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public java.lang.String signature() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),startPC,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public int startPC() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTableEntry),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute): scala.Some),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),localVariableTypeTable,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public scala.RandomAccessSeq localVariableTypeTable() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LocalVariableTypeTable_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongType),de.tud.cs.st.bat.resolved.LongType${ public de.tud.cs.st.bat.resolved.LongType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType$),lt,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongType),de.tud.cs.st.bat.resolved.LongType${ private de.tud.cs.st.bat.resolved.LongType lt() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.LongType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LongValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.LongValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),apply,MethodDescriptor((long): de.tud.cs.st.bat.resolved.LongValue),de.tud.cs.st.bat.resolved.LongValue${ public de.tud.cs.st.bat.resolved.LongValue apply(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.LongValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LongValue): scala.Some),de.tud.cs.st.bat.resolved.LongValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.LongValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),<init>,MethodDescriptor((long): void),de.tud.cs.st.bat.resolved.LongValue{ public void <init>(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LongValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),gd6$1,MethodDescriptor((long): boolean),de.tud.cs.st.bat.resolved.LongValue{ private boolean gd6$1(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LongValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LongValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.LongValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongValue),value,MethodDescriptor((): long),de.tud.cs.st.bat.resolved.LongValue{ public long value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongVariableInfo),de.tud.cs.st.bat.resolved.LongVariableInfo${ public de.tud.cs.st.bat.resolved.LongVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongVariableInfo),de.tud.cs.st.bat.resolved.LongVariableInfo${ public de.tud.cs.st.bat.resolved.LongVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.LongVariableInfo): boolean),de.tud.cs.st.bat.resolved.LongVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.LongVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.LongVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.LongVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.LongVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.LongVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.LongVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.LongVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/LongVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.LongVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MONITORENTER${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MONITORENTER${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MONITORENTER${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITORENTER${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.MONITORENTER${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITORENTER${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MONITORENTER${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITORENTER${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.MONITORENTER${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.MONITORENTER${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MONITORENTER{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITORENTER{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITORENTER{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.MONITORENTER{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITORENTER{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITORENTER),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.MONITORENTER{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MONITOREXIT${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MONITOREXIT${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MONITOREXIT${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITOREXIT${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.MONITOREXIT${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITOREXIT${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MONITOREXIT${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITOREXIT${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.MONITOREXIT${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.MONITOREXIT${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MONITOREXIT),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.MONITOREXIT{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType, int): de.tud.cs.st.bat.resolved.MULTIANEWARRAY),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public de.tud.cs.st.bat.resolved.MULTIANEWARRAY apply(de.tud.cs.st.bat.resolved.ReferenceType,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.MULTIANEWARRAY): scala.Some),de.tud.cs.st.bat.resolved.MULTIANEWARRAY${ public scala.Some unapply(de.tud.cs.st.bat.resolved.MULTIANEWARRAY) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType, int): void),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public void <init>(de.tud.cs.st.bat.resolved.ReferenceType,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),componentType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ReferenceType),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public de.tud.cs.st.bat.resolved.ReferenceType componentType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),dimensions,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public int dimensions() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),gd1$1,MethodDescriptor((int, de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ private boolean gd1$1(int,de.tud.cs.st.bat.resolved.ReferenceType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MULTIANEWARRAY),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.MULTIANEWARRAY{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptor): void),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType): scala.xml.Elem),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptor$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptor${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptor${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptor${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.MethodDescriptor${ public de.tud.cs.st.bat.resolved.MethodDescriptor apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor$),parseParameterType,MethodDescriptor((java.lang.String, int): scala.Tuple2),de.tud.cs.st.bat.resolved.MethodDescriptor${ private scala.Tuple2 parseParameterType(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptor{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),<init>,MethodDescriptor((scala.Seq, de.tud.cs.st.bat.resolved.Type): void),de.tud.cs.st.bat.resolved.MethodDescriptor{ public void <init>(scala.Seq,de.tud.cs.st.bat.resolved.Type) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),parameterTypes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.MethodDescriptor{ public scala.Seq parameterTypes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),returnType,MethodDescriptor((): de.tud.cs.st.bat.resolved.Type),de.tud.cs.st.bat.resolved.MethodDescriptor{ public de.tud.cs.st.bat.resolved.Type returnType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptor{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptor),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.MethodDescriptor{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$1{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$2{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$3{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$3),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$3{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$4{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$4),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$4{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$5{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$5),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$5{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$5),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$5{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$6),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$6),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.MethodDescriptorTest): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$6{ public void <init>(de.tud.cs.st.bat.resolved.MethodDescriptorTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$6),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$6{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$6),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$6{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest$$anonfun$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest$$anonfun$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),execute,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/MethodDescriptorTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.bat.resolved.MethodDescriptorTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Method_Info): void),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.Method_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.native.AccessFlag): scala.xml.Elem),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.native.AccessFlag) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.Method_Info): void),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public void <init>(de.tud.cs.st.bat.resolved.Method_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Attribute): scala.xml.Node),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.Attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$$anonfun$toXML$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info$$anonfun$toXML$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Method_Info${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Method_Info${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),apply,MethodDescriptor((int, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor, scala.Seq): de.tud.cs.st.bat.resolved.Method_Info),de.tud.cs.st.bat.resolved.Method_Info${ public de.tud.cs.st.bat.resolved.Method_Info apply(int,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Method_Info${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.Method_Info${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Method_Info): scala.Some),de.tud.cs.st.bat.resolved.Method_Info${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Method_Info) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),<init>,MethodDescriptor((int, java.lang.String, de.tud.cs.st.bat.resolved.MethodDescriptor, scala.Seq): void),de.tud.cs.st.bat.resolved.Method_Info{ public void <init>(int,java.lang.String,de.tud.cs.st.bat.resolved.MethodDescriptor,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),accessFlags,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info{ public int accessFlags() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),attributes,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.Method_Info{ public scala.Seq attributes() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),descriptor,MethodDescriptor((): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.Method_Info{ public de.tud.cs.st.bat.resolved.MethodDescriptor descriptor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Method_Info{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),gd1$1,MethodDescriptor((scala.Seq, de.tud.cs.st.bat.resolved.MethodDescriptor, java.lang.String, int): boolean),de.tud.cs.st.bat.resolved.Method_Info{ private boolean gd1$1(scala.Seq,de.tud.cs.st.bat.resolved.MethodDescriptor,java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Method_Info{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Method_Info{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Method_Info{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Method_Info),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Method_Info{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEW${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NEW${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NEW${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.NEW${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.resolved.NEW),de.tud.cs.st.bat.resolved.NEW${ public de.tud.cs.st.bat.resolved.NEW apply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.NEW${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.NEW${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEW${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.NEW): scala.Some),de.tud.cs.st.bat.resolved.NEW${ public scala.Some unapply(de.tud.cs.st.bat.resolved.NEW) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEW{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): void),de.tud.cs.st.bat.resolved.NEW{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.NEW{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.NEW{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.NEW{ private boolean gd1$1(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEW{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEW{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),objectType,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.NEW{ public de.tud.cs.st.bat.resolved.ObjectType objectType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEW{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEW{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.NEW{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEW{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEW{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.NEW{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEW),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.NEW{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NEWARRAY${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NEWARRAY${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.NEWARRAY${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.NEWARRAY),de.tud.cs.st.bat.resolved.NEWARRAY${ public de.tud.cs.st.bat.resolved.NEWARRAY apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.NEWARRAY${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.NEWARRAY${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEWARRAY${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.NEWARRAY): scala.Some),de.tud.cs.st.bat.resolved.NEWARRAY${ public scala.Some unapply(de.tud.cs.st.bat.resolved.NEWARRAY) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.NEWARRAY{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),atype,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY{ public int atype() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.NEWARRAY{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.NEWARRAY{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.NEWARRAY{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEWARRAY{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NEWARRAY{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.NEWARRAY{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEWARRAY{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NEWARRAY{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.NEWARRAY{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NEWARRAY),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.NEWARRAY{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NOP${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NOP${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.NOP${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NOP${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.NOP${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NOP${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.NOP${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NOP${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.NOP${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.NOP${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.NOP{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NOP{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NOP{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.NOP{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NOP{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NOP),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.NOP{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NullVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NullVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NullVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.NullVariableInfo),de.tud.cs.st.bat.resolved.NullVariableInfo${ public de.tud.cs.st.bat.resolved.NullVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.NullVariableInfo),de.tud.cs.st.bat.resolved.NullVariableInfo${ public de.tud.cs.st.bat.resolved.NullVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.NullVariableInfo): boolean),de.tud.cs.st.bat.resolved.NullVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.NullVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NullVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.NullVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.NullVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NullVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.NullVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.NullVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NullVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.NullVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.NullVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/NullVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.NullVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectType$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$$anonfun$apply$1),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectType$$anonfun$apply$1{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$$anonfun$apply$1),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ObjectType$$anonfun$apply$1{ public de.tud.cs.st.bat.resolved.ObjectType apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$$anonfun$apply$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectType$$anonfun$apply$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ObjectType${ public de.tud.cs.st.bat.resolved.ObjectType apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),cache,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.bat.resolved.ObjectType${ private scala.collection.mutable.Map cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),packageName,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType${ public java.lang.String packageName(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),simpleName,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType${ public java.lang.String simpleName(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): scala.Option),de.tud.cs.st.bat.resolved.ObjectType${ public scala.Option unapply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectType{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),className,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType{ public java.lang.String className() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectType{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ObjectType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),packageName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType{ public java.lang.String packageName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),simpleName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType{ public java.lang.String simpleName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType{ public java.lang.String toJava() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectType{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectTypeTest): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$1{ public void <init>(de.tud.cs.st.bat.resolved.ObjectTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectTypeTest): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$2{ public void <init>(de.tud.cs.st.bat.resolved.ObjectTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectTypeTest): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$3{ public void <init>(de.tud.cs.st.bat.resolved.ObjectTypeTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$3),apply,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$3{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),execute,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectTypeTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.bat.resolved.ObjectTypeTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): de.tud.cs.st.bat.resolved.ObjectVariableInfo),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public de.tud.cs.st.bat.resolved.ObjectVariableInfo apply(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectVariableInfo): scala.Some),de.tud.cs.st.bat.resolved.ObjectVariableInfo${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ObjectVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): void),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),clazz,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public de.tud.cs.st.bat.resolved.ObjectType clazz() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),gd2$1,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ private boolean gd2$1(de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ObjectVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ObjectVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.POP${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.POP${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.POP${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.POP${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.POP${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.POP${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.POP${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.POP{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.POP{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.POP{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.POP2${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.POP2${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.POP2${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP2${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.POP2${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP2${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.POP2${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP2${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.POP2${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.POP2${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.POP2{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP2{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.POP2{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.POP2{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.POP2{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/POP2),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.POP2{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTFIELD${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.PUTFIELD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.PUTFIELD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): de.tud.cs.st.bat.resolved.PUTFIELD),de.tud.cs.st.bat.resolved.PUTFIELD${ public de.tud.cs.st.bat.resolved.PUTFIELD apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.PUTFIELD${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.PUTFIELD${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTFIELD${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.PUTFIELD): scala.Some),de.tud.cs.st.bat.resolved.PUTFIELD${ public scala.Some unapply(de.tud.cs.st.bat.resolved.PUTFIELD) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTFIELD{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.PUTFIELD{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.PUTFIELD{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.PUTFIELD{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.PUTFIELD{ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.PUTFIELD{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.PUTFIELD{ private boolean gd1$1(de.tud.cs.st.bat.resolved.FieldType,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTFIELD{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTFIELD{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTFIELD{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTFIELD{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTFIELD{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.PUTFIELD{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTFIELD{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTFIELD{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.PUTFIELD{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTFIELD),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.PUTFIELD{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTSTATIC${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.PUTSTATIC${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.PUTSTATIC${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): de.tud.cs.st.bat.resolved.PUTSTATIC),de.tud.cs.st.bat.resolved.PUTSTATIC${ public de.tud.cs.st.bat.resolved.PUTSTATIC apply(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.PUTSTATIC${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.PUTSTATIC${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTSTATIC${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.PUTSTATIC): scala.Some),de.tud.cs.st.bat.resolved.PUTSTATIC${ public scala.Some unapply(de.tud.cs.st.bat.resolved.PUTSTATIC) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTSTATIC{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ObjectType, java.lang.String, de.tud.cs.st.bat.resolved.FieldType): void),de.tud.cs.st.bat.resolved.PUTSTATIC{ public void <init>(de.tud.cs.st.bat.resolved.ObjectType,java.lang.String,de.tud.cs.st.bat.resolved.FieldType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),declaringClass,MethodDescriptor((): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.PUTSTATIC{ public de.tud.cs.st.bat.resolved.ObjectType declaringClass() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.PUTSTATIC{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.PUTSTATIC{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),fieldType,MethodDescriptor((): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.PUTSTATIC{ public de.tud.cs.st.bat.resolved.FieldType fieldType() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),gd1$1,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldType, java.lang.String, de.tud.cs.st.bat.resolved.ObjectType): boolean),de.tud.cs.st.bat.resolved.PUTSTATIC{ private boolean gd1$1(de.tud.cs.st.bat.resolved.FieldType,java.lang.String,de.tud.cs.st.bat.resolved.ObjectType) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTSTATIC{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTSTATIC{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTSTATIC{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTSTATIC{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.PUTSTATIC{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.PUTSTATIC{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTSTATIC{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.PUTSTATIC{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.PUTSTATIC{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/PUTSTATIC),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.PUTSTATIC{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1): void),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation): scala.xml.Elem),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public scala.xml.Elem apply(de.tud.cs.st.bat.resolved.Annotation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute): void),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public void <init>(de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),apply,MethodDescriptor((scala.RandomAccessSeq): scala.xml.Elem),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public scala.xml.Elem apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$$anonfun$parameterAnnotationsToXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute): void),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$class{ public static void $init$(de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ParameterAnnotations_attribute$class),parameterAnnotationsToXML,MethodDescriptor((de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute): scala.Seq),de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute$class{ public static scala.Seq parameterAnnotationsToXML(de.tud.cs.st.bat.resolved.ParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RET${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RET${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RET${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.RET),de.tud.cs.st.bat.resolved.RET${ public de.tud.cs.st.bat.resolved.RET apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.RET${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RET${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RET${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.RET): scala.Some),de.tud.cs.st.bat.resolved.RET${ public scala.Some unapply(de.tud.cs.st.bat.resolved.RET) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.RET{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.RET{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.RET{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.RET{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),lvIndex,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET{ public int lvIndex() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RET{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RET{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RET{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RET{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RET{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.RET{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RET),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.RET{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RETURN${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RETURN${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.RETURN${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RETURN${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RETURN${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RETURN${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.RETURN${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RETURN${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.RETURN${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.RETURN${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.RETURN{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RETURN{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RETURN{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RETURN{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RETURN{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RETURN),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.RETURN{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReferenceType$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): void),de.tud.cs.st.bat.resolved.ReferenceType$class{ public static void $init$(de.tud.cs.st.bat.resolved.ReferenceType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReferenceType$class),isReferenceType,MethodDescriptor((de.tud.cs.st.bat.resolved.ReferenceType): boolean),de.tud.cs.st.bat.resolved.ReferenceType$class{ public static boolean isReferenceType(de.tud.cs.st.bat.resolved.ReferenceType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ReturnType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ReturnType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ReturnType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.ReturnType),de.tud.cs.st.bat.resolved.ReturnType${ public de.tud.cs.st.bat.resolved.ReturnType apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.ReturnType): void),de.tud.cs.st.bat.resolved.ReturnType$class{ public static void $init$(de.tud.cs.st.bat.resolved.ReturnType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ReturnType$class),isReturnType,MethodDescriptor((de.tud.cs.st.bat.resolved.ReturnType): boolean),de.tud.cs.st.bat.resolved.ReturnType$class{ public static boolean isReturnType(de.tud.cs.st.bat.resolved.ReturnType) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute): scala.Some),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public scala.RandomAccessSeq annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),annotationsToXML,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public scala.Seq annotationsToXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),isRuntimeVisible,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public boolean isRuntimeVisible() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute): scala.Some),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),parameterAnnotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public scala.RandomAccessSeq parameterAnnotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),parameterAnnotationsToXML,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public scala.Seq parameterAnnotationsToXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeInvisibleParameterAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute): scala.Some),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),annotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public scala.RandomAccessSeq annotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),annotationsToXML,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public scala.Seq annotationsToXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),isRuntimeVisible,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public boolean isRuntimeVisible() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute): scala.Some),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),parameterAnnotations,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public scala.RandomAccessSeq parameterAnnotations() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),parameterAnnotationsToXML,MethodDescriptor((): scala.Seq),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public scala.Seq parameterAnnotationsToXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/RuntimeVisibleParameterAnnotations_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SALOAD${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SALOAD${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SALOAD${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SALOAD${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SALOAD${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SALOAD${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.SALOAD${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SALOAD${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SALOAD${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.SALOAD${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SALOAD{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SALOAD{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SALOAD{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SALOAD{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SALOAD{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SALOAD),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SALOAD{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SASTORE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SASTORE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SASTORE${ public scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SASTORE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SASTORE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SASTORE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.SASTORE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SASTORE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SASTORE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.SASTORE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SASTORE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SASTORE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SASTORE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SASTORE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SASTORE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SASTORE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SASTORE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SIPUSH${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SIPUSH${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SIPUSH${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.SIPUSH),de.tud.cs.st.bat.resolved.SIPUSH${ public de.tud.cs.st.bat.resolved.SIPUSH apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SIPUSH${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SIPUSH${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SIPUSH${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SIPUSH): scala.Some),de.tud.cs.st.bat.resolved.SIPUSH${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SIPUSH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.SIPUSH{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SIPUSH{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SIPUSH{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.SIPUSH{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SIPUSH{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SIPUSH{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SIPUSH{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SIPUSH{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SIPUSH{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.SIPUSH{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SIPUSH),value,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SIPUSH{ public int value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SWAP${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SWAP${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SWAP${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SWAP${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SWAP${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SWAP${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.SWAP${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SWAP${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SWAP${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.SWAP${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.SWAP{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SWAP{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SWAP{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SWAP{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SWAP{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SWAP),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.SWAP{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SameFrame${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.SameFrame),de.tud.cs.st.bat.resolved.SameFrame${ public de.tud.cs.st.bat.resolved.SameFrame apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SameFrame${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SameFrame${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SameFrame): scala.Some),de.tud.cs.st.bat.resolved.SameFrame${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SameFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.SameFrame{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SameFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrame{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.SameFrame{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SameFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SameFrame{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrame),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SameFrame{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameFrameExtended${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameFrameExtended${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),apply,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.SameFrameExtended),de.tud.cs.st.bat.resolved.SameFrameExtended${ public de.tud.cs.st.bat.resolved.SameFrameExtended apply(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SameFrameExtended${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.SameFrameExtended${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrameExtended${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SameFrameExtended): scala.Some),de.tud.cs.st.bat.resolved.SameFrameExtended${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SameFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),<init>,MethodDescriptor((int, int): void),de.tud.cs.st.bat.resolved.SameFrameExtended{ public void <init>(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SameFrameExtended{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),gd5$1,MethodDescriptor((int, int): boolean),de.tud.cs.st.bat.resolved.SameFrameExtended{ private boolean gd5$1(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),offsetDelta,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended{ public int offsetDelta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameFrameExtended{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SameFrameExtended{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrameExtended{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameFrameExtended{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SameFrameExtended{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameFrameExtended),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SameFrameExtended{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),apply,MethodDescriptor((int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame apply(int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame): scala.Some),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),<init>,MethodDescriptor((int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public void <init>(int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),gd2$1,MethodDescriptor((de.tud.cs.st.bat.resolved.VerificationTypeInfo, int): boolean),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ private boolean gd2$1(de.tud.cs.st.bat.resolved.VerificationTypeInfo,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrame),verificationTypeInfoStackItem,MethodDescriptor((): de.tud.cs.st.bat.resolved.VerificationTypeInfo),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrame{ public de.tud.cs.st.bat.resolved.VerificationTypeInfo verificationTypeInfoStackItem() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),apply,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended apply(int,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended): scala.Some),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),<init>,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): void),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public void <init>(int,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),frameType,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public int frameType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),gd3$1,MethodDescriptor((de.tud.cs.st.bat.resolved.VerificationTypeInfo, int, int): boolean),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ private boolean gd3$1(de.tud.cs.st.bat.resolved.VerificationTypeInfo,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),offsetDelta,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public int offsetDelta() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SameLocals1StackItemFrameExtended),verificationTypeInfoStackItem,MethodDescriptor((): de.tud.cs.st.bat.resolved.VerificationTypeInfo),de.tud.cs.st.bat.resolved.SameLocals1StackItemFrameExtended{ public de.tud.cs.st.bat.resolved.VerificationTypeInfo verificationTypeInfoStackItem() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ShortType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ShortType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.ShortType),de.tud.cs.st.bat.resolved.ShortType${ public de.tud.cs.st.bat.resolved.ShortType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType$),st,MethodDescriptor((): de.tud.cs.st.bat.resolved.ShortType),de.tud.cs.st.bat.resolved.ShortType${ private de.tud.cs.st.bat.resolved.ShortType st() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ShortType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.ShortType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ShortType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ShortType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ShortValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.ShortValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ShortValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.ShortValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),apply,MethodDescriptor((short): de.tud.cs.st.bat.resolved.ShortValue),de.tud.cs.st.bat.resolved.ShortValue${ public de.tud.cs.st.bat.resolved.ShortValue apply(short) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.ShortValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ShortValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.ShortValue): scala.Some),de.tud.cs.st.bat.resolved.ShortValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.ShortValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),<init>,MethodDescriptor((short): void),de.tud.cs.st.bat.resolved.ShortValue{ public void <init>(short) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.ShortValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),gd7$1,MethodDescriptor((short): boolean),de.tud.cs.st.bat.resolved.ShortValue{ private boolean gd7$1(short) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.ShortValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.ShortValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ShortValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.ShortValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.ShortValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.ShortValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/ShortValue),value,MethodDescriptor((): short),de.tud.cs.st.bat.resolved.ShortValue{ public short value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Signature_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Signature_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Signature_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Signature_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Signature_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.Signature_attribute),de.tud.cs.st.bat.resolved.Signature_attribute${ public de.tud.cs.st.bat.resolved.Signature_attribute apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.Signature_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Signature_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Signature_attribute): scala.Some),de.tud.cs.st.bat.resolved.Signature_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Signature_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Signature_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.Signature_attribute{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Signature_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),gd1$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.resolved.Signature_attribute{ private boolean gd1$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Signature_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Signature_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Signature_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Signature_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),signature,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Signature_attribute{ public java.lang.String signature() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Signature_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Signature_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Signature_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Signature_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute): scala.Some),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),debug_extension,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public java.lang.String debug_extension() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),gd1$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ private boolean gd1$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceDebugExtension_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public de.tud.cs.st.bat.resolved.SourceFile_attribute apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.SourceFile_attribute): scala.Some),de.tud.cs.st.bat.resolved.SourceFile_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.SourceFile_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),gd1$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.resolved.SourceFile_attribute{ private boolean gd1$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),sourceFile,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public java.lang.String sourceFile() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/SourceFile_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.SourceFile_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.StackMapTable_attribute): void),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.StackMapTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.StackMapFrame): scala.xml.Node),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public scala.xml.Node apply(de.tud.cs.st.bat.resolved.StackMapFrame) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StackMapTable_attribute$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),apply,MethodDescriptor((scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapTable_attribute),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public de.tud.cs.st.bat.resolved.StackMapTable_attribute apply(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.StackMapTable_attribute): scala.Some),de.tud.cs.st.bat.resolved.StackMapTable_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.StackMapTable_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),<init>,MethodDescriptor((scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public void <init>(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),gd1$1,MethodDescriptor((scala.RandomAccessSeq): boolean),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ private boolean gd1$1(scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),stackMapFrames,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public scala.RandomAccessSeq stackMapFrames() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StackMapTable_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.StackMapTable_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StringValue${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.StringValue${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.StringValue${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StringValue${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.StringValue${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.resolved.StringValue),de.tud.cs.st.bat.resolved.StringValue${ public de.tud.cs.st.bat.resolved.StringValue apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.StringValue${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StringValue${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.StringValue): scala.Some),de.tud.cs.st.bat.resolved.StringValue${ public scala.Some unapply(de.tud.cs.st.bat.resolved.StringValue) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StringValue{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.bat.resolved.StringValue{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.StringValue{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),gd9$1,MethodDescriptor((java.lang.String): boolean),de.tud.cs.st.bat.resolved.StringValue{ private boolean gd9$1(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StringValue{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.StringValue{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.StringValue{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StringValue{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StringValue{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.StringValue{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.StringValue{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/StringValue),value,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.StringValue{ public java.lang.String value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public de.tud.cs.st.bat.resolved.Synthetic_attribute apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public de.tud.cs.st.bat.resolved.Synthetic_attribute instance() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Synthetic_attribute): boolean),de.tud.cs.st.bat.resolved.Synthetic_attribute${ public boolean unapply(de.tud.cs.st.bat.resolved.Synthetic_attribute) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Synthetic_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Synthetic_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.TABLESWITCH): void),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public void <init>(de.tud.cs.st.bat.resolved.TABLESWITCH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),apply,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public scala.xml.Elem apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$$anonfun$toXML$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TABLESWITCH$$anonfun$toXML$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TABLESWITCH${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TABLESWITCH${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),apply,MethodDescriptor((int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.TABLESWITCH),de.tud.cs.st.bat.resolved.TABLESWITCH${ public de.tud.cs.st.bat.resolved.TABLESWITCH apply(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.TABLESWITCH${ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.TABLESWITCH${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TABLESWITCH${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.TABLESWITCH): scala.Some),de.tud.cs.st.bat.resolved.TABLESWITCH${ public scala.Some unapply(de.tud.cs.st.bat.resolved.TABLESWITCH) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),<init>,MethodDescriptor((int, int, int, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.TABLESWITCH{ public void <init>(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),default,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int default() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.TABLESWITCH{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.TABLESWITCH{ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),gd1$1,MethodDescriptor((scala.RandomAccessSeq, int, int, int): boolean),de.tud.cs.st.bat.resolved.TABLESWITCH{ private boolean gd1$1(scala.RandomAccessSeq,int,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),high,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int high() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),jumpOffsets,MethodDescriptor((): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.TABLESWITCH{ public scala.RandomAccessSeq jumpOffsets() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),low,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int low() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TABLESWITCH{ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TABLESWITCH{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.TABLESWITCH{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TABLESWITCH{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TABLESWITCH{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.TABLESWITCH{ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TABLESWITCH),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.TABLESWITCH{ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TopVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TopVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TopVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.TopVariableInfo),de.tud.cs.st.bat.resolved.TopVariableInfo${ public de.tud.cs.st.bat.resolved.TopVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.TopVariableInfo),de.tud.cs.st.bat.resolved.TopVariableInfo${ public de.tud.cs.st.bat.resolved.TopVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.TopVariableInfo): boolean),de.tud.cs.st.bat.resolved.TopVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.TopVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TopVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TopVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.TopVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TopVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TopVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.TopVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TopVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.TopVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.TopVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TopVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.TopVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): void),de.tud.cs.st.bat.resolved.Type$class{ public static void $init$(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isArrayType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isArrayType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isBaseType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isBaseType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isBooleanType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isBooleanType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isByteType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isByteType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isCharType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isCharType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isDoubleType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isDoubleType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isFieldType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isFloatType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isFloatType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isIntegerType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isIntegerType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isLongType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isLongType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isObjectType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isObjectType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isReferenceType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isReferenceType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isReturnType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isReturnType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isShortType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isShortType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Type$class),isVoidType,MethodDescriptor((de.tud.cs.st.bat.resolved.Type): boolean),de.tud.cs.st.bat.resolved.Type$class{ public static boolean isVoidType(de.tud.cs.st.bat.resolved.Type) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TypeAliases$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TypeAliases${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TypeAliases$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TypeAliases${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TypeAliases$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.TypeAliases${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/TypeAliases),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.TypeAliases{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),instance,MethodDescriptor((): de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo instance() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo): boolean),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo${ public boolean unapply(de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedThisVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.UninitializedVariableInfo),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public de.tud.cs.st.bat.resolved.UninitializedVariableInfo apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.UninitializedVariableInfo): scala.Some),de.tud.cs.st.bat.resolved.UninitializedVariableInfo${ public scala.Some unapply(de.tud.cs.st.bat.resolved.UninitializedVariableInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),<init>,MethodDescriptor((int): void),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),gd1$1,MethodDescriptor((int): boolean),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ private boolean gd1$1(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),offset,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public int offset() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/UninitializedVariableInfo),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.UninitializedVariableInfo{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Unknown_attribute${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Unknown_attribute${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.Unknown_attribute${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.Unknown_attribute${ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),apply,MethodDescriptor((java.lang.String, byte[]): de.tud.cs.st.bat.resolved.Unknown_attribute),de.tud.cs.st.bat.resolved.Unknown_attribute${ public de.tud.cs.st.bat.resolved.Unknown_attribute apply(java.lang.String,byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.Unknown_attribute${ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Unknown_attribute${ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute$),unapply,MethodDescriptor((de.tud.cs.st.bat.resolved.Unknown_attribute): scala.Some),de.tud.cs.st.bat.resolved.Unknown_attribute${ public scala.Some unapply(de.tud.cs.st.bat.resolved.Unknown_attribute) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Unknown_attribute{ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),<init>,MethodDescriptor((java.lang.String, byte[]): void),de.tud.cs.st.bat.resolved.Unknown_attribute{ public void <init>(java.lang.String,byte[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),attribute_name,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Unknown_attribute{ public java.lang.String attribute_name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.bat.resolved.Unknown_attribute{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),gd1$1,MethodDescriptor((byte[], java.lang.String): boolean),de.tud.cs.st.bat.resolved.Unknown_attribute{ private boolean gd1$1(byte[],java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),hashCode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Unknown_attribute{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),info,MethodDescriptor((): byte[]),de.tud.cs.st.bat.resolved.Unknown_attribute{ public byte[] info() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.Unknown_attribute{ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.Unknown_attribute{ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Unknown_attribute{ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.Unknown_attribute{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),toXML,MethodDescriptor((): scala.xml.Elem),de.tud.cs.st.bat.resolved.Unknown_attribute{ public scala.xml.Elem toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/Unknown_attribute),toXML,MethodDescriptor((): scala.xml.Node),de.tud.cs.st.bat.resolved.Unknown_attribute{ public scala.xml.Node toXML() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.VoidType${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.VoidType${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.VoidType${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType$),apply,MethodDescriptor((): de.tud.cs.st.bat.resolved.VoidType),de.tud.cs.st.bat.resolved.VoidType${ public de.tud.cs.st.bat.resolved.VoidType apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType$),vt,MethodDescriptor((): de.tud.cs.st.bat.resolved.VoidType),de.tud.cs.st.bat.resolved.VoidType${ private de.tud.cs.st.bat.resolved.VoidType vt() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.VoidType{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.VoidType{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isArrayType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isArrayType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isBaseType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isBaseType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isBooleanType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isBooleanType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isByteType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isByteType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isCharType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isCharType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isDoubleType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isDoubleType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isFieldType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isFieldType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isFloatType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isFloatType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isIntegerType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isIntegerType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isLongType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isLongType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isObjectType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isObjectType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isReferenceType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isReferenceType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isReturnType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isReturnType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isShortType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isShortType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),isVoidType,MethodDescriptor((): boolean),de.tud.cs.st.bat.resolved.VoidType{ public boolean isVoidType() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),toJava,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.VoidType{ public java.lang.String toJava() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/VoidType),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.VoidType{ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE${ public int $tag() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.WIDE${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.WIDE${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.WIDE${ public scala.List exceptions() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.WIDE${ public java.lang.String mnemonic() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE${ public int opcode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE${ public int productArity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.WIDE${ public java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.WIDE${ public java.lang.String productPrefix() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),readResolve,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.WIDE${ public java.lang.Object readResolve() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.WIDE${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.WIDE${ public scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE$),toXML,MethodDescriptor((int): scala.xml.Node),de.tud.cs.st.bat.resolved.WIDE${ public scala.xml.Node toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE{ public static int $tag() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),exceptions,MethodDescriptor((): scala.List),de.tud.cs.st.bat.resolved.WIDE{ public static scala.List exceptions() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),mnemonic,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.WIDE{ public static java.lang.String mnemonic() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),opcode,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE{ public static int opcode() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),productArity,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.WIDE{ public static int productArity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),productElement,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.WIDE{ public static java.lang.Object productElement(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),productPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.WIDE{ public static java.lang.String productPrefix() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/WIDE),toXML,MethodDescriptor((int): scala.xml.Elem),de.tud.cs.st.bat.resolved.WIDE{ public static scala.xml.Elem toXML(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding): void),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),Annotation,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.Annotation Annotation(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),AnnotationDefault_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.AnnotationDefault_attribute AnnotationDefault_attribute(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, de.tud.cs.st.bat.resolved.Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue AnnotationValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,de.tud.cs.st.bat.resolved.Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),ArrayValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue ArrayValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),BooleanValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue BooleanValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),ByteValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue ByteValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),CharValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue CharValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),ClassValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue ClassValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),DoubleValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue DoubleValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),ElementValuePair,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValuePair ElementValuePair(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),EnumValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue EnumValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),FloatValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue FloatValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),IntValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue IntValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),LongValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue LongValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),RuntimeVisibleAnnotations_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),ShortValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue ShortValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/AnnotationsBinding$class),StringValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.AnnotationsBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.AnnotationsBinding$class{ public static de.tud.cs.st.bat.resolved.ElementValue StringValue(de.tud.cs.st.bat.resolved.reader.AnnotationsBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public de.tud.cs.st.bat.resolved.AALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ARETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public de.tud.cs.st.bat.resolved.ARETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$10),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$10{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public de.tud.cs.st.bat.resolved.ICONST_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$100),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$100{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public de.tud.cs.st.bat.resolved.ICONST_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$101),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$101{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_4$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public de.tud.cs.st.bat.resolved.ICONST_4$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$102),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$102{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_5$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public de.tud.cs.st.bat.resolved.ICONST_5$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$103),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$103{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IDIV$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public de.tud.cs.st.bat.resolved.IDIV$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$104),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$104{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ACMPEQ),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public de.tud.cs.st.bat.resolved.IF_ACMPEQ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$105),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$105{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ACMPNE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public de.tud.cs.st.bat.resolved.IF_ACMPNE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$106),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$106{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ICMPEQ),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public de.tud.cs.st.bat.resolved.IF_ICMPEQ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$107),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$107{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ICMPNE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public de.tud.cs.st.bat.resolved.IF_ICMPNE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$108),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$108{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ICMPLT),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public de.tud.cs.st.bat.resolved.IF_ICMPLT apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$109),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$109{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ARRAYLENGTH$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public de.tud.cs.st.bat.resolved.ARRAYLENGTH$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$11),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$11{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ACMPGE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public de.tud.cs.st.bat.resolved.IF_ACMPGE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$110),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$110{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ICMPGT),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public de.tud.cs.st.bat.resolved.IF_ICMPGT apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$111),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$111{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IF_ICMPLE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public de.tud.cs.st.bat.resolved.IF_ICMPLE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$112),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$112{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFEQ),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public de.tud.cs.st.bat.resolved.IFEQ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$113),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$113{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFNE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public de.tud.cs.st.bat.resolved.IFNE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$114),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$114{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFLT),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public de.tud.cs.st.bat.resolved.IFLT apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$115),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$115{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFGE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public de.tud.cs.st.bat.resolved.IFGE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$116),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$116{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFGT),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public de.tud.cs.st.bat.resolved.IFGT apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$117),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$117{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFLE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public de.tud.cs.st.bat.resolved.IFLE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$118),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$118{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFNONNULL),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public de.tud.cs.st.bat.resolved.IFNONNULL apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$119),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$119{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$12),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$12{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IFNULL),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public de.tud.cs.st.bat.resolved.IFNULL apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$120),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$120{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$121),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$121{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$122),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$122{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ILOAD_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public de.tud.cs.st.bat.resolved.ILOAD_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$123),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$123{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ILOAD_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public de.tud.cs.st.bat.resolved.ILOAD_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$124),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$124{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ILOAD_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public de.tud.cs.st.bat.resolved.ILOAD_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$125),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$125{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ILOAD_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public de.tud.cs.st.bat.resolved.ILOAD_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$126),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$126{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IMUL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public de.tud.cs.st.bat.resolved.IMUL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$127),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$127{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INEG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public de.tud.cs.st.bat.resolved.INEG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$128),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$128{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INSTANCEOF),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public de.tud.cs.st.bat.resolved.INSTANCEOF apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$129),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$129{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ASTORE_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public de.tud.cs.st.bat.resolved.ASTORE_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$13),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$13{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INVOKEDYNAMIC),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public de.tud.cs.st.bat.resolved.INVOKEDYNAMIC apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$130),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$130{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INVOKEINTERFACE),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public de.tud.cs.st.bat.resolved.INVOKEINTERFACE apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$131),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$131{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INVOKESPECIAL),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public de.tud.cs.st.bat.resolved.INVOKESPECIAL apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$132),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$132{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INVOKESTATIC),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public de.tud.cs.st.bat.resolved.INVOKESTATIC apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$133),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$133{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.INVOKEVIRTUAL),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public de.tud.cs.st.bat.resolved.INVOKEVIRTUAL apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$134),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$134{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IOR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public de.tud.cs.st.bat.resolved.IOR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$135),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$135{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IREM$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public de.tud.cs.st.bat.resolved.IREM$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$136),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$136{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IRETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public de.tud.cs.st.bat.resolved.IRETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$137),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$137{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISHL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public de.tud.cs.st.bat.resolved.ISHL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$138),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$138{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISHR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public de.tud.cs.st.bat.resolved.ISHR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$139),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$139{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ASTORE_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public de.tud.cs.st.bat.resolved.ASTORE_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$14),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$14{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$140),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$140{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISTORE_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public de.tud.cs.st.bat.resolved.ISTORE_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$141),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$141{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISTORE_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public de.tud.cs.st.bat.resolved.ISTORE_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$142),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$142{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISTORE_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public de.tud.cs.st.bat.resolved.ISTORE_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$143),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$143{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISTORE_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public de.tud.cs.st.bat.resolved.ISTORE_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$144),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$144{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ISUB$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public de.tud.cs.st.bat.resolved.ISUB$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$145),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$145{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IUSHR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public de.tud.cs.st.bat.resolved.IUSHR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$146),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$146{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IXOR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public de.tud.cs.st.bat.resolved.IXOR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$147),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$147{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.JSR),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public de.tud.cs.st.bat.resolved.JSR apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$148),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$148{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.JSR_W),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public de.tud.cs.st.bat.resolved.JSR_W apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$149),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$149{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ASTORE_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public de.tud.cs.st.bat.resolved.ASTORE_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$15),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$15{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.L2D$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public de.tud.cs.st.bat.resolved.L2D$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$150),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$150{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.L2F$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public de.tud.cs.st.bat.resolved.L2F$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$151),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$151{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.L2I$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public de.tud.cs.st.bat.resolved.L2I$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$152),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$152{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LADD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public de.tud.cs.st.bat.resolved.LADD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$153),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$153{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public de.tud.cs.st.bat.resolved.LALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$154),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$154{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LAND$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public de.tud.cs.st.bat.resolved.LAND$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$155),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$155{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public de.tud.cs.st.bat.resolved.LASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$156),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$156{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LCMP$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public de.tud.cs.st.bat.resolved.LCMP$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$157),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$157{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LCONST_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public de.tud.cs.st.bat.resolved.LCONST_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$158),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$158{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LCONST_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public de.tud.cs.st.bat.resolved.LCONST_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$159),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$159{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ASTORE_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public de.tud.cs.st.bat.resolved.ASTORE_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$16),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$16{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LDC),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public de.tud.cs.st.bat.resolved.LDC apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$160),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$160{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LDC_W),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public de.tud.cs.st.bat.resolved.LDC_W apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$161),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$161{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LDC2_W),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public de.tud.cs.st.bat.resolved.LDC2_W apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$162),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$162{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LDIV$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public de.tud.cs.st.bat.resolved.LDIV$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$163),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$163{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$164),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$164{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LLOAD_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public de.tud.cs.st.bat.resolved.LLOAD_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$165),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$165{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LLOAD_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public de.tud.cs.st.bat.resolved.LLOAD_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$166),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$166{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LLOAD_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public de.tud.cs.st.bat.resolved.LLOAD_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$167),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$167{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LLOAD_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public de.tud.cs.st.bat.resolved.LLOAD_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$168),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$168{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LMUL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public de.tud.cs.st.bat.resolved.LMUL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$169),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$169{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ATHROW$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public de.tud.cs.st.bat.resolved.ATHROW$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$17),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$17{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LNEG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public de.tud.cs.st.bat.resolved.LNEG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$170),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$170{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171$$anonfun$172),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171$$anonfun$172{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171$$anonfun$172),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171, java.io.DataInputStream): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171$$anonfun$172{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171$$anonfun$172),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171$$anonfun$172{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171$$anonfun$172),apply,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171$$anonfun$172{ public scala.Tuple2 apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171$$anonfun$172),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171$$anonfun$172{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LOOKUPSWITCH),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public de.tud.cs.st.bat.resolved.LOOKUPSWITCH apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$171),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$171{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LOR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public de.tud.cs.st.bat.resolved.LOR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$173),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$173{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LREM$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public de.tud.cs.st.bat.resolved.LREM$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$174),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$174{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LRETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public de.tud.cs.st.bat.resolved.LRETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$175),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$175{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSHL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public de.tud.cs.st.bat.resolved.LSHL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$176),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$176{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSHR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public de.tud.cs.st.bat.resolved.LSHR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$177),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$177{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$178),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$178{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSTORE_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public de.tud.cs.st.bat.resolved.LSTORE_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$179),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$179{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.BALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public de.tud.cs.st.bat.resolved.BALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$18),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$18{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSTORE_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public de.tud.cs.st.bat.resolved.LSTORE_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$180),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$180{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSTORE_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public de.tud.cs.st.bat.resolved.LSTORE_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$181),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$181{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSTORE_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public de.tud.cs.st.bat.resolved.LSTORE_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$182),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$182{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LSUB$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public de.tud.cs.st.bat.resolved.LSUB$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$183),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$183{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LUSHR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public de.tud.cs.st.bat.resolved.LUSHR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$184),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$184{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LXOR$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public de.tud.cs.st.bat.resolved.LXOR$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$185),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$185{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MONITORENTER$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public de.tud.cs.st.bat.resolved.MONITORENTER$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$186),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$186{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MONITOREXIT$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public de.tud.cs.st.bat.resolved.MONITOREXIT$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$187),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$187{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MULTIANEWARRAY),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public de.tud.cs.st.bat.resolved.MULTIANEWARRAY apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$188),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$188{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.NEW),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public de.tud.cs.st.bat.resolved.NEW apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$189),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$189{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.BASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public de.tud.cs.st.bat.resolved.BASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$19),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$19{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.NEWARRAY),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public de.tud.cs.st.bat.resolved.NEWARRAY apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$190),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$190{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.NOP$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public de.tud.cs.st.bat.resolved.NOP$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$191),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$191{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.POP$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public de.tud.cs.st.bat.resolved.POP$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$192),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$192{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.POP2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public de.tud.cs.st.bat.resolved.POP2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$193),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$193{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.PUTFIELD),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public de.tud.cs.st.bat.resolved.PUTFIELD apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$194),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$194{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.PUTSTATIC),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public de.tud.cs.st.bat.resolved.PUTSTATIC apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$195),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$195{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RET),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public de.tud.cs.st.bat.resolved.RET apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$196),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$196{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public de.tud.cs.st.bat.resolved.RETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$197),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$197{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public de.tud.cs.st.bat.resolved.SALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$198),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$198{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public de.tud.cs.st.bat.resolved.SASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$199),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$199{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public de.tud.cs.st.bat.resolved.AASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.BIPUSH),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public de.tud.cs.st.bat.resolved.BIPUSH apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$20),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$20{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SIPUSH),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public de.tud.cs.st.bat.resolved.SIPUSH apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$200),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$200{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SWAP$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public de.tud.cs.st.bat.resolved.SWAP$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$201),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$201{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202$$anonfun$203),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202$$anonfun$203{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202$$anonfun$203),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202, java.io.DataInputStream): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202$$anonfun$203{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202,java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202$$anonfun$203),apply,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202$$anonfun$203{ public int apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202$$anonfun$203),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202$$anonfun$203{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202$$anonfun$203),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202$$anonfun$203{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.TABLESWITCH),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public de.tud.cs.st.bat.resolved.TABLESWITCH apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$202),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$202{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.WIDE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public de.tud.cs.st.bat.resolved.WIDE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$204),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$204{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.CALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public de.tud.cs.st.bat.resolved.CALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$21),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$21{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.CASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public de.tud.cs.st.bat.resolved.CASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$22),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$22{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.CHECKCAST),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public de.tud.cs.st.bat.resolved.CHECKCAST apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$23),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$23{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.D2F$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public de.tud.cs.st.bat.resolved.D2F$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$24),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$24{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.D2I$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public de.tud.cs.st.bat.resolved.D2I$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$25),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$25{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.D2L$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public de.tud.cs.st.bat.resolved.D2L$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$26),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$26{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DADD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public de.tud.cs.st.bat.resolved.DADD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$27),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$27{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public de.tud.cs.st.bat.resolved.DALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$28),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$28{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public de.tud.cs.st.bat.resolved.DASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$29),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$29{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ACONST_NULL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public de.tud.cs.st.bat.resolved.ACONST_NULL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DCMPG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public de.tud.cs.st.bat.resolved.DCMPG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$30),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$30{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DCMPL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public de.tud.cs.st.bat.resolved.DCMPL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$31),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$31{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DCONST_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public de.tud.cs.st.bat.resolved.DCONST_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$32),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$32{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DCONST_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public de.tud.cs.st.bat.resolved.DCONST_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$33),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$33{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DDIV$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public de.tud.cs.st.bat.resolved.DDIV$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$34),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$34{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$35),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$35{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DLOAD_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public de.tud.cs.st.bat.resolved.DLOAD_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$36),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$36{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DLOAD_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public de.tud.cs.st.bat.resolved.DLOAD_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$37),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$37{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DLOAD_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public de.tud.cs.st.bat.resolved.DLOAD_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$38),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$38{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DLOAD_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public de.tud.cs.st.bat.resolved.DLOAD_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$39),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$39{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DMUL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public de.tud.cs.st.bat.resolved.DMUL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$40),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$40{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DNEG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public de.tud.cs.st.bat.resolved.DNEG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$41),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$41{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DREM$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public de.tud.cs.st.bat.resolved.DREM$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$42),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$42{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DRETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public de.tud.cs.st.bat.resolved.DRETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$43),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$43{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$44),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$44{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DSTORE_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public de.tud.cs.st.bat.resolved.DSTORE_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$45),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$45{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DSTORE_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public de.tud.cs.st.bat.resolved.DSTORE_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$46),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$46{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DSTORE_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public de.tud.cs.st.bat.resolved.DSTORE_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$47),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$47{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DSTORE_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public de.tud.cs.st.bat.resolved.DSTORE_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$48),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$48{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DSUB$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public de.tud.cs.st.bat.resolved.DSUB$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$49),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$49{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ALOAD_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public de.tud.cs.st.bat.resolved.ALOAD_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public de.tud.cs.st.bat.resolved.DUP$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$50),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$50{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP_X1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public de.tud.cs.st.bat.resolved.DUP_X1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$51),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$51{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP_X2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public de.tud.cs.st.bat.resolved.DUP_X2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$52),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$52{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public de.tud.cs.st.bat.resolved.DUP2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$53),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$53{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP2_X1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public de.tud.cs.st.bat.resolved.DUP2_X1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$54),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$54{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.DUP2_X2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public de.tud.cs.st.bat.resolved.DUP2_X2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$55),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$55{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.F2D$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public de.tud.cs.st.bat.resolved.F2D$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$56),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$56{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.F2I$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public de.tud.cs.st.bat.resolved.F2I$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$57),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$57{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.F2L$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public de.tud.cs.st.bat.resolved.F2L$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$58),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$58{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FADD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public de.tud.cs.st.bat.resolved.FADD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$59),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$59{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ALOAD_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public de.tud.cs.st.bat.resolved.ALOAD_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public de.tud.cs.st.bat.resolved.FALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$60),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$60{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public de.tud.cs.st.bat.resolved.FASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$61),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$61{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FCMPG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public de.tud.cs.st.bat.resolved.FCMPG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$62),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$62{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FCMPL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public de.tud.cs.st.bat.resolved.FCMPL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$63),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$63{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FCONST_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public de.tud.cs.st.bat.resolved.FCONST_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$64),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$64{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FCONST_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public de.tud.cs.st.bat.resolved.FCONST_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$65),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$65{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FCONST_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public de.tud.cs.st.bat.resolved.FCONST_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$66),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$66{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FDIV$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public de.tud.cs.st.bat.resolved.FDIV$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$67),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$67{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$68),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$68{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FLOAD_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public de.tud.cs.st.bat.resolved.FLOAD_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$69),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$69{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ALOAD_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public de.tud.cs.st.bat.resolved.ALOAD_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FLOAD_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public de.tud.cs.st.bat.resolved.FLOAD_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$70),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$70{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FLOAD_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public de.tud.cs.st.bat.resolved.FLOAD_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$71),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$71{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FLOAD_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public de.tud.cs.st.bat.resolved.FLOAD_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$72),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$72{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FMUL$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public de.tud.cs.st.bat.resolved.FMUL$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$73),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$73{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FNEG$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public de.tud.cs.st.bat.resolved.FNEG$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$74),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$74{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FREM$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public de.tud.cs.st.bat.resolved.FREM$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$75),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$75{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FRETURN$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public de.tud.cs.st.bat.resolved.FRETURN$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$76),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$76{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public de.tud.cs.st.bat.resolved.Instruction apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$77),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$77{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FSTORE_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public de.tud.cs.st.bat.resolved.FSTORE_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$78),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$78{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FSTORE_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public de.tud.cs.st.bat.resolved.FSTORE_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$79),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$79{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ALOAD_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public de.tud.cs.st.bat.resolved.ALOAD_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FSTORE_2$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public de.tud.cs.st.bat.resolved.FSTORE_2$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$80),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$80{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FSTORE_3$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public de.tud.cs.st.bat.resolved.FSTORE_3$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$81),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$81{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FSUB$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public de.tud.cs.st.bat.resolved.FSUB$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$82),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$82{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.GETFIELD),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public de.tud.cs.st.bat.resolved.GETFIELD apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$83),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$83{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.GETSTATIC),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public de.tud.cs.st.bat.resolved.GETSTATIC apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$84),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$84{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.GOTO),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public de.tud.cs.st.bat.resolved.GOTO apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$85),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$85{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.GOTO_W),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public de.tud.cs.st.bat.resolved.GOTO_W apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$86),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$86{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2B$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public de.tud.cs.st.bat.resolved.I2B$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$87),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$87{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2C$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public de.tud.cs.st.bat.resolved.I2C$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$88),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$88{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2D$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public de.tud.cs.st.bat.resolved.I2D$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$89),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$89{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ANEWARRAY),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public de.tud.cs.st.bat.resolved.ANEWARRAY apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2F$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public de.tud.cs.st.bat.resolved.I2F$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$90),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$90{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2L$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public de.tud.cs.st.bat.resolved.I2L$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$91),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$91{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.I2S$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public de.tud.cs.st.bat.resolved.I2S$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$92),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$92{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IADD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public de.tud.cs.st.bat.resolved.IADD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$93),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$93{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IALOAD$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public de.tud.cs.st.bat.resolved.IALOAD$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$94),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$94{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IAND$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public de.tud.cs.st.bat.resolved.IAND$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$95),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$95{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.IASTORE$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public de.tud.cs.st.bat.resolved.IASTORE$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$96),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$96{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_M1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public de.tud.cs.st.bat.resolved.ICONST_M1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$97),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$97{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_0$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public de.tud.cs.st.bat.resolved.ICONST_0$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$98),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$98{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public void <init>(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),apply,MethodDescriptor((de.tud.cs.st.bat.resolved.Instruction, int, java.io.DataInputStream, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ICONST_1$),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public de.tud.cs.st.bat.resolved.ICONST_1$ apply(de.tud.cs.st.bat.resolved.Instruction,int,java.io.DataInputStream,scala.RandomAccessSeq) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),apply,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public java.lang.Object apply(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$$anonfun$99),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$$anonfun$99{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding): void),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/BytecodeReaderAndBinding$class),Code,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding, byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding$class{ public static de.tud.cs.st.bat.resolved.Instruction[] Code(de.tud.cs.st.bat.resolved.reader.BytecodeReaderAndBinding,byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ClassFileBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ClassFileBinding): void),de.tud.cs.st.bat.resolved.reader.ClassFileBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.ClassFileBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ClassFileBinding$class),ClassFile,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ClassFileBinding, int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ClassFile),de.tud.cs.st.bat.resolved.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.resolved.ClassFile ClassFile(de.tud.cs.st.bat.resolved.reader.ClassFileBinding,int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ClassFileBinding$class),Field_Info,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ClassFileBinding, int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Field_Info),de.tud.cs.st.bat.resolved.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.resolved.Field_Info Field_Info(de.tud.cs.st.bat.resolved.reader.ClassFileBinding,int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ClassFileBinding$class),Method_Info,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ClassFileBinding, int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Method_Info),de.tud.cs.st.bat.resolved.reader.ClassFileBinding$class{ public static de.tud.cs.st.bat.resolved.Method_Info Method_Info(de.tud.cs.st.bat.resolved.reader.ClassFileBinding,int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Code_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Code_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Code_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Code_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Code_attributeBinding$class),Code_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Code_attributeBinding, int, int, int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.resolved.reader.Code_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Code_attribute Code_attribute(de.tud.cs.st.bat.resolved.reader.Code_attributeBinding,int,int,int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Code_attributeBinding$class),ExceptionTableEntry,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Code_attributeBinding, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.resolved.reader.Code_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.ExceptionTableEntry ExceptionTableEntry(de.tud.cs.st.bat.resolved.reader.Code_attributeBinding,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ConstantValue_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/ConstantValue_attributeBinding$class),ConstantValue_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.ConstantValue_attribute ConstantValue_attribute(de.tud.cs.st.bat.resolved.reader.ConstantValue_attributeBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),<init>,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, scala.RandomAccessSeq): void),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public void <init>(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),apply,MethodDescriptor((int): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public de.tud.cs.st.bat.resolved.ObjectType apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$$anonfun$SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver): void),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Class_info_IndexToObjectType,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static de.tud.cs.st.bat.resolved.ObjectType CONSTANT_Class_info_IndexToObjectType(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Fieldref_info_IndexToFieldref,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static scala.Tuple3 CONSTANT_Fieldref_info_IndexToFieldref(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_MethodRef_info_IndexToMethodRef,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static scala.Tuple3 CONSTANT_MethodRef_info_IndexToMethodRef(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_NameAndType_info_IndexToNameAndFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndFieldType(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Utf8_info_IndexToFieldDescriptor,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static de.tud.cs.st.bat.resolved.FieldDescriptor CONSTANT_Utf8_info_IndexToFieldDescriptor(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Utf8_info_IndexToMethodDescriptor,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static de.tud.cs.st.bat.resolved.MethodDescriptor CONSTANT_Utf8_info_IndexToMethodDescriptor(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Utf8_info_IndexToString,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): java.lang.String),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static java.lang.String CONSTANT_Utf8_info_IndexToString(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),CONSTANT_Value_IndexToConstantValue,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static de.tud.cs.st.bat.resolved.ConstantValue CONSTANT_Value_IndexToConstantValue(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),FieldDescriptorToFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, de.tud.cs.st.bat.resolved.FieldDescriptor): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static de.tud.cs.st.bat.resolved.FieldType FieldDescriptorToFieldType(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Constant_PoolResolver$class),SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver, scala.Seq, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver$class{ public static scala.Seq SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType(de.tud.cs.st.bat.resolved.reader.Constant_PoolResolver,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Deprecated_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Deprecated_attributeBinding$class),Deprecated_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Deprecated_attribute Deprecated_attribute(de.tud.cs.st.bat.resolved.reader.Deprecated_attributeBinding,int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/EnclosingMethod_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/EnclosingMethod_attributeBinding$class),EnclosingMethod_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.EnclosingMethod_attribute),de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.EnclosingMethod_attribute EnclosingMethod_attribute(de.tud.cs.st.bat.resolved.reader.EnclosingMethod_attributeBinding,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Exceptions_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Exceptions_attributeBinding$class),Exceptions_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Exceptions_attribute Exceptions_attribute(de.tud.cs.st.bat.resolved.reader.Exceptions_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/InnerClasses_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/InnerClasses_attributeBinding$class),InnerClassesEntry,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClassesEntry),de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.InnerClassesEntry InnerClassesEntry(de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/InnerClasses_attributeBinding$class),InnerClasses_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClasses_attribute),de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.InnerClasses_attribute InnerClasses_attribute(de.tud.cs.st.bat.resolved.reader.InnerClasses_attributeBinding,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),<init>,MethodDescriptor((): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Annotation,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Annotation(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AnnotationDefault_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object AnnotationDefault_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue AnnotationValue(de.tud.cs.st.bat.resolved.Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AnnotationValue,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object AnnotationValue(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ArrayValue(scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Attributes,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Attributes(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),BooleanValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object BooleanValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ByteValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ByteValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Class_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info$ CONSTANT_Class_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Class_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Class_info_IndexToObjectType,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ObjectType CONSTANT_Class_info_IndexToObjectType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Double_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info$ CONSTANT_Double_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Double_info,MethodDescriptor((double): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info$ CONSTANT_Fieldref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Fieldref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Fieldref_info_IndexToFieldref,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple3 CONSTANT_Fieldref_info_IndexToFieldref(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Float_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info$ CONSTANT_Float_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Float_info,MethodDescriptor((float): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Integer_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info$ CONSTANT_Integer_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Integer_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info$ CONSTANT_InterfaceMethodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Long_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info$ CONSTANT_Long_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Long_info,MethodDescriptor((long): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_MethodRef_info_IndexToMethodRef,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple3 CONSTANT_MethodRef_info_IndexToMethodRef(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Methodref_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info$ CONSTANT_Methodref_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Methodref_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info$ CONSTANT_NameAndType_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_NameAndType_info,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_NameAndType_info_IndexToNameAndFieldType,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndFieldType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_String_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info$ CONSTANT_String_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_String_info,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info,MethodDescriptor((): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info$ CONSTANT_Utf8_info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info_IndexToFieldDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.FieldDescriptor CONSTANT_Utf8_info_IndexToFieldDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info_IndexToMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.MethodDescriptor CONSTANT_Utf8_info_IndexToMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Utf8_info_IndexToString,MethodDescriptor((int, scala.RandomAccessSeq): java.lang.String),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.String CONSTANT_Utf8_info_IndexToString(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CONSTANT_Value_IndexToConstantValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ConstantValue CONSTANT_Value_IndexToConstantValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CharValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object CharValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ChopFrame,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ChopFrame,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ClassFile(int,int,int,int,int,scala.RandomAccessSeq,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ClassFile),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ClassFile ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassFile,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ClassValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Code,MethodDescriptor((byte[], java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Code(byte[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Instruction[] Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Code_attribute,MethodDescriptor((int, int, int, int, java.lang.Object, scala.RandomAccessSeq, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Code_attribute(int,int,int,int,java.lang.Object,scala.RandomAccessSeq,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ConstantValue_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ConstantValue_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Deprecated_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Deprecated_attribute(int,java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),DoubleValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object DoubleValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),DoubleVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.DoubleVariableInfo DoubleVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),DoubleVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object DoubleVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValuePair,MethodDescriptor((int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ElementValuePair(int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),EnclosingMethod_attribute,MethodDescriptor((int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object EnclosingMethod_attribute(int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),EnclosingMethod_attribute,MethodDescriptor((int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.EnclosingMethod_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.EnclosingMethod_attribute EnclosingMethod_attribute(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),EnumValue,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object EnumValue(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ExceptionTableEntry(int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Exceptions_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FieldDescriptorToFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldDescriptor): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.FieldType FieldDescriptorToFieldType(de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Field_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Field_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Field_Info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Field_Info Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FloatValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object FloatValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FloatVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.FloatVariableInfo FloatVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FloatVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object FloatVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),InnerClassesEntry,MethodDescriptor((int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object InnerClassesEntry(int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),InnerClassesEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClassesEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.InnerClassesEntry InnerClassesEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object InnerClasses_attribute(int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClasses_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.InnerClasses_attribute InnerClasses_attribute(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),IntValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object IntValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),IntegerVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.IntegerVariableInfo IntegerVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),IntegerVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object IntegerVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LineNumberTableEntry,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LineNumberTableEntry(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LineNumberTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LocalVariableTableEntry(int,int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LocalVariableTableEntry LocalVariableTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LocalVariableTable_attribute LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LocalVariableTypeTableEntry(int,int,int,int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry LocalVariableTypeTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LongValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LongValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LongVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.LongVariableInfo LongVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),LongVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object LongVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Method_Info,MethodDescriptor((int, int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Method_Info(int,int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Method_Info),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Method_Info Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),NullVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.NullVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.NullVariableInfo NullVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),NullVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object NullVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ObjectVariableInfo,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ObjectVariableInfo(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ObjectVariableInfo,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ObjectVariableInfo ObjectVariableInfo(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object RuntimeInvisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object RuntimeInvisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object RuntimeVisibleAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object RuntimeVisibleParameterAnnotations_attribute(int,int,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameFrame,MethodDescriptor((int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameFrame,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameFrameExtended,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameFrameExtended,MethodDescriptor((int, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameLocals1StackItemFrame,MethodDescriptor((int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrame(int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameLocals1StackItemFrame,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SameLocals1StackItemFrame(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrameExtended(int,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SameLocals1StackItemFrameExtended(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType,MethodDescriptor((scala.Seq, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Seq SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType(scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ShortValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object ShortValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Signature_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Signature_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Signature_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Signature_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Signature_attribute Signature_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SourceDebugExtension_attribute(int,int,java.lang.String,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute SourceDebugExtension_attribute(int,int,java.lang.String,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SourceFile_attribute,MethodDescriptor((int, int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object SourceFile_attribute(int,int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),StackMapFrame,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object StackMapFrame(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object StackMapTable_attribute(int,int,scala.RandomAccessSeq,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.StackMapTable_attribute StackMapTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),StringValue,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object StringValue(int,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Synthetic_attribute,MethodDescriptor((int, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Synthetic_attribute(int,java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),TopVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.TopVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.TopVariableInfo TopVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),TopVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object TopVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),UninitializedThisVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo UninitializedThisVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),UninitializedThisVariableInfo,MethodDescriptor((): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object UninitializedThisVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),UninitializedVariableInfo,MethodDescriptor((int): de.tud.cs.st.bat.resolved.UninitializedVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public de.tud.cs.st.bat.resolved.UninitializedVariableInfo UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),UninitializedVariableInfo,MethodDescriptor((int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): scala.runtime.Null$),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.runtime.Null$ Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq, int): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object Unknown_attribute(java.io.DataInputStream,scala.RandomAccessSeq,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),VerificationTypeInfo,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public java.lang.Object VerificationTypeInfo(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$AnnotationDefault_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.collection.immutable.Map de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq,MethodDescriptor((scala.collection.immutable.Map): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void de$tud$cs$st$bat$generic$reader$AttributesReader$$attributeReaders_$eq(scala.collection.immutable.Map) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Code_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$ConstantValue_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader,MethodDescriptor((): scala.Function1[]),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Function1[] de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq,MethodDescriptor((scala.Function1[]): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void de$tud$cs$st$bat$generic$reader$Constant_PoolReader$$reader_$eq(scala.Function1[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Deprecated_attributeReader$$deprecated_attribute_reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$EnclosingMethod_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Exceptions_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$InnerClasses_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LineNumberTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$LocalVariableTypeTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeInvisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$RuntimeVisibleParameterAnnotations_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Signature_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceDebugExtension_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$SourceFile_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$StackMapTable_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Tuple2 de$tud$cs$st$bat$generic$reader$Synthetic_attributeReader$$reader() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader,MethodDescriptor((): scala.Function2[]),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Function2[] de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader_$eq,MethodDescriptor((scala.Function2[]): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void de$tud$cs$st$bat$generic$reader$VerificationTypeInfoReader$$verification_type_info_reader_$eq(scala.Function2[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers,MethodDescriptor((): scala.Function4[]),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public scala.Function4[] de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers_$eq,MethodDescriptor((scala.Function4[]): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void de$tud$cs$st$bat$resolved$reader$BytecodeReaderAndBinding$$parsers_$eq(scala.Function4[]) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework$),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.resolved.reader.Java6Framework${ public void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),$tag,MethodDescriptor((): int),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Annotation,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Annotation),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Annotation Annotation(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Annotation,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object Annotation(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),AnnotationDefault_attribute,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.AnnotationDefault_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.AnnotationDefault_attribute AnnotationDefault_attribute(int,int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),AnnotationValue,MethodDescriptor((de.tud.cs.st.bat.resolved.Annotation, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue AnnotationValue(de.tud.cs.st.bat.resolved.Annotation,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Annotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq Annotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),AppendFrame,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame AppendFrame(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ArrayValue,MethodDescriptor((scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue ArrayValue(scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Attribute,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object Attribute(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Attributes,MethodDescriptor((java.io.DataInputStream, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Seq Attributes(java.io.DataInputStream,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),BooleanValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue BooleanValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ByteValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue ByteValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Class_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Class_info CONSTANT_Class_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Class_info_IndexToObjectType,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectType),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ObjectType CONSTANT_Class_info_IndexToObjectType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Double_info,MethodDescriptor((double): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Double_info CONSTANT_Double_info(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Fieldref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Fieldref_info CONSTANT_Fieldref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Fieldref_info_IndexToFieldref,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Tuple3 CONSTANT_Fieldref_info_IndexToFieldref(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Float_info,MethodDescriptor((float): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Float_info CONSTANT_Float_info(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Integer_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Integer_info CONSTANT_Integer_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_InterfaceMethodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_InterfaceMethodref_info CONSTANT_InterfaceMethodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Long_info,MethodDescriptor((long): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Long_info CONSTANT_Long_info(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_MethodRef_info_IndexToMethodRef,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple3),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Tuple3 CONSTANT_MethodRef_info_IndexToMethodRef(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Methodref_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Methodref_info CONSTANT_Methodref_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_NameAndType_info,MethodDescriptor((int, int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_NameAndType_info CONSTANT_NameAndType_info(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_NameAndType_info_IndexToNameAndFieldType,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndFieldType(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): scala.Tuple2),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Tuple2 CONSTANT_NameAndType_info_IndexToNameAndMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_String_info,MethodDescriptor((int): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_String_info CONSTANT_String_info(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Utf8_info,MethodDescriptor((java.lang.String): de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.native.reader.Constant_PoolBinding$CONSTANT_Utf8_info CONSTANT_Utf8_info(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Utf8_info_IndexToFieldDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.FieldDescriptor),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.FieldDescriptor CONSTANT_Utf8_info_IndexToFieldDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Utf8_info_IndexToMethodDescriptor,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.MethodDescriptor),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.MethodDescriptor CONSTANT_Utf8_info_IndexToMethodDescriptor(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Utf8_info_IndexToString,MethodDescriptor((int, scala.RandomAccessSeq): java.lang.String),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.String CONSTANT_Utf8_info_IndexToString(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CONSTANT_Value_IndexToConstantValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ConstantValue CONSTANT_Value_IndexToConstantValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),CharValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue CharValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ChopFrame,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame ChopFrame(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ClassFile,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ClassFile),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ClassFile ClassFile(int,int,int,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ClassFile,MethodDescriptor((java.io.DataInputStream): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object ClassFile(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ClassFile,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object ClassFile(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ClassValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue ClassValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Code,MethodDescriptor((byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Instruction[]),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Instruction[] Code(byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Code,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object Code(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Code_attribute,MethodDescriptor((int, int, int, int, de.tud.cs.st.bat.resolved.Instruction[], scala.RandomAccessSeq, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Code_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Code_attribute Code_attribute(int,int,int,int,de.tud.cs.st.bat.resolved.Instruction[],scala.RandomAccessSeq,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ConstantValue_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ConstantValue_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ConstantValue_attribute ConstantValue_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Constant_Pool,MethodDescriptor((java.io.DataInputStream): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq Constant_Pool(java.io.DataInputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Deprecated_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Deprecated_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Deprecated_attribute Deprecated_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),DoubleValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue DoubleValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),DoubleVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.DoubleVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.DoubleVariableInfo DoubleVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ElementValue,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object ElementValue(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ElementValuePair,MethodDescriptor((int, de.tud.cs.st.bat.resolved.ElementValue, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValuePair),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValuePair ElementValuePair(int,de.tud.cs.st.bat.resolved.ElementValue,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ElementValuePair,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object ElementValuePair(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ElementValuePairs,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq ElementValuePairs(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),EnclosingMethod_attribute,MethodDescriptor((int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.EnclosingMethod_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.EnclosingMethod_attribute EnclosingMethod_attribute(int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),EnumValue,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue EnumValue(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ExceptionTableEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ExceptionTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ExceptionTableEntry ExceptionTableEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Exceptions_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Exceptions_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Exceptions_attribute Exceptions_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),FieldDescriptorToFieldType,MethodDescriptor((de.tud.cs.st.bat.resolved.FieldDescriptor): de.tud.cs.st.bat.resolved.FieldType),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.FieldType FieldDescriptorToFieldType(de.tud.cs.st.bat.resolved.FieldDescriptor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Field_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Field_Info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Field_Info Field_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Fields,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq Fields(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),FloatValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue FloatValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),FloatVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.FloatVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.FloatVariableInfo FloatVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),FullFrame,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame FullFrame(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),InnerClassesEntry,MethodDescriptor((int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClassesEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.InnerClassesEntry InnerClassesEntry(int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),InnerClasses_attribute,MethodDescriptor((int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.InnerClasses_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.InnerClasses_attribute InnerClasses_attribute(int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),IntValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue IntValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),IntegerVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.IntegerVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.IntegerVariableInfo IntegerVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LineNumberTableEntry,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LineNumberTableEntry LineNumberTableEntry(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LineNumberTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LineNumberTable_attribute LineNumberTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LocalVariableTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LocalVariableTableEntry LocalVariableTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LocalVariableTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LocalVariableTable_attribute LocalVariableTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LocalVariableTypeTableEntry,MethodDescriptor((int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry LocalVariableTypeTableEntry(int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LocalVariableTypeTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute LocalVariableTypeTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LongValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue LongValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),LongVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.LongVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.LongVariableInfo LongVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Method_Info,MethodDescriptor((int, int, int, scala.Seq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Method_Info),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Method_Info Method_Info(int,int,int,scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Methods,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq Methods(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),NullVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.NullVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.NullVariableInfo NullVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ObjectVariableInfo,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ObjectVariableInfo ObjectVariableInfo(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ParameterAnnotations,MethodDescriptor((java.io.DataInputStream, java.lang.Object): scala.RandomAccessSeq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.RandomAccessSeq ParameterAnnotations(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),RuntimeInvisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleAnnotations_attribute RuntimeInvisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),RuntimeInvisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.RuntimeInvisibleParameterAnnotations_attribute RuntimeInvisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),RuntimeVisibleAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleAnnotations_attribute RuntimeVisibleAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),RuntimeVisibleParameterAnnotations_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.RuntimeVisibleParameterAnnotations_attribute RuntimeVisibleParameterAnnotations_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SameFrame,MethodDescriptor((int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameFrame(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SameFrameExtended,MethodDescriptor((int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameFrameExtended(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SameLocals1StackItemFrame,MethodDescriptor((int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrame(int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SameLocals1StackItemFrameExtended,MethodDescriptor((int, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrameExtended(int,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType,MethodDescriptor((scala.Seq, scala.RandomAccessSeq): scala.Seq),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.Seq SeqOfCONSTANT_Class_info_IndexToSeqOfObjectType(scala.Seq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),ShortValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue ShortValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Signature_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Signature_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Signature_attribute Signature_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SourceDebugExtension_attribute,MethodDescriptor((int, int, java.lang.String, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute SourceDebugExtension_attribute(int,int,java.lang.String,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),SourceFile_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.SourceFile_attribute SourceFile_attribute(int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),StackMapFrame,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object StackMapFrame(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),StackMapTable_attribute,MethodDescriptor((int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapTable_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.StackMapTable_attribute StackMapTable_attribute(int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),StringValue,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ElementValue),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.ElementValue StringValue(int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Synthetic_attribute,MethodDescriptor((int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.Synthetic_attribute Synthetic_attribute(int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),TopVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.TopVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.TopVariableInfo TopVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),UninitializedThisVariableInfo,MethodDescriptor((): de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo UninitializedThisVariableInfo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),UninitializedVariableInfo,MethodDescriptor((int): de.tud.cs.st.bat.resolved.UninitializedVariableInfo),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static de.tud.cs.st.bat.resolved.UninitializedVariableInfo UninitializedVariableInfo(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),Unknown_attribute,MethodDescriptor((java.io.DataInputStream, java.lang.Object, int): scala.runtime.Null$),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static scala.runtime.Null$ Unknown_attribute(java.io.DataInputStream,java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),VerificationTypeInfo,MethodDescriptor((java.io.DataInputStream, java.lang.Object): java.lang.Object),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static java.lang.Object VerificationTypeInfo(java.io.DataInputStream,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Java6Framework),register,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.bat.resolved.reader.Java6Framework{ public static void register(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LineNumberTable_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LineNumberTable_attributeBinding$class),LineNumberTableEntry,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTableEntry),de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LineNumberTableEntry LineNumberTableEntry(de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LineNumberTable_attributeBinding$class),LineNumberTable_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LineNumberTable_attribute),de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LineNumberTable_attribute LineNumberTable_attribute(de.tud.cs.st.bat.resolved.reader.LineNumberTable_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTable_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTable_attributeBinding$class),LocalVariableTableEntry,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding, int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTableEntry),de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LocalVariableTableEntry LocalVariableTableEntry(de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding,int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTable_attributeBinding$class),LocalVariableTable_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTable_attribute),de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LocalVariableTable_attribute LocalVariableTable_attribute(de.tud.cs.st.bat.resolved.reader.LocalVariableTable_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTypeTable_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTypeTable_attributeBinding$class),LocalVariableTypeTableEntry,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding, int, int, int, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry),de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LocalVariableTypeTableEntry LocalVariableTypeTableEntry(de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding,int,int,int,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/LocalVariableTypeTable_attributeBinding$class),LocalVariableTypeTable_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute),de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LocalVariableTypeTable_attribute LocalVariableTypeTable_attribute(de.tud.cs.st.bat.resolved.reader.LocalVariableTypeTable_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Signature_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Signature_attributeBinding$class),Signature_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Signature_attribute),de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Signature_attribute Signature_attribute(de.tud.cs.st.bat.resolved.reader.Signature_attributeBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/SourceDebugExtension_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/SourceDebugExtension_attributeBinding$class),SourceDebugExtension_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding, int, int, java.lang.String, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute),de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.SourceDebugExtension_attribute SourceDebugExtension_attribute(de.tud.cs.st.bat.resolved.reader.SourceDebugExtension_attributeBinding,int,int,java.lang.String,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/SourceFile_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/SourceFile_attributeBinding$class),SourceFile_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.SourceFile_attribute),de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.SourceFile_attribute SourceFile_attribute(de.tud.cs.st.bat.resolved.reader.SourceFile_attributeBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),AppendFrame,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame AppendFrame(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),ChopFrame,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame ChopFrame(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),DoubleVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.DoubleVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.DoubleVariableInfo DoubleVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),FloatVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.FloatVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.FloatVariableInfo FloatVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),FullFrame,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame FullFrame(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),IntegerVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.IntegerVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.IntegerVariableInfo IntegerVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),LongVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.LongVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.LongVariableInfo LongVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),NullVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.NullVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.NullVariableInfo NullVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),ObjectVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.ObjectVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.ObjectVariableInfo ObjectVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),SameFrame,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameFrame(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),SameFrameExtended,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameFrameExtended(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),SameLocals1StackItemFrame,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrame(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),SameLocals1StackItemFrameExtended,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int, de.tud.cs.st.bat.resolved.VerificationTypeInfo): de.tud.cs.st.bat.resolved.StackMapFrame),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapFrame SameLocals1StackItemFrameExtended(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int,de.tud.cs.st.bat.resolved.VerificationTypeInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),StackMapTable_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int, int, scala.RandomAccessSeq, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.StackMapTable_attribute),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.StackMapTable_attribute StackMapTable_attribute(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int,int,scala.RandomAccessSeq,scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),TopVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.TopVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.TopVariableInfo TopVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),UninitializedThisVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding): de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.UninitializedThisVariableInfo UninitializedThisVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/StackMapTable_attributeBinding$class),UninitializedVariableInfo,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding, int): de.tud.cs.st.bat.resolved.UninitializedVariableInfo),de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.UninitializedVariableInfo UninitializedVariableInfo(de.tud.cs.st.bat.resolved.reader.StackMapTable_attributeBinding,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Synthetic_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Synthetic_attributeBinding$class),Synthetic_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding, int, scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Synthetic_attribute),de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Synthetic_attribute Synthetic_attribute(de.tud.cs.st.bat.resolved.reader.Synthetic_attributeBinding,int,scala.RandomAccessSeq) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Unknown_attributeBinding$class),$init$,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding): void),de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding$class{ public static void $init$(de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/bat/resolved/reader/Unknown_attributeBinding$class),Unknown_attribute,MethodDescriptor((de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding, int, byte[], scala.RandomAccessSeq): de.tud.cs.st.bat.resolved.Unknown_attribute),de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding$class{ public static de.tud.cs.st.bat.resolved.Unknown_attribute Unknown_attribute(de.tud.cs.st.bat.resolved.reader.Unknown_attributeBinding,int,byte[],scala.RandomAccessSeq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/ISOProlog$),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.ISOProlog${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/ISOProlog$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.prolog.ISOProlog${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/ISOProlog$),<init>,MethodDescriptor((): void),de.tud.cs.st.prolog.ISOProlog${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/ISOProlog$),escapeString,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.prolog.ISOProlog${ public java.lang.String escapeString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),apply,MethodDescriptor((java.io.InputStream): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public java.lang.String apply(java.io.InputStream) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$getPrologRepresentation$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),<init>,MethodDescriptor((): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),apply,MethodDescriptor((java.lang.String): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public void apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$main$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$main$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),<init>,MethodDescriptor((java.lang.String, scala.StringBuilder): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public void <init>(java.lang.String,scala.StringBuilder) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),apply,MethodDescriptor((scala.Tuple2): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public void apply(scala.Tuple2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$properties2PrologFacts$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1),apply,MethodDescriptor((): java.io.FileInputStream),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1{ public java.io.FileInputStream apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts$$anonfun$propertyFile2PrologFacts$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),<init>,MethodDescriptor((): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),getPrologRepresentation,MethodDescriptor((java.lang.String, scala.Function0): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public java.lang.String getPrologRepresentation(java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),properties2PrologFacts,MethodDescriptor((java.lang.String, java.util.Map): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public java.lang.String properties2PrologFacts(java.lang.String,java.util.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),propertyFile2PrologFacts,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public java.lang.String propertyFile2PrologFacts(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts$),supportedFileTypes,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.prolog.PropertyFile2PrologFacts${ public scala.collection.immutable.Set supportedFileTypes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),$tag,MethodDescriptor((): int),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),getPrologRepresentation,MethodDescriptor((java.lang.String, scala.Function0): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static java.lang.String getPrologRepresentation(java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),properties2PrologFacts,MethodDescriptor((java.lang.String, java.util.Map): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static java.lang.String properties2PrologFacts(java.lang.String,java.util.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),propertyFile2PrologFacts,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static java.lang.String propertyFile2PrologFacts(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/prolog/PropertyFile2PrologFacts),supportedFileTypes,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.prolog.PropertyFile2PrologFacts{ public static scala.collection.immutable.Set supportedFileTypes() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.AnyAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.AnyAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.AnyAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.AnyAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.AnyAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),category,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.AnyAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.AnyAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.AnyAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.AnyAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.AnyAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.AnyAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.AnyAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.AnyAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/AnyAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.AnyAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Atom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.Atom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Atom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),FLOAT_ATOM,MethodDescriptor((): int),de.tud.cs.st.sae.Atom${ public int FLOAT_ATOM() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),INTEGER_ATOM,MethodDescriptor((): int),de.tud.cs.st.sae.Atom${ public int INTEGER_ATOM() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),KEY_ATOM,MethodDescriptor((): int),de.tud.cs.st.sae.Atom${ public int KEY_ATOM() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$),TEXT_ATOM,MethodDescriptor((): int),de.tud.cs.st.sae.Atom${ public int TEXT_ATOM() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$class),$init$,MethodDescriptor((de.tud.cs.st.sae.Atom): void),de.tud.cs.st.sae.Atom$class{ public static void $init$(de.tud.cs.st.sae.Atom) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$class),apply,MethodDescriptor((de.tud.cs.st.sae.Atom, int): scala.runtime.Nothing$),de.tud.cs.st.sae.Atom$class{ public static scala.runtime.Nothing$ apply(de.tud.cs.st.sae.Atom,int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$class),arity,MethodDescriptor((de.tud.cs.st.sae.Atom): int),de.tud.cs.st.sae.Atom$class{ public static int arity(de.tud.cs.st.sae.Atom) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Atom$class),toISOProlog,MethodDescriptor((de.tud.cs.st.sae.Atom): java.lang.String),de.tud.cs.st.sae.Atom$class{ public static java.lang.String toISOProlog(de.tud.cs.st.sae.Atom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo$$anonfun$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),apply,MethodDescriptor((de.tud.cs.st.prolog.ISOProlog): void),de.tud.cs.st.sae.Demo$$anonfun$1{ public void apply(de.tud.cs.st.prolog.ISOProlog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Demo$$anonfun$2): void),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public void <init>(de.tud.cs.st.sae.Demo$$anonfun$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.sae.Term): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public java.lang.String apply(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$2$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo$$anonfun$2{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),apply,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.Demo$$anonfun$2{ public void apply(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo$$anonfun$3{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.Demo$$anonfun$3{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo$$anonfun$4{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$4{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),apply,MethodDescriptor((de.tud.cs.st.sae.Rule): void),de.tud.cs.st.sae.Demo$$anonfun$4{ public void apply(de.tud.cs.st.sae.Rule) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$4{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$4{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo$$anonfun$5{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$5{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),apply,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.Demo$$anonfun$5{ public void apply(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Demo$$anonfun$5{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Demo$$anonfun$5{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Demo$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.Demo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),e,MethodDescriptor((): de.tud.cs.st.sae.NaiveEngine),de.tud.cs.st.sae.Demo${ public de.tud.cs.st.sae.NaiveEngine e() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),executionStart,MethodDescriptor((): long),de.tud.cs.st.sae.Demo${ public long executionStart() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),executionStart_$eq,MethodDescriptor((long): void),de.tud.cs.st.sae.Demo${ public void executionStart_$eq(long) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),isoPrint,MethodDescriptor((): scala.Function1),de.tud.cs.st.sae.Demo${ public scala.Function1 isoPrint() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.sae.Demo${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo$),program,MethodDescriptor((): de.tud.cs.st.sae.parser.Program),de.tud.cs.st.sae.Demo${ public de.tud.cs.st.sae.parser.Program program() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Demo{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),e,MethodDescriptor((): de.tud.cs.st.sae.NaiveEngine),de.tud.cs.st.sae.Demo{ public static de.tud.cs.st.sae.NaiveEngine e() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),executionStart,MethodDescriptor((): long),de.tud.cs.st.sae.Demo{ public static long executionStart() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),isoPrint,MethodDescriptor((): scala.Function1),de.tud.cs.st.sae.Demo{ public static scala.Function1 isoPrint() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.sae.Demo{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Demo),program,MethodDescriptor((): de.tud.cs.st.sae.parser.Program),de.tud.cs.st.sae.Demo{ public static de.tud.cs.st.sae.parser.Program program() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Engine): void),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public void <init>(de.tud.cs.st.sae.Engine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addFacts$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Engine$$anonfun$addFacts$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Engine): void),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public void <init>(de.tud.cs.st.sae.Engine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),apply,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public void apply(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addQueries$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Engine$$anonfun$addQueries$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Engine): void),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public void <init>(de.tud.cs.st.sae.Engine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),apply,MethodDescriptor((de.tud.cs.st.sae.Rule): void),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public void apply(de.tud.cs.st.sae.Rule) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$$anonfun$addRules$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Engine$$anonfun$addRules$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$class),$init$,MethodDescriptor((de.tud.cs.st.sae.Engine): void),de.tud.cs.st.sae.Engine$class{ public static void $init$(de.tud.cs.st.sae.Engine) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$class),addFacts,MethodDescriptor((de.tud.cs.st.sae.Engine, scala.Seq): void),de.tud.cs.st.sae.Engine$class{ public static void addFacts(de.tud.cs.st.sae.Engine,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$class),addQueries,MethodDescriptor((de.tud.cs.st.sae.Engine, scala.Seq): void),de.tud.cs.st.sae.Engine$class{ public static void addQueries(de.tud.cs.st.sae.Engine,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Engine$class),addRules,MethodDescriptor((de.tud.cs.st.sae.Engine, scala.Seq): void),de.tud.cs.st.sae.Engine$class{ public static void addRules(de.tud.cs.st.sae.Engine,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/EnumeratedAtom$class),$init$,MethodDescriptor((de.tud.cs.st.sae.EnumeratedAtom): void),de.tud.cs.st.sae.EnumeratedAtom$class{ public static void $init$(de.tud.cs.st.sae.EnumeratedAtom) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/EnumeratedAtom$class),category,MethodDescriptor((de.tud.cs.st.sae.EnumeratedAtom): int),de.tud.cs.st.sae.EnumeratedAtom$class{ public static int category(de.tud.cs.st.sae.EnumeratedAtom) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/EnumeratedAtom$class),toISOProlog,MethodDescriptor((de.tud.cs.st.sae.EnumeratedAtom): java.lang.String),de.tud.cs.st.sae.EnumeratedAtom$class{ public static java.lang.String toISOProlog(de.tud.cs.st.sae.EnumeratedAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Fact$class),$init$,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.Fact$class{ public static void $init$(de.tud.cs.st.sae.Fact) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Fact$class),toISOProlog,MethodDescriptor((de.tud.cs.st.sae.Fact): java.lang.String),de.tud.cs.st.sae.Fact$class{ public static java.lang.String toISOProlog(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.FloatAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.FloatAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.FloatAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),apply,MethodDescriptor((double): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.sae.FloatAtom${ public de.tud.cs.st.sae.FloatAtom apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),minusOneAtom,MethodDescriptor((): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.sae.FloatAtom${ private de.tud.cs.st.sae.FloatAtom minusOneAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),oneAtom,MethodDescriptor((): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.sae.FloatAtom${ private de.tud.cs.st.sae.FloatAtom oneAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom$),zeroAtom,MethodDescriptor((): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.sae.FloatAtom${ private de.tud.cs.st.sae.FloatAtom zeroAtom() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.FloatAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),<init>,MethodDescriptor((double): void),de.tud.cs.st.sae.FloatAtom{ public void <init>(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.FloatAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.FloatAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.FloatAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.FloatAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.FloatAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),functor,MethodDescriptor((): double),de.tud.cs.st.sae.FloatAtom{ public double functor() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.FloatAtom{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.FloatAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/FloatAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.FloatAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerm$class),$init$,MethodDescriptor((de.tud.cs.st.sae.GroundTerm): void),de.tud.cs.st.sae.GroundTerm$class{ public static void $init$(de.tud.cs.st.sae.GroundTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerm$class),isGround,MethodDescriptor((de.tud.cs.st.sae.GroundTerm): boolean),de.tud.cs.st.sae.GroundTerm$class{ public static boolean isGround(de.tud.cs.st.sae.GroundTerm) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),<init>,MethodDescriptor((scala.runtime.BoxedArray): void),de.tud.cs.st.sae.GroundTerms$$anon$1{ public void <init>(scala.runtime.BoxedArray) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),arity,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTerms{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),index,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),size,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms$$anon$1{ public int size() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),terms,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.GroundTerms$$anon$1{ public de.tud.cs.st.sae.GroundTerm terms(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),toCompoundTermForm,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toCompoundTermForm() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anon$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),<init>,MethodDescriptor((scala.Function1, scala.runtime.BoxedArray, scala.runtime.IntRef): void),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public void <init>(scala.Function1,scala.runtime.BoxedArray,scala.runtime.IntRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),apply,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public void apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$$anonfun$seqToTerms$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms$$anonfun$seqToTerms$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTerms${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTerms${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),apply,MethodDescriptor((scala.runtime.BoxedArray): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.sae.GroundTerms${ public de.tud.cs.st.sae.GroundTerms apply(scala.runtime.BoxedArray) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),randomAccessSeqToTerms,MethodDescriptor((scala.RandomAccessSeq, scala.Function1): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.sae.GroundTerms${ public de.tud.cs.st.sae.GroundTerms randomAccessSeqToTerms(scala.RandomAccessSeq,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms$),seqToTerms,MethodDescriptor((scala.Seq, scala.Function1): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.sae.GroundTerms${ public de.tud.cs.st.sae.GroundTerms seqToTerms(scala.Seq,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTerms{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),arity,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTerms{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),index,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),toCompoundTermForm,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toCompoundTermForm() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTerms),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTermsTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.sae.GroundTermsTest): void),de.tud.cs.st.sae.GroundTermsTest$$anonfun$1{ public void <init>(de.tud.cs.st.sae.GroundTermsTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTermsTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTermsTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.sae.GroundTermsTest): void),de.tud.cs.st.sae.GroundTermsTest$$anonfun$2{ public void <init>(de.tud.cs.st.sae.GroundTermsTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTermsTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTermsTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTermsTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.sae.GroundTermsTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.sae.GroundTermsTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),execute,MethodDescriptor((): void),de.tud.cs.st.sae.GroundTermsTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.GroundTermsTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.GroundTermsTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.sae.GroundTermsTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.sae.GroundTermsTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.sae.GroundTermsTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.GroundTermsTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.GroundTermsTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.sae.GroundTermsTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.GroundTermsTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.sae.GroundTermsTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.sae.GroundTermsTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.GroundTermsTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.GroundTermsTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.sae.GroundTermsTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.sae.GroundTermsTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTermsTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.GroundTermsTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.sae.GroundTermsTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/GroundTermsTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.sae.GroundTermsTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),apply,MethodDescriptor((int): void),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public void apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtom$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),COUNT,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom${ private int COUNT() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),MAX,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom${ private int MAX() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),MIN,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom${ private int MIN() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),apply,MethodDescriptor((long): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.sae.IntegerAtom${ public de.tud.cs.st.sae.IntegerAtom apply(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),de$tud$cs$st$sae$IntegerAtom$$OFFSET,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom${ public int de$tud$cs$st$sae$IntegerAtom$$OFFSET() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom$),de$tud$cs$st$sae$IntegerAtom$$atoms,MethodDescriptor((): de.tud.cs.st.sae.IntegerAtom[]),de.tud.cs.st.sae.IntegerAtom${ public de.tud.cs.st.sae.IntegerAtom[] de$tud$cs$st$sae$IntegerAtom$$atoms() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),<init>,MethodDescriptor((long): void),de.tud.cs.st.sae.IntegerAtom{ public void <init>(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.IntegerAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.IntegerAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.IntegerAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.IntegerAtom{ public boolean equals(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.IntegerAtom{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),functor,MethodDescriptor((): long),de.tud.cs.st.sae.IntegerAtom{ public long functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtom{ public int hashCode() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.IntegerAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtom),value,MethodDescriptor((): long),de.tud.cs.st.sae.IntegerAtom{ public long value() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtomTest): void),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$1{ public void <init>(de.tud.cs.st.sae.IntegerAtomTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.sae.IntegerAtomTest): void),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$2{ public void <init>(de.tud.cs.st.sae.IntegerAtomTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.IntegerAtomTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtomTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.sae.IntegerAtomTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.sae.IntegerAtomTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),execute,MethodDescriptor((): void),de.tud.cs.st.sae.IntegerAtomTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.IntegerAtomTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.IntegerAtomTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.sae.IntegerAtomTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.sae.IntegerAtomTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.sae.IntegerAtomTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.IntegerAtomTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.IntegerAtomTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.sae.IntegerAtomTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.IntegerAtomTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.sae.IntegerAtomTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.sae.IntegerAtomTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.IntegerAtomTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.IntegerAtomTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.sae.IntegerAtomTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.sae.IntegerAtomTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.IntegerAtomTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.IntegerAtomTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.sae.IntegerAtomTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/IntegerAtomTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.sae.IntegerAtomTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$$anonfun$getKeyValue$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.KeyAtom$$anonfun$getKeyValue$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$$anonfun$getKeyValue$1),<init>,MethodDescriptor((de.tud.cs.st.sae.KeyAtom): void),de.tud.cs.st.sae.KeyAtom$$anonfun$getKeyValue$1{ public void <init>(de.tud.cs.st.sae.KeyAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$$anonfun$getKeyValue$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.KeyAtom$$anonfun$getKeyValue$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$$anonfun$getKeyValue$1),apply,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.KeyAtom$$anonfun$getKeyValue$1{ public java.lang.String apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$$anonfun$getKeyValue$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.KeyAtom$$anonfun$getKeyValue$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.KeyAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.KeyAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.KeyAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),de$tud$cs$st$sae$KeyAtom$$id,MethodDescriptor((): int),de.tud.cs.st.sae.KeyAtom${ public int de$tud$cs$st$sae$KeyAtom$$id() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),de$tud$cs$st$sae$KeyAtom$$id_$eq,MethodDescriptor((int): void),de.tud.cs.st.sae.KeyAtom${ public void de$tud$cs$st$sae$KeyAtom$$id_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),getKeyValue,MethodDescriptor((de.tud.cs.st.sae.KeyAtom): java.lang.String),de.tud.cs.st.sae.KeyAtom${ public java.lang.String getKeyValue(de.tud.cs.st.sae.KeyAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$),map,MethodDescriptor((): scala.collection.jcl.WeakHashMap),de.tud.cs.st.sae.KeyAtom${ private scala.collection.jcl.WeakHashMap map() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$class),$init$,MethodDescriptor((de.tud.cs.st.sae.KeyAtom): void),de.tud.cs.st.sae.KeyAtom$class{ public static void $init$(de.tud.cs.st.sae.KeyAtom) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$class),category,MethodDescriptor((de.tud.cs.st.sae.KeyAtom): int),de.tud.cs.st.sae.KeyAtom$class{ public static int category(de.tud.cs.st.sae.KeyAtom) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/KeyAtom$class),toISOProlog,MethodDescriptor((de.tud.cs.st.sae.KeyAtom): java.lang.String),de.tud.cs.st.sae.KeyAtom$class{ public static java.lang.String toISOProlog(de.tud.cs.st.sae.KeyAtom) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$1{ public java.lang.Object apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$1),apply,MethodDescriptor((): scala.Nil$),de.tud.cs.st.sae.NaiveEngine$$anonfun$1{ public scala.Nil$ apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$2{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$2{ public java.lang.Object apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$2),apply,MethodDescriptor((): scala.Nil$),de.tud.cs.st.sae.NaiveEngine$$anonfun$2{ public scala.Nil$ apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$3{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$3{ public java.lang.Object apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$3),apply,MethodDescriptor((): scala.List),de.tud.cs.st.sae.NaiveEngine$$anonfun$3{ public scala.List apply() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),apply,MethodDescriptor((de.tud.cs.st.sae.Query): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public void apply(de.tud.cs.st.sae.Query) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public java.lang.Object apply(java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$analyze$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$analyze$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine, de.tud.cs.st.sae.Query, scala.collection.mutable.Stack): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine,de.tud.cs.st.sae.Query,scala.collection.mutable.Stack) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),apply,MethodDescriptor((int): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public void apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$evaluate$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),apply,MethodDescriptor((int): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public void apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$indent$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.sae.Variable): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public void apply(de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2, scala.collection.mutable.Set, scala.runtime.ObjectRef): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2,scala.collection.mutable.Set,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),apply,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public void apply(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2, scala.runtime.ObjectRef): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),apply,MethodDescriptor((de.tud.cs.st.sae.Variable): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public java.lang.String apply(de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2, scala.runtime.ObjectRef): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),apply,MethodDescriptor((de.tud.cs.st.sae.Variable): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public void apply(de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),apply,MethodDescriptor((de.tud.cs.st.sae.Variable): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public void apply(de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public void <init>(de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),apply,MethodDescriptor((de.tud.cs.st.sae.Variable): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public void apply(de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2$$anonfun$apply$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine, de.tud.cs.st.sae.Query, scala.collection.mutable.Stack, de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public void <init>(de.tud.cs.st.sae.NaiveEngine,de.tud.cs.st.sae.Query,scala.collection.mutable.Stack,de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),de$tud$cs$st$sae$NaiveEngine$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.NaiveEngine),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public de.tud.cs.st.sae.NaiveEngine de$tud$cs$st$sae$NaiveEngine$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$de$tud$cs$st$sae$NaiveEngine$$solve$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),<init>,MethodDescriptor((de.tud.cs.st.sae.NaiveEngine): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public void <init>(de.tud.cs.st.sae.NaiveEngine) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),apply,MethodDescriptor((de.tud.cs.st.sae.Query): void),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public void apply(de.tud.cs.st.sae.Query) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine$$anonfun$evaluate$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NaiveEngine$$anonfun$evaluate$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.NaiveEngine{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),addFact,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.NaiveEngine{ public void addFact(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),addFacts,MethodDescriptor((scala.Seq): void),de.tud.cs.st.sae.NaiveEngine{ public void addFacts(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),addQueries,MethodDescriptor((scala.Seq): void),de.tud.cs.st.sae.NaiveEngine{ public void addQueries(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),addRules,MethodDescriptor((scala.Seq): void),de.tud.cs.st.sae.NaiveEngine{ public void addRules(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),analyze,MethodDescriptor((): void),de.tud.cs.st.sae.NaiveEngine{ private void analyze() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),bindIfUnbound,MethodDescriptor((de.tud.cs.st.sae.Variable, de.tud.cs.st.sae.Term): boolean),de.tud.cs.st.sae.NaiveEngine{ private boolean bindIfUnbound(de.tud.cs.st.sae.Variable,de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),containsVariable,MethodDescriptor((de.tud.cs.st.sae.Term, de.tud.cs.st.sae.Variable): boolean),de.tud.cs.st.sae.NaiveEngine{ private boolean containsVariable(de.tud.cs.st.sae.Term,de.tud.cs.st.sae.Variable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),de$tud$cs$st$sae$NaiveEngine$$analyze,MethodDescriptor((de.tud.cs.st.sae.Query): void),de.tud.cs.st.sae.NaiveEngine{ public void de$tud$cs$st$sae$NaiveEngine$$analyze(de.tud.cs.st.sae.Query) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),de$tud$cs$st$sae$NaiveEngine$$evaluate,MethodDescriptor((de.tud.cs.st.sae.Query): void),de.tud.cs.st.sae.NaiveEngine{ public void de$tud$cs$st$sae$NaiveEngine$$evaluate(de.tud.cs.st.sae.Query) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),de$tud$cs$st$sae$NaiveEngine$$indent,MethodDescriptor((): void),de.tud.cs.st.sae.NaiveEngine{ public void de$tud$cs$st$sae$NaiveEngine$$indent() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),de$tud$cs$st$sae$NaiveEngine$$solve,MethodDescriptor((de.tud.cs.st.sae.Query, scala.collection.mutable.Stack): boolean),de.tud.cs.st.sae.NaiveEngine{ public boolean de$tud$cs$st$sae$NaiveEngine$$solve(de.tud.cs.st.sae.Query,scala.collection.mutable.Stack) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),de$tud$cs$st$sae$NaiveEngine$$unify,MethodDescriptor((de.tud.cs.st.sae.Term, de.tud.cs.st.sae.Term): scala.Tuple2),de.tud.cs.st.sae.NaiveEngine{ public scala.Tuple2 de$tud$cs$st$sae$NaiveEngine$$unify(de.tud.cs.st.sae.Term,de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),evaluate,MethodDescriptor((): void),de.tud.cs.st.sae.NaiveEngine{ public void evaluate() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),getSignature,MethodDescriptor((de.tud.cs.st.sae.Term): scala.Tuple2),de.tud.cs.st.sae.NaiveEngine{ public scala.Tuple2 getSignature(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),indentation,MethodDescriptor((): int),de.tud.cs.st.sae.NaiveEngine{ private int indentation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),indentation_$eq,MethodDescriptor((int): void),de.tud.cs.st.sae.NaiveEngine{ private void indentation_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),knowledgeBase,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.sae.NaiveEngine{ private scala.collection.mutable.Map knowledgeBase() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),knownRules,MethodDescriptor((): scala.collection.mutable.Map),de.tud.cs.st.sae.NaiveEngine{ private scala.collection.mutable.Map knownRules() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),printBindingRecursively,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.NaiveEngine{ private void printBindingRecursively(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),queries,MethodDescriptor((): scala.List),de.tud.cs.st.sae.NaiveEngine{ private scala.List queries() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),queries_$eq,MethodDescriptor((scala.List): void),de.tud.cs.st.sae.NaiveEngine{ private void queries_$eq(scala.List) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),registerQuery,MethodDescriptor((de.tud.cs.st.sae.Term[]): de.tud.cs.st.sae.Query),de.tud.cs.st.sae.NaiveEngine{ public de.tud.cs.st.sae.Query registerQuery(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),registerRule,MethodDescriptor((de.tud.cs.st.sae.Rule): void),de.tud.cs.st.sae.NaiveEngine{ public void registerRule(de.tud.cs.st.sae.Rule) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NaiveEngine),unbindRecursively,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.NaiveEngine{ private void unbindRecursively(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.NoAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.NoAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.NoAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.NoAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.NoAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),category,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.NoAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.NoAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.NoAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.NoAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.NoAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.NoneAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.NoneAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.NoneAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.NoneAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.NoneAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),category,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.NoneAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoneAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.NoneAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoneAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.NoneAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.NoneAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoneAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.NoneAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/NoneAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.NoneAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Query, scala.runtime.ObjectRef): void),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public void <init>(de.tud.cs.st.sae.Query,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),apply,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public void apply(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query$$anonfun$toISOProlog$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Query$$anonfun$toISOProlog$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Query{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),<init>,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.Query{ public void <init>(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),goals,MethodDescriptor((): de.tud.cs.st.sae.Term[]),de.tud.cs.st.sae.Query{ public de.tud.cs.st.sae.Term[] goals() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),prepareFullBuild,MethodDescriptor((): void),de.tud.cs.st.sae.Query{ public void prepareFullBuild() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),prepareIncrementalBuild,MethodDescriptor((): void),de.tud.cs.st.sae.Query{ public void prepareIncrementalBuild() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Query{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Query),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Query{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),<init>,MethodDescriptor((de.tud.cs.st.sae.Rule, scala.runtime.ObjectRef): void),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public void <init>(de.tud.cs.st.sae.Rule,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),apply,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public void apply(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule$$anonfun$toISOProlog$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Rule$$anonfun$toISOProlog$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Rule{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule),<init>,MethodDescriptor((de.tud.cs.st.sae.Term, scala.Seq): void),de.tud.cs.st.sae.Rule{ public void <init>(de.tud.cs.st.sae.Term,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule),body,MethodDescriptor((): scala.Seq),de.tud.cs.st.sae.Rule{ public scala.Seq body() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule),head,MethodDescriptor((): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.Rule{ public de.tud.cs.st.sae.Term head() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Rule),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Rule{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.StringAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.StringAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.StringAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom$),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.sae.StringAtom${ public de.tud.cs.st.sae.StringAtom apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom$),cache,MethodDescriptor((): java.util.HashMap),de.tud.cs.st.sae.StringAtom${ private java.util.HashMap cache() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.StringAtom{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.StringAtom{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.StringAtom{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.StringAtom{ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.StringAtom{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.StringAtom{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.StringAtom{ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.StringAtom{ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.StringAtom{ public java.lang.Object functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.StringAtom{ public java.lang.String functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.StringAtom{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.StringAtom{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/StringAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.StringAtom{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Term$class),$init$,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.Term$class{ public static void $init$(de.tud.cs.st.sae.Term) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Term$class),toISOProlog,MethodDescriptor((de.tud.cs.st.sae.Term): java.lang.String),de.tud.cs.st.sae.Term$class{ public static java.lang.String toISOProlog(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/TruthValueAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.TruthValueAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/TruthValueAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.TruthValueAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/TruthValueAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.TruthValueAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/TruthValueAtom$),apply,MethodDescriptor((boolean): de.tud.cs.st.sae.TruthValueAtom),de.tud.cs.st.sae.TruthValueAtom${ public de.tud.cs.st.sae.TruthValueAtom apply(boolean) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.Variable{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),<init>,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.Variable{ public void <init>(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.Variable{ public de.tud.cs.st.sae.Term apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.Variable{ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),arity,MethodDescriptor((): int),de.tud.cs.st.sae.Variable{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),binding,MethodDescriptor((): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.Variable{ public de.tud.cs.st.sae.Term binding() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),binding_$eq,MethodDescriptor((de.tud.cs.st.sae.Term): void),de.tud.cs.st.sae.Variable{ public void binding_$eq(de.tud.cs.st.sae.Term) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.Variable{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),functor,MethodDescriptor((): de.tud.cs.st.sae.Variable),de.tud.cs.st.sae.Variable{ public de.tud.cs.st.sae.Variable functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.Variable{ public java.lang.Object functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.Variable{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),name,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Variable{ public java.lang.String name() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Variable{ public java.lang.String toISOProlog() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.Variable{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/Variable),traverseInPostorder,MethodDescriptor((scala.Function1): void),de.tud.cs.st.sae.Variable{ public void traverseInPostorder(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.YesAtom${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.YesAtom${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.YesAtom${ public de.tud.cs.st.sae.GroundTerm apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.YesAtom${ public de.tud.cs.st.sae.Term apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.YesAtom${ public scala.runtime.Nothing$ apply(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),arity,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom${ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),category,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom${ public int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.YesAtom${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.YesAtom${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.YesAtom${ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.YesAtom${ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),apply,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.YesAtom{ public static scala.runtime.Nothing$ apply(int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),arity,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),category,MethodDescriptor((): int),de.tud.cs.st.sae.YesAtom{ public static int category() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.YesAtom{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.YesAtom{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/YesAtom),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.YesAtom{ public static java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),<init>,MethodDescriptor((int, de.tud.cs.st.sae.GroundTerms): void),de.tud.cs.st.sae.cons{ public void <init>(int,de.tud.cs.st.sae.GroundTerms) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),arity,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.cons{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.GroundTerms{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.cons{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),index,MethodDescriptor((): int),de.tud.cs.st.sae.cons{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),size,MethodDescriptor((): int),de.tud.cs.st.sae.cons{ public int size() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),terms,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.cons{ public de.tud.cs.st.sae.GroundTerm terms(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),toCompoundTermForm,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toCompoundTermForm() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/cons),ts,MethodDescriptor((): de.tud.cs.st.sae.GroundTerms),de.tud.cs.st.sae.cons{ public de.tud.cs.st.sae.GroundTerms ts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.nil${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.nil${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.GroundTerms{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),arity,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int arity() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.nil${ public boolean equals(java.lang.Object) }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.nil${ public java.lang.Object functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.nil${ public java.lang.String functor() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),hashCode,MethodDescriptor((): int),de.tud.cs.st.sae.nil${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),index,MethodDescriptor((): int),de.tud.cs.st.sae.GroundTerms{ public int index() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.GroundTerms{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),size,MethodDescriptor((): int),de.tud.cs.st.sae.nil${ public int size() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),terms,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.nil${ public de.tud.cs.st.sae.GroundTerm terms(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),terms,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.nil${ public scala.runtime.Nothing$ terms(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),toCompoundTermForm,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toCompoundTermForm() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.nil${ public java.lang.String toISOProlog() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.GroundTerms{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.nil{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.nil{ public static de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),arity,MethodDescriptor((): int),de.tud.cs.st.sae.nil{ public static int arity() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.nil{ public static java.lang.String functor() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.nil{ public static boolean isGround() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),size,MethodDescriptor((): int),de.tud.cs.st.sae.nil{ public static int size() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),terms,MethodDescriptor((int): scala.runtime.Nothing$),de.tud.cs.st.sae.nil{ public static scala.runtime.Nothing$ terms(int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),toCompoundTermForm,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.nil{ public static java.lang.String toCompoundTermForm() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/nil),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.nil{ public static java.lang.String toISOProlog() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.DemoTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.DemoTest): void),de.tud.cs.st.sae.parser.DemoTest$$anonfun$1{ public void <init>(de.tud.cs.st.sae.parser.DemoTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.parser.DemoTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.DemoTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.DemoTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.sae.parser.DemoTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.sae.parser.DemoTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),execute,MethodDescriptor((): void),de.tud.cs.st.sae.parser.DemoTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.DemoTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.DemoTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.sae.parser.DemoTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.DemoTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.DemoTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.DemoTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.DemoTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.sae.parser.DemoTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.DemoTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.DemoTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.sae.parser.DemoTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.DemoTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),readResource,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String readResource(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.DemoTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.DemoTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.DemoTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.DemoTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.DemoTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.sae.parser.DemoTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/DemoTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.sae.parser.DemoTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.EqualsTest): void),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$1{ public void <init>(de.tud.cs.st.sae.parser.EqualsTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.EqualsTest): void),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$2{ public void <init>(de.tud.cs.st.sae.parser.EqualsTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.EqualsTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.EqualsTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.sae.parser.EqualsTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.sae.parser.EqualsTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),execute,MethodDescriptor((): void),de.tud.cs.st.sae.parser.EqualsTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.EqualsTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.EqualsTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.sae.parser.EqualsTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.EqualsTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.EqualsTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.EqualsTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.EqualsTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.sae.parser.EqualsTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.EqualsTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.EqualsTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.sae.parser.EqualsTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.EqualsTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.EqualsTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.EqualsTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.EqualsTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.EqualsTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.EqualsTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.sae.parser.EqualsTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/EqualsTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.sae.parser.EqualsTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedFact{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),<init>,MethodDescriptor((java.lang.String, scala.Seq): void),de.tud.cs.st.sae.parser.ParsedFact{ public void <init>(java.lang.String,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.parser.ParsedFact{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.parser.ParsedFact{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),arguments,MethodDescriptor((): scala.Seq),de.tud.cs.st.sae.parser.ParsedFact{ public scala.Seq arguments() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),arity,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedFact{ public int arity() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),de$tud$cs$st$sae$Fact$$super$toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedFact{ public java.lang.String de$tud$cs$st$sae$Fact$$super$toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.sae.parser.ParsedFact{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParsedFact{ public java.lang.Object functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedFact{ public java.lang.String functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.parser.ParsedFact{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedFact),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedFact{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),<init>,MethodDescriptor((java.lang.String, scala.Seq): void),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public void <init>(java.lang.String,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public de.tud.cs.st.sae.GroundTerm apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),arguments,MethodDescriptor((): scala.Seq),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public scala.Seq arguments() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),arity,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public int arity() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public java.lang.Object functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public java.lang.String functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public boolean isGround() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedGroundTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedGroundTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.ParsedTerm): void),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public void <init>(de.tud.cs.st.sae.parser.ParsedTerm) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),apply,MethodDescriptor((de.tud.cs.st.sae.Term): boolean),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public boolean apply(de.tud.cs.st.sae.Term) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm$$anonfun$isGround$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedTerm$$anonfun$isGround$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedTerm{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),<init>,MethodDescriptor((java.lang.String, scala.Seq): void),de.tud.cs.st.sae.parser.ParsedTerm{ public void <init>(java.lang.String,scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),apply,MethodDescriptor((int): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.parser.ParsedTerm{ public de.tud.cs.st.sae.Term apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),arguments,MethodDescriptor((): scala.Seq),de.tud.cs.st.sae.parser.ParsedTerm{ public scala.Seq arguments() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),arity,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParsedTerm{ public int arity() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),functor,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParsedTerm{ public java.lang.Object functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),functor,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedTerm{ public java.lang.String functor() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),isGround,MethodDescriptor((): boolean),de.tud.cs.st.sae.parser.ParsedTerm{ public boolean isGround() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParsedTerm),toISOProlog,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParsedTerm{ public java.lang.String toISOProlog() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testFailure$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testFailure$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testFailure$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.ParserTest, java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testFailure$1{ public void <init>(de.tud.cs.st.sae.parser.ParserTest,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testFailure$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testFailure$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testFailure$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testFailure$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testFailure$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testFailure$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testParsing$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testParsing$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testParsing$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.ParserTest, java.lang.String, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testParsing$1{ public void <init>(de.tud.cs.st.sae.parser.ParserTest,java.lang.String,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testParsing$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testParsing$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testParsing$1),apply,MethodDescriptor((): void),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testParsing$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest$$anonfun$testParsing$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest$$anonfun$testParsing$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.ParserTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.ParserTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.sae.parser.ParserTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.sae.parser.ParserTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),execute,MethodDescriptor((): void),de.tud.cs.st.sae.parser.ParserTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.ParserTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.sae.parser.ParserTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.ParserTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.ParserTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.ParserTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.sae.parser.ParserTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.sae.parser.ParserTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.ParserTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.ParserTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.sae.parser.ParserTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.sae.parser.ParserTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.ParserTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.sae.parser.ParserTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.ParserTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.sae.parser.ParserTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),testFailure,MethodDescriptor((java.lang.String, java.lang.String): void),de.tud.cs.st.sae.parser.ParserTest{ public void testFailure(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.sae.parser.ParserTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),testParsing,MethodDescriptor((java.lang.String, java.lang.String, java.lang.Object): void),de.tud.cs.st.sae.parser.ParserTest{ public void testParsing(java.lang.String,java.lang.String,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/ParserTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.sae.parser.ParserTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/Program),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.Program{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/Program),<init>,MethodDescriptor((scala.List, scala.List, scala.List): void),de.tud.cs.st.sae.parser.Program{ public void <init>(scala.List,scala.List,scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/Program),facts,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.Program{ public scala.List facts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/Program),queries,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.Program{ public scala.List queries() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/Program),rules,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.Program{ public scala.List rules() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$argument$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$argument$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11$$anonfun$apply$12{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1 de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$11{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1$$anonfun$apply$13{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.Function0): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),apply,MethodDescriptor((scala.List): scala.runtime.BoxedArray),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public scala.runtime.BoxedArray apply(scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$arguments$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$arguments$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.StringAtom),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public de.tud.cs.st.sae.StringAtom apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),apply,MethodDescriptor((float): de.tud.cs.st.sae.FloatAtom),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public de.tud.cs.st.sae.FloatAtom apply(float) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2$$anonfun$apply$14),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2$$anonfun$apply$14{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),apply,MethodDescriptor((long): de.tud.cs.st.sae.IntegerAtom),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public de.tud.cs.st.sae.IntegerAtom apply(long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3$$anonfun$apply$15),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3$$anonfun$apply$15{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atom$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atom$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atomName$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atomName$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atomName$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atomName$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atomName$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atomName$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atomName$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atomName$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$atomName$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$atomName$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),apply,MethodDescriptor((scala.List): de.tud.cs.st.sae.Term[]),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public de.tud.cs.st.sae.Term[] apply(scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$body$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$body$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),apply,MethodDescriptor((java.lang.String): float),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public float apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$decimalNumber$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$decimalNumber$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$directive$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$directive$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public java.lang.Object apply(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.nil$),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public de.tud.cs.st.sae.nil$ apply(java.lang.String) }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$emptyList$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$emptyList$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$10),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$10{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$10),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$10{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$10),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$10{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$10),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$10{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$10),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$10{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$8),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$8),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$8{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$8),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$8{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$8),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$8{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1$$anonfun$apply$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1$$anonfun$apply$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),apply,MethodDescriptor((scala.util.parsing.combinator.Parsers$$tilde): de.tud.cs.st.sae.Fact),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public de.tud.cs.st.sae.Fact apply(scala.util.parsing.combinator.Parsers$$tilde) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$fact$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$fact$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$11{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1$$anonfun$apply$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),apply,MethodDescriptor((scala.util.parsing.combinator.Parsers$$tilde): de.tud.cs.st.sae.GroundTerm),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public de.tud.cs.st.sae.GroundTerm apply(scala.util.parsing.combinator.Parsers$$tilde) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_predicate$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_predicate$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$ground_term$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$ground_term$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$17),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$17{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$17),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$17{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$17),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$17{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$17),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$17{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$17),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$17{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$18),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$18{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$18),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$18{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$18),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$18{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$18),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$18{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1$$anonfun$apply$18),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1$$anonfun$apply$18{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),apply,MethodDescriptor((scala.List): de.tud.cs.st.sae.cons),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public de.tud.cs.st.sae.cons apply(scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$4),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$4),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$4{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$4),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$4{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$list$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$list$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$10{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1$$anonfun$apply$12{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),apply,MethodDescriptor((scala.util.parsing.combinator.Parsers$$tilde): de.tud.cs.st.sae.Term),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public de.tud.cs.st.sae.Term apply(scala.util.parsing.combinator.Parsers$$tilde) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$predicate$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$predicate$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.sae.Fact): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public void apply(de.tud.cs.st.sae.Fact) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),apply,MethodDescriptor((de.tud.cs.st.sae.Rule): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public void apply(de.tud.cs.st.sae.Rule) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2$$anonfun$apply$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1 de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),apply,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public void apply(de.tud.cs.st.sae.Term[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4$$anonfun$apply$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1 de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),apply,MethodDescriptor((de.tud.cs.st.sae.Term[]): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public void apply(de.tud.cs.st.sae.Term[]) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6$$anonfun$apply$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1$$anonfun$apply$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1$$anonfun$apply$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),apply,MethodDescriptor((scala.List): de.tud.cs.st.sae.parser.Program),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public de.tud.cs.st.sae.parser.Program apply(scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$program$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$program$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$6),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$6{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$6),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$6{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$6),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$6{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$6),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$6{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$6),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$6{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$7),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$7{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$7),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$7{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$7),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$7{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$7),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$7{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$7),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$7{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$8),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$8{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$8),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$8{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$8),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$8{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$8),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$8{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$8),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$8{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$9),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$9{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$9),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$9{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$9),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$9{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$9),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$9{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1$$anonfun$apply$9),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1$$anonfun$apply$9{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer,MethodDescriptor((): de.tud.cs.st.sae.parser.PrologLanguage),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public de.tud.cs.st.sae.parser.PrologLanguage de$tud$cs$st$sae$parser$PrologLanguage$$anonfun$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),apply,MethodDescriptor((scala.List): de.tud.cs.st.sae.Term[]),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public de.tud.cs.st.sae.Term[] apply(scala.List) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$query$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$query$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$1),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$1{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$2),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$2),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$2{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$2),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$2{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$3),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$3),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$3{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$3),apply,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$3{ public scala.util.parsing.combinator.Parsers$Parser apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),apply,MethodDescriptor((scala.util.parsing.combinator.Parsers$$tilde): de.tud.cs.st.sae.Rule),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public de.tud.cs.st.sae.Rule apply(scala.util.parsing.combinator.Parsers$$tilde) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$rule$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$rule$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$14),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$14{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$14),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1, java.lang.String): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$14{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$14),apply,MethodDescriptor((): de.tud.cs.st.sae.Variable),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$14{ public de.tud.cs.st.sae.Variable apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$14),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$14{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$14),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$14{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$16),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$16{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$16),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1, java.lang.String): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$16{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$16),apply,MethodDescriptor((): de.tud.cs.st.sae.Variable),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$16{ public de.tud.cs.st.sae.Variable apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$16),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$16{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1$$anonfun$apply$16),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1$$anonfun$apply$16{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage, scala.collection.mutable.Map): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage,scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),apply,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.Variable),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public de.tud.cs.st.sae.Variable apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$variable$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$variable$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),<init>,MethodDescriptor((de.tud.cs.st.sae.parser.PrologLanguage): void),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public void <init>(de.tud.cs.st.sae.parser.PrologLanguage) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),apply,MethodDescriptor((java.lang.String): long),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public long apply(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$$anonfun$wholeNumber$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage$$anonfun$wholeNumber$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.PrologLanguage${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.PrologLanguage${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),Fact,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.Fact),de.tud.cs.st.sae.parser.PrologLanguage${ public de.tud.cs.st.sae.Fact Fact(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),Program,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.parser.Program),de.tud.cs.st.sae.parser.PrologLanguage${ public de.tud.cs.st.sae.parser.Program Program(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),Query,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.Term[]),de.tud.cs.st.sae.parser.PrologLanguage${ public de.tud.cs.st.sae.Term[] Query(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),Rule,MethodDescriptor((java.lang.String): de.tud.cs.st.sae.Rule),de.tud.cs.st.sae.parser.PrologLanguage${ public de.tud.cs.st.sae.Rule Rule(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),comments,MethodDescriptor((): scala.util.matching.Regex),de.tud.cs.st.sae.parser.PrologLanguage${ private scala.util.matching.Regex comments() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage$),stripComments,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.sae.parser.PrologLanguage${ private java.lang.String stripComments(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),$tag,MethodDescriptor((): int),de.tud.cs.st.sae.parser.PrologLanguage{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),$tilde,MethodDescriptor((): scala.util.parsing.combinator.Parsers$$tilde$),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$$tilde$ $tilde() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),<init>,MethodDescriptor((): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),Error,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Error$),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Error$ Error() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),Failure,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Failure$),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Failure$ Failure() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),OnceParser,MethodDescriptor((scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser OnceParser(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),Parser,MethodDescriptor((scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser Parser(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),Success,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Success$),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Success$ Success() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),accept,MethodDescriptor((java.lang.Object): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser accept(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),accept,MethodDescriptor((java.lang.Object, scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser accept(java.lang.Object,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),accept,MethodDescriptor((java.lang.String, scala.PartialFunction): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser accept(java.lang.String,scala.PartialFunction) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),acceptIf,MethodDescriptor((scala.Function1, scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser acceptIf(scala.Function1,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),acceptMatch,MethodDescriptor((java.lang.String, scala.PartialFunction): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser acceptMatch(java.lang.String,scala.PartialFunction) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),acceptSeq,MethodDescriptor((java.lang.Object, scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser acceptSeq(java.lang.Object,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),argument,MethodDescriptor((scala.collection.mutable.Map): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser argument(scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),arguments,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser arguments(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),atom,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser atom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),atomName,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser atomName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),body,MethodDescriptor((scala.collection.mutable.Map): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser body(scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),chainl1,MethodDescriptor((scala.Function0, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser chainl1(scala.Function0,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),chainl1,MethodDescriptor((scala.Function0, scala.Function0, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser chainl1(scala.Function0,scala.Function0,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),chainr1,MethodDescriptor((scala.Function0, scala.Function0, scala.Function2, java.lang.Object): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser chainr1(scala.Function0,scala.Function0,scala.Function2,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),commit,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser commit(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),decimalNumber,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser decimalNumber() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),directive,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser directive() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),elem,MethodDescriptor((java.lang.Object): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser elem(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),elem,MethodDescriptor((java.lang.String, scala.Function1): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser elem(java.lang.String,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),emptyList,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser emptyList() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),err,MethodDescriptor((java.lang.String): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser err(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),fact,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser fact() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),facts,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.List facts() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),facts_$eq,MethodDescriptor((scala.List): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void facts_$eq(scala.List) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),failure,MethodDescriptor((java.lang.String): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser failure(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),functor,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser functor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),ground_predicate,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser ground_predicate() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),ground_term,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser ground_term() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),handleWhiteSpace,MethodDescriptor((java.lang.CharSequence, int): int),de.tud.cs.st.sae.parser.PrologLanguage{ public int handleWhiteSpace(java.lang.CharSequence,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),head,MethodDescriptor((scala.collection.mutable.Map): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser head(scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),lastNoSuccess,MethodDescriptor((): scala.util.parsing.combinator.Parsers$NoSuccess),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$NoSuccess lastNoSuccess() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),lastNoSuccess_$eq,MethodDescriptor((scala.util.parsing.combinator.Parsers$NoSuccess): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void lastNoSuccess_$eq(scala.util.parsing.combinator.Parsers$NoSuccess) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),list,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser list() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),literal,MethodDescriptor((java.lang.String): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser literal(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),literalAtom,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser literalAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),log,MethodDescriptor((scala.Function0, java.lang.String): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser log(scala.Function0,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),mkList,MethodDescriptor((): scala.Function1),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.Function1 mkList() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),not,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser not(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),opt,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser opt(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parse,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, java.io.Reader): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parse(scala.util.parsing.combinator.Parsers$Parser,java.io.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parse,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, java.lang.CharSequence): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parse(scala.util.parsing.combinator.Parsers$Parser,java.lang.CharSequence) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parse,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, scala.util.parsing.input.Reader): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parse(scala.util.parsing.combinator.Parsers$Parser,scala.util.parsing.input.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parseAll,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, java.io.Reader): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parseAll(scala.util.parsing.combinator.Parsers$Parser,java.io.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parseAll,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, java.lang.CharSequence): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parseAll(scala.util.parsing.combinator.Parsers$Parser,java.lang.CharSequence) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),parseAll,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser, scala.util.parsing.input.Reader): scala.util.parsing.combinator.Parsers$ParseResult),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$ParseResult parseAll(scala.util.parsing.combinator.Parsers$Parser,scala.util.parsing.input.Reader) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),phrase,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser phrase(scala.util.parsing.combinator.Parsers$Parser) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),positioned,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser positioned(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),predicate,MethodDescriptor((scala.collection.mutable.Map): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser predicate(scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),program,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser program() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),queries,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.List queries() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),queries_$eq,MethodDescriptor((scala.List): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void queries_$eq(scala.List) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),query,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser query() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),quotedAtom,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser quotedAtom() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),regex,MethodDescriptor((scala.util.matching.Regex): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser regex(scala.util.matching.Regex) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rep,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser rep(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rep1,MethodDescriptor((scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser rep1(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rep1,MethodDescriptor((scala.Function0, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser rep1(scala.Function0,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rep1sep,MethodDescriptor((scala.Function0, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser rep1sep(scala.Function0,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),repN,MethodDescriptor((int, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser repN(int,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),repsep,MethodDescriptor((scala.Function0, scala.Function0): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser repsep(scala.Function0,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rule,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser rule() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rules,MethodDescriptor((): scala.List),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.List rules() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),rules_$eq,MethodDescriptor((scala.List): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void rules_$eq(scala.List) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),scala$util$parsing$combinator$RegexParsers$$super$phrase,MethodDescriptor((scala.util.parsing.combinator.Parsers$Parser): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser scala$util$parsing$combinator$RegexParsers$$super$phrase(scala.util.parsing.combinator.Parsers$Parser) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),skipWhitespace,MethodDescriptor((): boolean),de.tud.cs.st.sae.parser.PrologLanguage{ public boolean skipWhitespace() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),success,MethodDescriptor((java.lang.Object): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser success(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),variable,MethodDescriptor((scala.collection.mutable.Map): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser variable(scala.collection.mutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),whiteSpace,MethodDescriptor((): scala.util.matching.Regex),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.matching.Regex whiteSpace() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),whiteSpace_$eq,MethodDescriptor((scala.util.matching.Regex): void),de.tud.cs.st.sae.parser.PrologLanguage{ public void whiteSpace_$eq(scala.util.matching.Regex) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/sae/parser/PrologLanguage),wholeNumber,MethodDescriptor((): scala.util.parsing.combinator.Parsers$Parser),de.tud.cs.st.sae.parser.PrologLanguage{ public scala.util.parsing.combinator.Parsers$Parser wholeNumber() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat$1),<init>,MethodDescriptor((scala.Function0): void),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat$1{ public void <init>(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),<init>,MethodDescriptor((): void),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),apply,MethodDescriptor((scala.Function0): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public scala.runtime.BoxedArray apply(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$$anonfun$repeat10Times$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.ControlAbstractions$$anonfun$repeat10Times$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.ControlAbstractions${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.ControlAbstractions${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.ControlAbstractions${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),not,MethodDescriptor((boolean): boolean),de.tud.cs.st.util.ControlAbstractions${ public boolean not(boolean) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),read,MethodDescriptor((scala.Function0, scala.Function1): java.lang.Object),de.tud.cs.st.util.ControlAbstractions${ public java.lang.Object read(scala.Function0,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),repeat,MethodDescriptor((int, scala.Function0): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions${ public scala.runtime.BoxedArray repeat(int,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),repeat,MethodDescriptor((scala.Function0, int): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions${ public scala.runtime.BoxedArray repeat(scala.Function0,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),repeat10Times,MethodDescriptor((): scala.Function1),de.tud.cs.st.util.ControlAbstractions${ public scala.Function1 repeat10Times() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions$),repeatResultOfEvaluation,MethodDescriptor((scala.Function0, int): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions${ public scala.runtime.BoxedArray repeatResultOfEvaluation(scala.Function0,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),$tag,MethodDescriptor((): int),de.tud.cs.st.util.ControlAbstractions{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),not,MethodDescriptor((boolean): boolean),de.tud.cs.st.util.ControlAbstractions{ public static boolean not(boolean) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),read,MethodDescriptor((scala.Function0, scala.Function1): java.lang.Object),de.tud.cs.st.util.ControlAbstractions{ public static java.lang.Object read(scala.Function0,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),repeat,MethodDescriptor((int, scala.Function0): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions{ public static scala.runtime.BoxedArray repeat(int,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),repeat,MethodDescriptor((scala.Function0, int): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions{ public static scala.runtime.BoxedArray repeat(scala.Function0,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),repeat10Times,MethodDescriptor((): scala.Function1),de.tud.cs.st.util.ControlAbstractions{ public static scala.Function1 repeat10Times() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/ControlAbstractions),repeatResultOfEvaluation,MethodDescriptor((scala.Function0, int): scala.runtime.BoxedArray),de.tud.cs.st.util.ControlAbstractions{ public static scala.runtime.BoxedArray repeatResultOfEvaluation(scala.Function0,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),$tag,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSet{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),<init>,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSet, de.tud.cs.st.util.OrderedTreeSet, int): void),de.tud.cs.st.util.OrderedTreeSet{ public void <init>(de.tud.cs.st.util.OrderedTreeSet,de.tud.cs.st.util.OrderedTreeSet,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),<init>,MethodDescriptor((int): void),de.tud.cs.st.util.OrderedTreeSet{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),contains,MethodDescriptor((int): boolean),de.tud.cs.st.util.OrderedTreeSet{ public boolean contains(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.OrderedTreeSet{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),hashCode,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSet{ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),hashCode_$eq,MethodDescriptor((int): void),de.tud.cs.st.util.OrderedTreeSet{ public void hashCode_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),insert,MethodDescriptor((int): de.tud.cs.st.util.OrderedTreeSetElement),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSetElement insert(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),l,MethodDescriptor((): de.tud.cs.st.util.OrderedTreeSet),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSet l() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),l,MethodDescriptor((): de.tud.cs.st.util.OrderedTreeSetElement),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSetElement l() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),newElement,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSet, de.tud.cs.st.util.OrderedTreeSet, int): de.tud.cs.st.util.OrderedTreeSet),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSet newElement(de.tud.cs.st.util.OrderedTreeSet,de.tud.cs.st.util.OrderedTreeSet,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),newElement,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, de.tud.cs.st.util.OrderedTreeSetElement, int): de.tud.cs.st.util.OrderedTreeSetElement),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSetElement newElement(de.tud.cs.st.util.OrderedTreeSetElement,de.tud.cs.st.util.OrderedTreeSetElement,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),s,MethodDescriptor((): de.tud.cs.st.util.OrderedTreeSet),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSet s() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),s,MethodDescriptor((): de.tud.cs.st.util.OrderedTreeSetElement),de.tud.cs.st.util.OrderedTreeSet{ public de.tud.cs.st.util.OrderedTreeSetElement s() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),size,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSet{ public int size() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),size_$eq,MethodDescriptor((int): void),de.tud.cs.st.util.OrderedTreeSet{ public void size_$eq(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),subsetOf,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement): boolean),de.tud.cs.st.util.OrderedTreeSet{ public boolean subsetOf(de.tud.cs.st.util.OrderedTreeSetElement) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.OrderedTreeSet{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSet),v,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSet{ public int v() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSetDemo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.OrderedTreeSetDemo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.OrderedTreeSetDemo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.util.OrderedTreeSetDemo${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo),$tag,MethodDescriptor((): int),de.tud.cs.st.util.OrderedTreeSetDemo{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetDemo),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.util.OrderedTreeSetDemo{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),$init$,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement): void),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static void $init$(de.tud.cs.st.util.OrderedTreeSetElement) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),contains,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, de.tud.cs.st.util.OrderedTreeSetElement): boolean),de.tud.cs.st.util.OrderedTreeSetElement$class{ private static boolean contains(de.tud.cs.st.util.OrderedTreeSetElement,de.tud.cs.st.util.OrderedTreeSetElement) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),contains,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, int): boolean),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static boolean contains(de.tud.cs.st.util.OrderedTreeSetElement,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),equals,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, java.lang.Object): boolean),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static boolean equals(de.tud.cs.st.util.OrderedTreeSetElement,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),insert,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, int): de.tud.cs.st.util.OrderedTreeSetElement),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static de.tud.cs.st.util.OrderedTreeSetElement insert(de.tud.cs.st.util.OrderedTreeSetElement,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),subsetOf,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement, de.tud.cs.st.util.OrderedTreeSetElement): boolean),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static boolean subsetOf(de.tud.cs.st.util.OrderedTreeSetElement,de.tud.cs.st.util.OrderedTreeSetElement) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/OrderedTreeSetElement$class),toString,MethodDescriptor((de.tud.cs.st.util.OrderedTreeSetElement): java.lang.String),de.tud.cs.st.util.OrderedTreeSetElement$class{ public static java.lang.String toString(de.tud.cs.st.util.OrderedTreeSetElement) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.Primes${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.Primes${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.Primes${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes$),nThPrimeNumber,MethodDescriptor((): int[]),de.tud.cs.st.util.Primes${ public int[] nThPrimeNumber() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes),$tag,MethodDescriptor((): int),de.tud.cs.st.util.Primes{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/Primes),nThPrimeNumber,MethodDescriptor((): int[]),de.tud.cs.st.util.Primes{ public static int[] nThPrimeNumber() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/Println$class),$init$,MethodDescriptor((de.tud.cs.st.util.Println): void),de.tud.cs.st.util.Println$class{ public static void $init$(de.tud.cs.st.util.Println) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/Println$class),anyToString,MethodDescriptor((de.tud.cs.st.util.Println, java.lang.Object): java.lang.String),de.tud.cs.st.util.Println$class{ public static java.lang.String anyToString(de.tud.cs.st.util.Println,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/UTF8Println$class),$init$,MethodDescriptor((de.tud.cs.st.util.UTF8Println): void),de.tud.cs.st.util.UTF8Println$class{ public static void $init$(de.tud.cs.st.util.UTF8Println) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/UTF8Println$class),print,MethodDescriptor((de.tud.cs.st.util.UTF8Println, java.lang.String): void),de.tud.cs.st.util.UTF8Println$class{ public static void print(de.tud.cs.st.util.UTF8Println,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/UTF8Println$class),println,MethodDescriptor((de.tud.cs.st.util.UTF8Println, java.lang.String): void),de.tud.cs.st.util.UTF8Println$class{ public static void println(de.tud.cs.st.util.UTF8Println,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.Arrays${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Arrays${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Arrays${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays$),getInsertionIndex,MethodDescriptor((scala.runtime.BoxedArray, int, java.lang.Object, scala.Function1): int),de.tud.cs.st.util.collection.Arrays${ public int getInsertionIndex(scala.runtime.BoxedArray,int,java.lang.Object,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.Arrays{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Arrays),getInsertionIndex,MethodDescriptor((scala.runtime.BoxedArray, int, java.lang.Object, scala.Function1): int),de.tud.cs.st.util.collection.Arrays{ public static int getInsertionIndex(scala.runtime.BoxedArray,int,java.lang.Object,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.BitVector, scala.Function2, scala.runtime.ObjectRef): void),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public void <init>(de.tud.cs.st.util.collection.BitVector,scala.Function2,scala.runtime.ObjectRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),apply,MethodDescriptor((int): void),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public void apply(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$$div$colon$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.BitVector$$anonfun$$div$colon$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.BitVector): void),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public void <init>(de.tud.cs.st.util.collection.BitVector) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),apply,MethodDescriptor((java.lang.String, int): java.lang.String),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public java.lang.String apply(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$$anonfun$toString$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.BitVector$$anonfun$toString$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$),$u21A4,MethodDescriptor((int): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVector${ public de.tud.cs.st.util.collection.BitVector $u21A4(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.BitVector${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.BitVector${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector$),SLOT_SIZE,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector${ public int SLOT_SIZE() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),$div$colon,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.BitVector{ public java.lang.Object $div$colon(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),$u21A4,MethodDescriptor((int): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVector{ public de.tud.cs.st.util.collection.BitVector $u21A4(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),<init>,MethodDescriptor((int[], int): void),de.tud.cs.st.util.collection.BitVector{ public void <init>(int[],int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),bits,MethodDescriptor((): int[]),de.tud.cs.st.util.collection.BitVector{ public int[] bits() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),canEqual,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.BitVector{ public boolean canEqual(java.lang.Object) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),contains,MethodDescriptor((int): boolean),de.tud.cs.st.util.collection.BitVector{ public boolean contains(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),count,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector{ public int count() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.BitVector{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.BitVector{ public void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),gd1$1,MethodDescriptor((de.tud.cs.st.util.collection.BitVector): boolean),de.tud.cs.st.util.collection.BitVector{ private boolean gd1$1(de.tud.cs.st.util.collection.BitVector) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),hashCode,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVector{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),intToBinaryVector,MethodDescriptor((int): java.lang.String),de.tud.cs.st.util.collection.BitVector{ public java.lang.String intToBinaryVector(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),subsetOf,MethodDescriptor((de.tud.cs.st.util.collection.BitVector): boolean),de.tud.cs.st.util.collection.BitVector{ public boolean subsetOf(de.tud.cs.st.util.collection.BitVector) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVector),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.BitVector{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),apply,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public void apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.BitVectorDemo$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVectorDemo${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.BitVectorDemo${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.BitVectorDemo${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),bv_1,MethodDescriptor((): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVectorDemo${ public de.tud.cs.st.util.collection.BitVector bv_1() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),bv_2,MethodDescriptor((): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVectorDemo${ public de.tud.cs.st.util.collection.BitVector bv_2() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),executionStart,MethodDescriptor((): long),de.tud.cs.st.util.collection.BitVectorDemo${ public long executionStart() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),executionStart_$eq,MethodDescriptor((long): void),de.tud.cs.st.util.collection.BitVectorDemo${ public void executionStart_$eq(long) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo$),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.util.collection.BitVectorDemo${ public void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.BitVectorDemo{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo),bv_1,MethodDescriptor((): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVectorDemo{ public static de.tud.cs.st.util.collection.BitVector bv_1() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo),bv_2,MethodDescriptor((): de.tud.cs.st.util.collection.BitVector),de.tud.cs.st.util.collection.BitVectorDemo{ public static de.tud.cs.st.util.collection.BitVector bv_2() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo),executionStart,MethodDescriptor((): long),de.tud.cs.st.util.collection.BitVectorDemo{ public static long executionStart() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/BitVectorDemo),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.st.util.collection.BitVectorDemo{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),$plus,MethodDescriptor((java.lang.Object): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.EmptyStore${ public de.tud.cs.st.util.collection.Store $plus(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.EmptyStore${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),$u2193,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.util.collection.EmptyStore${ public scala.Tuple2 $u2193() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),$u2193,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.util.collection.EmptyStore${ public scala.runtime.Nothing$ $u2193() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.EmptyStore${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.EmptyStore${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),contains,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.EmptyStore${ public boolean contains(java.lang.Object) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.EmptyStore${ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.EmptyStore${ public void foreach(scala.Function1) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),hashCode,MethodDescriptor((): int),de.tud.cs.st.util.collection.EmptyStore${ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),isEmpty,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.EmptyStore${ public boolean isEmpty() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),size,MethodDescriptor((): int),de.tud.cs.st.util.collection.EmptyStore${ public int size() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.EmptyStore${ public java.lang.String toString() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),v,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.EmptyStore${ public java.lang.Object v() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore$),v,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.util.collection.EmptyStore${ public scala.runtime.Nothing$ v() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),$plus,MethodDescriptor((java.lang.Object): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.EmptyStore{ public static de.tud.cs.st.util.collection.Store $plus(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.EmptyStore{ public static int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),$u2193,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.util.collection.EmptyStore{ public static scala.runtime.Nothing$ $u2193() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),contains,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.EmptyStore{ public static boolean contains(java.lang.Object) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.EmptyStore{ public static void foreach(scala.Function1) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),isEmpty,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.EmptyStore{ public static boolean isEmpty() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),size,MethodDescriptor((): int),de.tud.cs.st.util.collection.EmptyStore{ public static int size() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/EmptyStore),v,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.util.collection.EmptyStore{ public static scala.runtime.Nothing$ v() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.Indexed${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Indexed${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Indexed${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$),combine,MethodDescriptor((de.tud.cs.st.util.collection.Indexed, de.tud.cs.st.util.collection.Indexed, scala.Function2): boolean),de.tud.cs.st.util.collection.Indexed${ public boolean combine(de.tud.cs.st.util.collection.Indexed,de.tud.cs.st.util.collection.Indexed,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$class),$init$,MethodDescriptor((de.tud.cs.st.util.collection.Indexed): void),de.tud.cs.st.util.collection.Indexed$class{ public static void $init$(de.tud.cs.st.util.collection.Indexed) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Indexed$class),mkString,MethodDescriptor((de.tud.cs.st.util.collection.Indexed, scala.Function1, java.lang.String): java.lang.String),de.tud.cs.st.util.collection.Indexed$class{ public static java.lang.String mkString(de.tud.cs.st.util.collection.Indexed,scala.Function1,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListStore, de.tud.cs.st.util.collection.Store, java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public void <init>(de.tud.cs.st.util.collection.LinkedListStore,de.tud.cs.st.util.collection.Store,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),apply,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public void apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore$$anonfun$equals$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.LinkedListStore$$anonfun$equals$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),$plus,MethodDescriptor((java.lang.Object): de.tud.cs.st.util.collection.LinkedListStore),de.tud.cs.st.util.collection.LinkedListStore{ public de.tud.cs.st.util.collection.LinkedListStore $plus(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),$plus,MethodDescriptor((java.lang.Object): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.LinkedListStore{ public de.tud.cs.st.util.collection.Store $plus(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListStore{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),$u2193,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.util.collection.LinkedListStore{ public scala.Tuple2 $u2193() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),<init>,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListStore{ public void <init>(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),<init>,MethodDescriptor((java.lang.Object, de.tud.cs.st.util.collection.Store): void),de.tud.cs.st.util.collection.LinkedListStore{ public void <init>(java.lang.Object,de.tud.cs.st.util.collection.Store) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),contains,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.LinkedListStore{ public boolean contains(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.LinkedListStore{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.LinkedListStore{ public void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),hashCode,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListStore{ public int hashCode() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),isEmpty,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.LinkedListStore{ public boolean isEmpty() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),rest,MethodDescriptor((): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.LinkedListStore{ public de.tud.cs.st.util.collection.Store rest() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),size,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListStore{ public int size() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.LinkedListStore{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListStore),v,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListStore{ public java.lang.Object v() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),$colon$bslash,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object $colon$bslash(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),$div$colon,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object $div$colon(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),$plus$plus,MethodDescriptor((scala.Function0): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object $plus$plus(scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void <init>(de.tud.cs.st.util.collection.LinkedListWorkList) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),addString,MethodDescriptor((scala.StringBuilder, java.lang.String, java.lang.String, java.lang.String): scala.StringBuilder),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.StringBuilder addString(scala.StringBuilder,java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),append,MethodDescriptor((scala.Iterator): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object append(scala.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),buffered,MethodDescriptor((): scala.BufferedIterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.BufferedIterator buffered() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),collect,MethodDescriptor((): scala.Seq),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Seq collect() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),contains,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public boolean contains(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),copyToArray,MethodDescriptor((scala.runtime.BoxedArray, int): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void copyToArray(scala.runtime.BoxedArray,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),copyToBuffer,MethodDescriptor((scala.collection.mutable.Buffer): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void copyToBuffer(scala.collection.mutable.Buffer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),counted,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object counted() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),currentElement,MethodDescriptor((): de.tud.cs.st.util.collection.LinkedListWorkList$Element),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public de.tud.cs.st.util.collection.LinkedListWorkList$Element currentElement() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),currentElement_$eq,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList$Element): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void currentElement_$eq(de.tud.cs.st.util.collection.LinkedListWorkList$Element) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),drop,MethodDescriptor((int): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator drop(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),dropWhile,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator dropWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),duplicate,MethodDescriptor((): scala.Tuple2),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Tuple2 duplicate() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),exists,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public boolean exists(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),filter,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator filter(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),find,MethodDescriptor((scala.Function1): scala.Option),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Option find(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),findIndexOf,MethodDescriptor((scala.Function1): int),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public int findIndexOf(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),flatMap,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator flatMap(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),foldLeft,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object foldLeft(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),foldRight,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object foldRight(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),forall,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public boolean forall(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),hasNext,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public boolean hasNext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),indexOf,MethodDescriptor((java.lang.Object): int),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public int indexOf(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),localModCount,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public int localModCount() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),map,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator map(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),mkString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.String mkString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),mkString,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.String mkString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),mkString,MethodDescriptor((java.lang.String, java.lang.String, java.lang.String): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.String mkString(java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),next,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),readInto,MethodDescriptor((scala.runtime.BoxedArray): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void readInto(scala.runtime.BoxedArray) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),readInto,MethodDescriptor((scala.runtime.BoxedArray, int): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void readInto(scala.runtime.BoxedArray,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),readInto,MethodDescriptor((scala.runtime.BoxedArray, int, int): void),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public void readInto(scala.runtime.BoxedArray,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),reduceLeft,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object reduceLeft(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),reduceRight,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object reduceRight(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),slice,MethodDescriptor((int, int): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator slice(int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),take,MethodDescriptor((int): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator take(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),takeWhile,MethodDescriptor((scala.Function1): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.Iterator takeWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),toList,MethodDescriptor((): scala.List),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public scala.List toList() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),zip,MethodDescriptor((scala.Iterator): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object zip(scala.Iterator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$$anon$1),zipWithIndex,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$$anon$1{ public java.lang.Object zipWithIndex() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),<init>,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList, java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public void <init>(de.tud.cs.st.util.collection.LinkedListWorkList,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),de$tud$cs$st$util$collection$LinkedListWorkList$Element$$$outer,MethodDescriptor((): de.tud.cs.st.util.collection.LinkedListWorkList),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public de.tud.cs.st.util.collection.LinkedListWorkList de$tud$cs$st$util$collection$LinkedListWorkList$Element$$$outer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),next,MethodDescriptor((): de.tud.cs.st.util.collection.LinkedListWorkList$Element),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public de.tud.cs.st.util.collection.LinkedListWorkList$Element next() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),next_$eq,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList$Element): void),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public void next_$eq(de.tud.cs.st.util.collection.LinkedListWorkList$Element) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList$Element),value,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList$Element{ public java.lang.Object value() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),$colon$bslash,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object $colon$bslash(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),$div$colon,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object $div$colon(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),$plus$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void $plus$eq(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),$plus$plus,MethodDescriptor((scala.Iterable): scala.Collection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Collection $plus$plus(scala.Iterable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListWorkList{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),addString,MethodDescriptor((scala.StringBuilder): scala.StringBuilder),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.StringBuilder addString(scala.StringBuilder) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),addString,MethodDescriptor((scala.StringBuilder, java.lang.String): scala.StringBuilder),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.StringBuilder addString(scala.StringBuilder,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),addString,MethodDescriptor((scala.StringBuilder, java.lang.String, java.lang.String, java.lang.String): scala.StringBuilder),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.StringBuilder addString(scala.StringBuilder,java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),concat,MethodDescriptor((scala.Iterable): scala.Collection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Collection concat(scala.Iterable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),copyToArray,MethodDescriptor((scala.runtime.BoxedArray, int): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void copyToArray(scala.runtime.BoxedArray,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),copyToBuffer,MethodDescriptor((scala.collection.mutable.Buffer): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void copyToBuffer(scala.collection.mutable.Buffer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),de$tud$cs$st$util$collection$LinkedListWorkList$$first,MethodDescriptor((): de.tud.cs.st.util.collection.LinkedListWorkList$Element),de.tud.cs.st.util.collection.LinkedListWorkList{ public de.tud.cs.st.util.collection.LinkedListWorkList$Element de$tud$cs$st$util$collection$LinkedListWorkList$$first() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),de$tud$cs$st$util$collection$LinkedListWorkList$$first_$eq,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList$Element): void),de.tud.cs.st.util.collection.LinkedListWorkList{ private void de$tud$cs$st$util$collection$LinkedListWorkList$$first_$eq(de.tud.cs.st.util.collection.LinkedListWorkList$Element) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),drop,MethodDescriptor((int): scala.Collection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Collection drop(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),dropWhile,MethodDescriptor((scala.Function1): scala.Collection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Collection dropWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),elements,MethodDescriptor((): scala.Iterator),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterator elements() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),equals,MethodDescriptor((java.lang.Object): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean equals(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),exists,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean exists(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),filter,MethodDescriptor((scala.Function1): scala.Iterable),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterable filter(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),find,MethodDescriptor((scala.Function1): scala.Option),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Option find(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),findIndexOf,MethodDescriptor((scala.Function1): int),de.tud.cs.st.util.collection.LinkedListWorkList{ public int findIndexOf(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),flatMap,MethodDescriptor((scala.Function1): scala.Iterable),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterable flatMap(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),foldLeft,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object foldLeft(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),foldRight,MethodDescriptor((java.lang.Object, scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object foldRight(java.lang.Object,scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),forall,MethodDescriptor((scala.Function1): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean forall(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),foreach,MethodDescriptor((scala.Function1): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void foreach(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),hasDefiniteSize,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean hasDefiniteSize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),hashCode,MethodDescriptor((): int),de.tud.cs.st.util.collection.LinkedListWorkList{ public int hashCode() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),indexOf,MethodDescriptor((java.lang.Object): int),de.tud.cs.st.util.collection.LinkedListWorkList{ public int indexOf(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),isEmpty,MethodDescriptor((): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean isEmpty() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),last,MethodDescriptor((): de.tud.cs.st.util.collection.LinkedListWorkList$Element),de.tud.cs.st.util.collection.LinkedListWorkList{ private de.tud.cs.st.util.collection.LinkedListWorkList$Element last() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),last_$eq,MethodDescriptor((de.tud.cs.st.util.collection.LinkedListWorkList$Element): void),de.tud.cs.st.util.collection.LinkedListWorkList{ private void last_$eq(de.tud.cs.st.util.collection.LinkedListWorkList$Element) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),map,MethodDescriptor((scala.Function1): scala.Iterable),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterable map(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),mkString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.String mkString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),mkString,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.String mkString(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),mkString,MethodDescriptor((java.lang.String, java.lang.String, java.lang.String): java.lang.String),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.String mkString(java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),partition,MethodDescriptor((scala.Function1): scala.Tuple2),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Tuple2 partition(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),pop,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object pop() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),projection,MethodDescriptor((): scala.Iterable$Projection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterable$Projection projection() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),push,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.LinkedListWorkList{ public void push(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),reduceLeft,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object reduceLeft(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),reduceRight,MethodDescriptor((scala.Function2): java.lang.Object),de.tud.cs.st.util.collection.LinkedListWorkList{ public java.lang.Object reduceRight(scala.Function2) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),sameElements,MethodDescriptor((scala.Iterable): boolean),de.tud.cs.st.util.collection.LinkedListWorkList{ public boolean sameElements(scala.Iterable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),take,MethodDescriptor((int): scala.Collection),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Collection take(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),takeWhile,MethodDescriptor((scala.Function1): scala.Iterable),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Iterable takeWhile(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),toList,MethodDescriptor((): scala.List),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.List toList() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),toSeq,MethodDescriptor((): scala.Seq),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Seq toSeq() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/LinkedListWorkList),toStream,MethodDescriptor((): scala.Stream),de.tud.cs.st.util.collection.LinkedListWorkList{ public scala.Stream toStream() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),apply,MethodDescriptor((de.tud.cs.st.util.collection.Store, java.lang.Object): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public de.tud.cs.st.util.collection.Store apply(de.tud.cs.st.util.collection.Store,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object, java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),curry,MethodDescriptor((): scala.Function1),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public scala.Function1 curry() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.Store$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.Store${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Store${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.Store${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$),apply,MethodDescriptor((scala.Seq): de.tud.cs.st.util.collection.Store),de.tud.cs.st.util.collection.Store${ public de.tud.cs.st.util.collection.Store apply(scala.Seq) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$class),$init$,MethodDescriptor((de.tud.cs.st.util.collection.Store): void),de.tud.cs.st.util.collection.Store$class{ public static void $init$(de.tud.cs.st.util.collection.Store) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$class),equals,MethodDescriptor((de.tud.cs.st.util.collection.Store, java.lang.Object): boolean),de.tud.cs.st.util.collection.Store$class{ public static boolean equals(de.tud.cs.st.util.collection.Store,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/Store$class),hashCode,MethodDescriptor((de.tud.cs.st.util.collection.Store): int),de.tud.cs.st.util.collection.Store$class{ public static int hashCode(de.tud.cs.st.util.collection.Store) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkList${ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),<clinit>,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkList${ public static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkList${ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),apply,MethodDescriptor((): de.tud.cs.st.util.collection.WorkList),de.tud.cs.st.util.collection.WorkList${ public de.tud.cs.st.util.collection.WorkList apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),apply,MethodDescriptor((de.tud.cs.st.util.collection.Indexed): de.tud.cs.st.util.collection.LinkedListWorkList),de.tud.cs.st.util.collection.WorkList${ public de.tud.cs.st.util.collection.LinkedListWorkList apply(de.tud.cs.st.util.collection.Indexed) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),apply,MethodDescriptor((java.lang.Object): de.tud.cs.st.util.collection.WorkList),de.tud.cs.st.util.collection.WorkList${ public de.tud.cs.st.util.collection.WorkList apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$),process,MethodDescriptor((de.tud.cs.st.util.collection.WorkList, scala.Function1): void),de.tud.cs.st.util.collection.WorkList${ public void process(de.tud.cs.st.util.collection.WorkList,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$class),$init$,MethodDescriptor((de.tud.cs.st.util.collection.WorkList): void),de.tud.cs.st.util.collection.WorkList$class{ public static void $init$(de.tud.cs.st.util.collection.WorkList) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$class),equals,MethodDescriptor((de.tud.cs.st.util.collection.WorkList, java.lang.Object): boolean),de.tud.cs.st.util.collection.WorkList$class{ public static boolean equals(de.tud.cs.st.util.collection.WorkList,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkList$class),hashCode,MethodDescriptor((de.tud.cs.st.util.collection.WorkList): int),de.tud.cs.st.util.collection.WorkList$class{ public static int hashCode(de.tud.cs.st.util.collection.WorkList) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$1{ public void <init>(de.tud.cs.st.util.collection.WorkListTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$1),apply,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$1{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$2),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$2{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$2),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$2{ public void <init>(de.tud.cs.st.util.collection.WorkListTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$2),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$2{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$2),apply,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$2{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$2),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$2{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$3),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$3{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$3),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$3{ public void <init>(de.tud.cs.st.util.collection.WorkListTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$3),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$3{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$3),apply,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$3{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$3),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$3{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$4),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$4{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$4),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$4{ public void <init>(de.tud.cs.st.util.collection.WorkListTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$4),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$4{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$4),apply,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$4{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$4),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$4{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest$$anonfun$5, de.tud.cs.st.util.collection.WorkList, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, scala.runtime.IntRef): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public void <init>(de.tud.cs.st.util.collection.WorkListTest$$anonfun$5,de.tud.cs.st.util.collection.WorkList,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,scala.runtime.IntRef) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),apply,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public void apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5$$anonfun$apply$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5$$anonfun$apply$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5),<init>,MethodDescriptor((de.tud.cs.st.util.collection.WorkListTest): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5{ public void <init>(de.tud.cs.st.util.collection.WorkListTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5),apply,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5{ public void apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest$$anonfun$5),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest$$anonfun$5{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),$tag,MethodDescriptor((): int),de.tud.cs.st.util.collection.WorkListTest{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),<init>,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),assert,MethodDescriptor((boolean): void),de.tud.cs.st.util.collection.WorkListTest{ public void assert(boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),assert,MethodDescriptor((boolean, java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void assert(boolean,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),assert,MethodDescriptor((scala.Option): void),de.tud.cs.st.util.collection.WorkListTest{ public void assert(scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),assert,MethodDescriptor((scala.Option, java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void assert(scala.Option,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),convertToEqualizer,MethodDescriptor((java.lang.Object): org.scalatest.Assertions$Equalizer),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.Assertions$Equalizer convertToEqualizer(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),execute,MethodDescriptor((): void),de.tud.cs.st.util.collection.WorkListTest{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),execute,MethodDescriptor((java.lang.String): void),de.tud.cs.st.util.collection.WorkListTest{ public void execute(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.util.collection.WorkListTest{ public void execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void expect(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),expect,MethodDescriptor((java.lang.Object, java.lang.Object, java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void expect(java.lang.Object,java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),expectedTestCount,MethodDescriptor((scala.collection.immutable.Set, scala.collection.immutable.Set): int),de.tud.cs.st.util.collection.WorkListTest{ public int expectedTestCount(scala.collection.immutable.Set,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),fail,MethodDescriptor((): scala.runtime.Nothing$),de.tud.cs.st.util.collection.WorkListTest{ public scala.runtime.Nothing$ fail() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),fail,MethodDescriptor((java.lang.String): scala.runtime.Nothing$),de.tud.cs.st.util.collection.WorkListTest{ public scala.runtime.Nothing$ fail(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),fail,MethodDescriptor((java.lang.String, java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.util.collection.WorkListTest{ public scala.runtime.Nothing$ fail(java.lang.String,java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),fail,MethodDescriptor((java.lang.Throwable): scala.runtime.Nothing$),de.tud.cs.st.util.collection.WorkListTest{ public scala.runtime.Nothing$ fail(java.lang.Throwable) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),getTestNameForReport,MethodDescriptor((java.lang.String): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String getTestNameForReport(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),groups,MethodDescriptor((): scala.collection.immutable.Map),de.tud.cs.st.util.collection.WorkListTest{ public scala.collection.immutable.Map groups() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),ignore,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.util.collection.WorkListTest{ public void ignore(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),info,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.Informer info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),intercept,MethodDescriptor((java.lang.Class, java.lang.Object, scala.Function0): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.Object intercept(java.lang.Class,java.lang.Object,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),intercept,MethodDescriptor((java.lang.Class, scala.Function0): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.Object intercept(java.lang.Class,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),intercept,MethodDescriptor((scala.Function0, scala.reflect.Manifest): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.Object intercept(scala.Function0,scala.reflect.Manifest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),nestedSuites,MethodDescriptor((): scala.List),de.tud.cs.st.util.collection.WorkListTest{ public scala.List nestedSuites() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$Bundle,MethodDescriptor((): org.scalatest.FunSuite$Bundle$),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.FunSuite$Bundle$ org$scalatest$FunSuite$$Bundle() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$IgnoreGroupName,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String org$scalatest$FunSuite$$IgnoreGroupName() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$IgnoreGroupName_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$FunSuite$$IgnoreGroupName_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$Info,MethodDescriptor((): org.scalatest.FunSuite$Info$),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.FunSuite$Info$ org$scalatest$FunSuite$$Info() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$Test,MethodDescriptor((): org.scalatest.FunSuite$Test$),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.FunSuite$Test$ org$scalatest$FunSuite$$Test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$atomic,MethodDescriptor((): java.util.concurrent.atomic.AtomicReference),de.tud.cs.st.util.collection.WorkListTest{ public java.util.concurrent.atomic.AtomicReference org$scalatest$FunSuite$$atomic() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$atomic_$eq,MethodDescriptor((java.util.concurrent.atomic.AtomicReference): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$FunSuite$$atomic_$eq(java.util.concurrent.atomic.AtomicReference) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$currentInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.Object org$scalatest$FunSuite$$currentInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$currentInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$FunSuite$$currentInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$registrationInformer,MethodDescriptor((): org.scalatest.Informer),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.Informer org$scalatest$FunSuite$$registrationInformer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$super$execute,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$FunSuite$$super$execute(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$zombieInformer,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.Object org$scalatest$FunSuite$$zombieInformer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$FunSuite$$zombieInformer_$eq,MethodDescriptor((java.lang.Object): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$FunSuite$$zombieInformer_$eq(java.lang.Object) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$IgnoreAnnotation,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String org$scalatest$Suite$$IgnoreAnnotation() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$IgnoreAnnotation_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$Suite$$IgnoreAnnotation_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$InformerInParens,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String org$scalatest$Suite$$InformerInParens() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$InformerInParens_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$Suite$$InformerInParens_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$TestMethodPrefix,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String org$scalatest$Suite$$TestMethodPrefix() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),org$scalatest$Suite$$TestMethodPrefix_$eq,MethodDescriptor((java.lang.String): void),de.tud.cs.st.util.collection.WorkListTest{ public void org$scalatest$Suite$$TestMethodPrefix_$eq(java.lang.String) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),runNestedSuites,MethodDescriptor((org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map, scala.Option): void),de.tud.cs.st.util.collection.WorkListTest{ public void runNestedSuites(org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map,scala.Option) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),runTest,MethodDescriptor((java.lang.String, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Map): void),de.tud.cs.st.util.collection.WorkListTest{ public void runTest(java.lang.String,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),runTests,MethodDescriptor((scala.Option, org.scalatest.Reporter, org.scalatest.Stopper, scala.collection.immutable.Set, scala.collection.immutable.Set, scala.collection.immutable.Map): void),de.tud.cs.st.util.collection.WorkListTest{ public void runTests(scala.Option,org.scalatest.Reporter,org.scalatest.Stopper,scala.collection.immutable.Set,scala.collection.immutable.Set,scala.collection.immutable.Map) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),suiteName,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.collection.WorkListTest{ public java.lang.String suiteName() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),test,MethodDescriptor((java.lang.String, scala.Seq, scala.Function0): void),de.tud.cs.st.util.collection.WorkListTest{ public void test(java.lang.String,scala.Seq,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),testNames,MethodDescriptor((): scala.collection.immutable.Set),de.tud.cs.st.util.collection.WorkListTest{ public scala.collection.immutable.Set testNames() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/collection/WorkListTest),wrapReporterIfNecessary,MethodDescriptor((org.scalatest.Reporter): org.scalatest.Reporter),de.tud.cs.st.util.collection.WorkListTest{ public org.scalatest.Reporter wrapReporterIfNecessary(org.scalatest.Reporter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),<init>,MethodDescriptor((de.tud.cs.st.util.graphs.toDot, scala.runtime.ObjectRef, scala.runtime.ObjectRef, scala.runtime.ObjectRef, de.tud.cs.st.util.graphs.Node): void),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public void <init>(de.tud.cs.st.util.graphs.toDot,scala.runtime.ObjectRef,scala.runtime.ObjectRef,scala.runtime.ObjectRef,de.tud.cs.st.util.graphs.Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),apply,MethodDescriptor((de.tud.cs.st.util.graphs.Node): void),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public void apply(de.tud.cs.st.util.graphs.Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$$anonfun$generateDot$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.graphs.toDot$$anonfun$generateDot$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$class),$init$,MethodDescriptor((de.tud.cs.st.util.graphs.toDot): void),de.tud.cs.st.util.graphs.toDot$class{ public static void $init$(de.tud.cs.st.util.graphs.toDot) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$class),generateDot,MethodDescriptor((de.tud.cs.st.util.graphs.toDot, scala.collection.immutable.Set): java.lang.String),de.tud.cs.st.util.graphs.toDot$class{ public static java.lang.String generateDot(de.tud.cs.st.util.graphs.toDot,scala.collection.immutable.Set) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/graphs/toDot$class),nodeToInt,MethodDescriptor((de.tud.cs.st.util.graphs.toDot, de.tud.cs.st.util.graphs.Node): int),de.tud.cs.st.util.graphs.toDot$class{ public static int nodeToInt(de.tud.cs.st.util.graphs.toDot,de.tud.cs.st.util.graphs.Node) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/BasicPerformanceEvaluation$class),$init$,MethodDescriptor((de.tud.cs.st.util.perf.BasicPerformanceEvaluation): void),de.tud.cs.st.util.perf.BasicPerformanceEvaluation$class{ public static void $init$(de.tud.cs.st.util.perf.BasicPerformanceEvaluation) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/BasicPerformanceEvaluation$class),asSeconds,MethodDescriptor((de.tud.cs.st.util.perf.BasicPerformanceEvaluation, long, long): double),de.tud.cs.st.util.perf.BasicPerformanceEvaluation$class{ public static double asSeconds(de.tud.cs.st.util.perf.BasicPerformanceEvaluation,long,long) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/BasicPerformanceEvaluation$class),nanoSecondsToMilliseconds,MethodDescriptor((de.tud.cs.st.util.perf.BasicPerformanceEvaluation, double): double),de.tud.cs.st.util.perf.BasicPerformanceEvaluation$class{ public static double nanoSecondsToMilliseconds(de.tud.cs.st.util.perf.BasicPerformanceEvaluation,double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/BasicPerformanceEvaluation$class),nanoSecondsToSeconds,MethodDescriptor((de.tud.cs.st.util.perf.BasicPerformanceEvaluation, double): double),de.tud.cs.st.util.perf.BasicPerformanceEvaluation$class{ public static double nanoSecondsToSeconds(de.tud.cs.st.util.perf.BasicPerformanceEvaluation,double) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/BasicPerformanceEvaluation$class),time,MethodDescriptor((de.tud.cs.st.util.perf.BasicPerformanceEvaluation, scala.Function1, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.BasicPerformanceEvaluation$class{ public static java.lang.Object time(de.tud.cs.st.util.perf.BasicPerformanceEvaluation,scala.Function1,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$aggregateTimes$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$aggregateTimes$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$aggregateTimes$1),<init>,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation): void),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$aggregateTimes$1{ public void <init>(de.tud.cs.st.util.perf.CountingPerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$aggregateTimes$1),apply,MethodDescriptor((): int),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$aggregateTimes$1{ public int apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$aggregateTimes$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$aggregateTimes$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$aggregateTimes$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$aggregateTimes$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1),<init>,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation): void),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public void <init>(de.tud.cs.st.util.perf.CountingPerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1),apply,MethodDescriptor((): int),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public int apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$class),$init$,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation): void),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$class{ public static void $init$(de.tud.cs.st.util.perf.CountingPerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$class),aggregateTimes,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation, scala.Symbol, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$class{ public static java.lang.Object aggregateTimes(de.tud.cs.st.util.perf.CountingPerformanceEvaluation,scala.Symbol,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$class),printAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation, scala.Symbol, java.lang.String): void),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$class{ public static void printAggregatedTimes(de.tud.cs.st.util.perf.CountingPerformanceEvaluation,scala.Symbol,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/CountingPerformanceEvaluation$class),resetAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.CountingPerformanceEvaluation, scala.Symbol): void),de.tud.cs.st.util.perf.CountingPerformanceEvaluation$class{ public static void resetAggregatedTimes(de.tud.cs.st.util.perf.CountingPerformanceEvaluation,scala.Symbol) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/NoPerformanceEvaluation$class),$init$,MethodDescriptor((de.tud.cs.st.util.perf.NoPerformanceEvaluation): void),de.tud.cs.st.util.perf.NoPerformanceEvaluation$class{ public static void $init$(de.tud.cs.st.util.perf.NoPerformanceEvaluation) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/NoPerformanceEvaluation$class),aggregateTimes,MethodDescriptor((de.tud.cs.st.util.perf.NoPerformanceEvaluation, scala.Symbol, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.NoPerformanceEvaluation$class{ public static java.lang.Object aggregateTimes(de.tud.cs.st.util.perf.NoPerformanceEvaluation,scala.Symbol,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/NoPerformanceEvaluation$class),printAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.NoPerformanceEvaluation, scala.Symbol, java.lang.String): void),de.tud.cs.st.util.perf.NoPerformanceEvaluation$class{ public static void printAggregatedTimes(de.tud.cs.st.util.perf.NoPerformanceEvaluation,scala.Symbol,java.lang.String) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/NoPerformanceEvaluation$class),resetAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.NoPerformanceEvaluation, scala.Symbol): void),de.tud.cs.st.util.perf.NoPerformanceEvaluation$class{ public static void resetAggregatedTimes(de.tud.cs.st.util.perf.NoPerformanceEvaluation,scala.Symbol) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/NoPerformanceEvaluation$class),time,MethodDescriptor((de.tud.cs.st.util.perf.NoPerformanceEvaluation, java.lang.String, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.NoPerformanceEvaluation$class{ public static java.lang.Object time(de.tud.cs.st.util.perf.NoPerformanceEvaluation,java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$1),<init>,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$1{ public void <init>(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$1),apply,MethodDescriptor((): long),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$1{ public long apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1),<init>,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public void <init>(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1),apply,MethodDescriptor((): java.lang.Object),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public java.lang.Object apply() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1),apply,MethodDescriptor((): long),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public long apply() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$printAggregatedTimes$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),<init>,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation, java.lang.String): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public void <init>(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),apply,MethodDescriptor((double): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public void apply(double) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$$anonfun$time$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$$anonfun$time$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$class),$init$,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$class{ public static void $init$(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$class),aggregateTimes,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation, scala.Symbol, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$class{ public static java.lang.Object aggregateTimes(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation,scala.Symbol,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$class),printAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation, scala.Symbol, java.lang.String): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$class{ public static void printAggregatedTimes(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation,scala.Symbol,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$class),resetAggregatedTimes,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation, scala.Symbol): void),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$class{ public static void resetAggregatedTimes(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation,scala.Symbol) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/perf/ToCommandLinePerformanceEvaluation$class),time,MethodDescriptor((de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation, java.lang.String, scala.Function0): java.lang.Object),de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation$class{ public static java.lang.Object time(de.tud.cs.st.util.perf.ToCommandLinePerformanceEvaluation,java.lang.String,scala.Function0) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),$tag,MethodDescriptor((): int),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public int $tag() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),<init>,MethodDescriptor((de.tud.cs.st.util.trees.TreeNode, scala.Function1): void),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public void <init>(de.tud.cs.st.util.trees.TreeNode,scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),andThen,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public scala.Function1 andThen(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),apply,MethodDescriptor((de.tud.cs.st.util.trees.TreeNode): void),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public void apply(de.tud.cs.st.util.trees.TreeNode) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),apply,MethodDescriptor((java.lang.Object): java.lang.Object),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public java.lang.Object apply(java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),compose,MethodDescriptor((scala.Function1): scala.Function1),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public scala.Function1 compose(scala.Function1) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$$anonfun$depthFirstTraversal$1),toString,MethodDescriptor((): java.lang.String),de.tud.cs.st.util.trees.TreeNode$$anonfun$depthFirstTraversal$1{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$class),$init$,MethodDescriptor((de.tud.cs.st.util.trees.TreeNode): void),de.tud.cs.st.util.trees.TreeNode$class{ public static void $init$(de.tud.cs.st.util.trees.TreeNode) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/st/util/trees/TreeNode$class),depthFirstTraversal,MethodDescriptor((de.tud.cs.st.util.trees.TreeNode, scala.Function1): void),de.tud.cs.st.util.trees.TreeNode$class{ public static void depthFirstTraversal(de.tud.cs.st.util.trees.TreeNode,scala.Function1) }) => ImpureByAnalysis

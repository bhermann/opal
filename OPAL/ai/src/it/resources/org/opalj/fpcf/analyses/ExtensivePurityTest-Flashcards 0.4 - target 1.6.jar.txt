DefinedMethod(ObjectType(de/tud/cs/se/flashcards/MacOSXIntegration$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.MacOSXIntegration$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/MacOSXIntegration$1),invoke,MethodDescriptor((java.lang.Object, java.lang.reflect.Method, java.lang.Object[]): java.lang.Object),de.tud.cs.se.flashcards.MacOSXIntegration$1{ public java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/MacOSXIntegration),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.MacOSXIntegration{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/MacOSXIntegration),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.MacOSXIntegration{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/Main),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.Main{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/Main),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.Main{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/Main),main,MethodDescriptor((java.lang.String[]): void),de.tud.cs.se.flashcards.Main{ public static void main(java.lang.String[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),addListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void addListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireContentsUpdated,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireContentsUpdated(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireContentsUpdated,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ private void fireContentsUpdated(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireIntervalAdded,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalAdded(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireIntervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ private void fireIntervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireIntervalRemoved,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalRemoved(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),fireIntervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ private void fireIntervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),getListDataListeners,MethodDescriptor((): javax.swing.event.ListDataListener[]),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected javax.swing.event.ListDataListener[] getListDataListeners() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AbstractFlashcardSeries),removeListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void removeListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/AllTests),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.AllTests{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistory{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistory{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),execute,MethodDescriptor((de.tud.cs.se.flashcards.model.Command): void),de.tud.cs.se.flashcards.model.CommandHistory{ public void execute(de.tud.cs.se.flashcards.model.Command) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),notifyListener,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistory{ protected void notifyListener() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),redo,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistory{ public void redo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),redoableCommandsCount,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.CommandHistory{ public int redoableCommandsCount() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),setCommandHistoryChangedListener,MethodDescriptor((de.tud.cs.se.flashcards.model.CommandHistoryChangedListener): void),de.tud.cs.se.flashcards.model.CommandHistory{ public void setCommandHistoryChangedListener(de.tud.cs.se.flashcards.model.CommandHistoryChangedListener) }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),undo,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistory{ public void undo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistory),undoableCommandsCount,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.CommandHistory{ public int undoableCommandsCount() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistoryTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistoryTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/CommandHistoryTest),testHistoryManagement,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.CommandHistoryTest{ public void testHistoryManagement() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$1{ void <init>(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$1),cardChanged,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$1{ public void cardChanged(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$2),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries, de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$2{ void <init>(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries,de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$2),execute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$2{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$2),unexecute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$2{ public void unexecute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$3),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries, int[]): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$3{ void <init>(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries,int[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$3),execute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$3{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries$3),unexecute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries$3{ public void unexecute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),access$1,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries): java.util.List),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ static java.util.List access$1(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),access$2,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries): int),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ static int access$2(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),access$3,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries, int): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ static void access$3(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries,int) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),access$4,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeries): de.tud.cs.se.flashcards.model.FlashcardObserver),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ static de.tud.cs.se.flashcards.model.FlashcardObserver access$4(de.tud.cs.se.flashcards.model.DefaultFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),addCard,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public void addCard(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),addListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void addListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),createAddCardCommand,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public de.tud.cs.se.flashcards.model.Command createAddCardCommand(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),createInitialFlashcardSeries,MethodDescriptor((): de.tud.cs.se.flashcards.model.DefaultFlashcardSeries),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public static de.tud.cs.se.flashcards.model.DefaultFlashcardSeries createInitialFlashcardSeries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),createRemoveCardsCommand,MethodDescriptor((int[]): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public de.tud.cs.se.flashcards.model.Command createRemoveCardsCommand(int[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),fireContentsUpdated,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireContentsUpdated(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),fireIntervalAdded,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalAdded(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),fireIntervalRemoved,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalRemoved(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getElementAt,MethodDescriptor((int): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public de.tud.cs.se.flashcards.model.Flashcard getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getElementAt,MethodDescriptor((int): java.lang.Object),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public java.lang.Object getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getListDataListeners,MethodDescriptor((): javax.swing.event.ListDataListener[]),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected javax.swing.event.ListDataListener[] getListDataListeners() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getNextCreationID,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public int getNextCreationID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getSize,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public int getSize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),getSourceModel,MethodDescriptor((): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public de.tud.cs.se.flashcards.model.FlashcardSeries getSourceModel() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),removeListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void removeListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeries),setNextCreationID,MethodDescriptor((int): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeries{ public void setNextCreationID(int) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1RecordingListDataListener),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener{ void <init>(de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1RecordingListDataListener),access$0,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener): javax.swing.event.ListDataEvent),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener{ static javax.swing.event.ListDataEvent access$0(de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1RecordingListDataListener),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1RecordingListDataListener),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1RecordingListDataListener),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1RecordingListDataListener{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ExternallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1TestListDataListener),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1TestListDataListener{ void <init>(de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1TestListDataListener),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1TestListDataListener{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1TestListDataListener),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1TestListDataListener{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest$1TestListDataListener),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest$1TestListDataListener{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testAddCard_RemoveCard_GetElementAt_GetSize,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testAddCard_RemoveCard_GetElementAt_GetSize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testAdd_RemoveListDataListener,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testAdd_RemoveListDataListener() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testCreateInitialFlashcardSeries,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testCreateInitialFlashcardSeries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testNotifications,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testNotifications() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testUndoRedoOfAddCard,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testUndoRedoOfAddCard() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/DefaultFlashcardSeriesTest),testUndoRedoOfRemoveCard,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.DefaultFlashcardSeriesTest{ public void testUndoRedoOfRemoveCard() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard, java.lang.String, java.lang.String): void),de.tud.cs.se.flashcards.model.Flashcard$1{ void <init>(de.tud.cs.se.flashcards.model.Flashcard,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard$1),execute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.Flashcard$1{ public void execute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard$1),unexecute,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.Flashcard$1{ public void unexecute() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.Flashcard{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.Flashcard{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),<init>,MethodDescriptor((java.lang.String, java.lang.String): void),de.tud.cs.se.flashcards.model.Flashcard{ public void <init>(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),access$1,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): java.lang.String),de.tud.cs.se.flashcards.model.Flashcard{ static java.lang.String access$1(de.tud.cs.se.flashcards.model.Flashcard) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),access$2,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): java.lang.String),de.tud.cs.se.flashcards.model.Flashcard{ static java.lang.String access$2(de.tud.cs.se.flashcards.model.Flashcard) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),access$3,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard, java.lang.String): void),de.tud.cs.se.flashcards.model.Flashcard{ static void access$3(de.tud.cs.se.flashcards.model.Flashcard,java.lang.String) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),access$4,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard, java.lang.String): void),de.tud.cs.se.flashcards.model.Flashcard{ static void access$4(de.tud.cs.se.flashcards.model.Flashcard,java.lang.String) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),addObserver,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardObserver): void),de.tud.cs.se.flashcards.model.Flashcard{ public void addObserver(de.tud.cs.se.flashcards.model.FlashcardObserver) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),clone,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.Flashcard{ public de.tud.cs.se.flashcards.model.Flashcard clone() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),clone,MethodDescriptor((): java.lang.Object),de.tud.cs.se.flashcards.model.Flashcard{ public java.lang.Object clone() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),contains,MethodDescriptor((java.lang.String): boolean),de.tud.cs.se.flashcards.model.Flashcard{ public boolean contains(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),createUpdateCommand,MethodDescriptor((java.lang.String, java.lang.String): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.Flashcard{ public de.tud.cs.se.flashcards.model.Command createUpdateCommand(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getAnswer,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.Flashcard{ public java.lang.String getAnswer() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getCreated,MethodDescriptor((): java.util.Date),de.tud.cs.se.flashcards.model.Flashcard{ public java.util.Date getCreated() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getCreationID,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.Flashcard{ int getCreationID() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getNotRemembered,MethodDescriptor((): java.util.Date),de.tud.cs.se.flashcards.model.Flashcard{ public java.util.Date getNotRemembered() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getNotRememberedCount,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.Flashcard{ public int getNotRememberedCount() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getQuestion,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.Flashcard{ public java.lang.String getQuestion() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getRemembered,MethodDescriptor((): java.util.Date),de.tud.cs.se.flashcards.model.Flashcard{ public java.util.Date getRemembered() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getRememberedInARowCount,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.Flashcard{ public int getRememberedInARowCount() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),getShownCount,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.Flashcard{ public int getShownCount() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),notifyFlashcardObervers,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.Flashcard{ protected void notifyFlashcardObervers() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),removeObserver,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardObserver): void),de.tud.cs.se.flashcards.model.Flashcard{ public void removeObserver(de.tud.cs.se.flashcards.model.FlashcardObserver) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),setCreationID,MethodDescriptor((int): void),de.tud.cs.se.flashcards.model.Flashcard{ void setCreationID(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),setNotRemembered,MethodDescriptor((java.util.Date): void),de.tud.cs.se.flashcards.model.Flashcard{ public void setNotRemembered(java.util.Date) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/Flashcard),setRemembered,MethodDescriptor((java.util.Date): void),de.tud.cs.se.flashcards.model.Flashcard{ public void setRemembered(java.util.Date) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeriesFilter): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter$1{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeriesFilter) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter$1),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter$1{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter$1),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter$1{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter$1),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter$1{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),accept,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): boolean),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ protected boolean accept(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),access$1,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeriesFilter): int[]),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ static int[] access$1(de.tud.cs.se.flashcards.model.FlashcardSeriesFilter) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),access$2,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeriesFilter): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ static de.tud.cs.se.flashcards.model.FlashcardSeries access$2(de.tud.cs.se.flashcards.model.FlashcardSeriesFilter) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),access$3,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeriesFilter, int[]): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ static void access$3(de.tud.cs.se.flashcards.model.FlashcardSeriesFilter,int[]) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),addListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void addListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),createAddCardCommand,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public de.tud.cs.se.flashcards.model.Command createAddCardCommand(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),createRemoveCardsCommand,MethodDescriptor((int[]): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public de.tud.cs.se.flashcards.model.Command createRemoveCardsCommand(int[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),fireContentsUpdated,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireContentsUpdated(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),fireIntervalAdded,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalAdded(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),fireIntervalRemoved,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalRemoved(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getElementAt,MethodDescriptor((int): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public de.tud.cs.se.flashcards.model.Flashcard getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getElementAt,MethodDescriptor((int): java.lang.Object),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public java.lang.Object getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getListDataListeners,MethodDescriptor((): javax.swing.event.ListDataListener[]),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected javax.swing.event.ListDataListener[] getListDataListeners() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getNextCreationID,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public int getNextCreationID() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getSize,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public int getSize() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),getSourceModel,MethodDescriptor((): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public de.tud.cs.se.flashcards.model.FlashcardSeries getSourceModel() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),removeListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void removeListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),setNextCreationID,MethodDescriptor((int): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public void setNextCreationID(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilter),setSearchTerm,MethodDescriptor((java.lang.String): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilter{ public void setSearchTerm(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest$TestListDataListener),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest$TestListDataListener{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest$TestListDataListener),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest$TestListDataListener{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest$TestListDataListener),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest$TestListDataListener{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest$TestListDataListener),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest$TestListDataListener{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest$TestListDataListener),lastEvent,MethodDescriptor((): javax.swing.event.ListDataEvent),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest$TestListDataListener{ public javax.swing.event.ListDataEvent lastEvent() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest),testCardManagement,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest{ public void testCardManagement() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest),testConstruction,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest{ public void testConstruction() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardSeriesFilterTest),testFilteringAndEventHandling,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardSeriesFilterTest{ public void testFilteringAndEventHandling() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest$1TestFlashcardObserver),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardTest): void),de.tud.cs.se.flashcards.model.FlashcardTest$1TestFlashcardObserver{ void <init>(de.tud.cs.se.flashcards.model.FlashcardTest) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest$1TestFlashcardObserver),cardChanged,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.model.FlashcardTest$1TestFlashcardObserver{ public void cardChanged(de.tud.cs.se.flashcards.model.Flashcard) }) => ExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),assertPropertiesOfNewFlashcards,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.model.FlashcardTest{ private void assertPropertiesOfNewFlashcards(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testContains,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testContains() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testFlashcard,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testFlashcard() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testFlashcardStringString,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testFlashcardStringString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testGetNoOfTimes_,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testGetNoOfTimes_() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testGet_SetLastTimeFailed,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testGet_SetLastTimeFailed() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testGet_SetLastTimeRememberd,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testGet_SetLastTimeRememberd() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testNotification,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testNotification() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testUndoRedo,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testUndoRedo() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/FlashcardTest),testUpdate,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.FlashcardTest{ public void testUpdate() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$1{ void <init>(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$1),compare,MethodDescriptor((java.lang.Integer, java.lang.Integer): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$1{ public int compare(java.lang.Integer,java.lang.Integer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$1),compare,MethodDescriptor((java.lang.Object, java.lang.Object): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$1{ public int compare(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$2),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$2{ void <init>(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$2),compare,MethodDescriptor((java.lang.Integer, java.lang.Integer): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$2{ public int compare(java.lang.Integer,java.lang.Integer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$2),compare,MethodDescriptor((java.lang.Object, java.lang.Object): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$2{ public int compare(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$3),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$3{ void <init>(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$3),compare,MethodDescriptor((java.lang.Integer, java.lang.Integer): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$3{ public int compare(java.lang.Integer,java.lang.Integer) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$3),compare,MethodDescriptor((java.lang.Object, java.lang.Object): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$3{ public int compare(java.lang.Object,java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$4),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$4{ void <init>(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$4),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$4{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$4),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$4{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries$4),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries$4{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),access$1,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ static de.tud.cs.se.flashcards.model.FlashcardSeries access$1(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),access$2,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): java.util.ArrayList),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ static java.util.ArrayList access$2(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),access$3,MethodDescriptor((de.tud.cs.se.flashcards.model.SortedFlashcardSeries): java.util.Comparator),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ static java.util.Comparator access$3(de.tud.cs.se.flashcards.model.SortedFlashcardSeries) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),addListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void addListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),createAddCardCommand,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public de.tud.cs.se.flashcards.model.Command createAddCardCommand(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),createRemoveCardsCommand,MethodDescriptor((int[]): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public de.tud.cs.se.flashcards.model.Command createRemoveCardsCommand(int[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),fireContentsUpdated,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireContentsUpdated(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),fireIntervalAdded,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalAdded(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),fireIntervalRemoved,MethodDescriptor((java.lang.Object, int, int): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected void fireIntervalRemoved(java.lang.Object,int,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getElementAt,MethodDescriptor((int): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public de.tud.cs.se.flashcards.model.Flashcard getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getElementAt,MethodDescriptor((int): java.lang.Object),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public java.lang.Object getElementAt(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getListDataListeners,MethodDescriptor((): javax.swing.event.ListDataListener[]),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ protected javax.swing.event.ListDataListener[] getListDataListeners() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getNextCreationID,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public int getNextCreationID() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getSize,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public int getSize() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),getSourceModel,MethodDescriptor((): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public de.tud.cs.se.flashcards.model.FlashcardSeries getSourceModel() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),removeListDataListener,MethodDescriptor((javax.swing.event.ListDataListener): void),de.tud.cs.se.flashcards.model.AbstractFlashcardSeries{ public void removeListDataListener(javax.swing.event.ListDataListener) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),setNextCreationID,MethodDescriptor((int): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public void setNextCreationID(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeries),setSortingStrategy,MethodDescriptor((java.util.Comparator): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeries{ public void setSortingStrategy(java.util.Comparator) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest$TestListDataListener),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest$TestListDataListener{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest$TestListDataListener),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest$TestListDataListener{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest$TestListDataListener),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest$TestListDataListener{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest$TestListDataListener),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest$TestListDataListener{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest$TestListDataListener),lastEvent,MethodDescriptor((): javax.swing.event.ListDataEvent),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest$TestListDataListener{ public javax.swing.event.ListDataEvent lastEvent() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest),testCardManagementWithDateCreatedSortingStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest{ public void testCardManagementWithDateCreatedSortingStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest),testCardManagementWithLastTimeRememberedSortingStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest{ public void testCardManagementWithLastTimeRememberedSortingStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest),testCardManagementWithTimesRememberedInARowSortingStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest{ public void testCardManagementWithTimesRememberedInARowSortingStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/SortedFlashcardSeriesTest),testConstruction,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.SortedFlashcardSeriesTest{ public void testConstruction() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ public boolean hasNext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategy{ public void next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/JustNewLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.JustNewLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),<init>,MethodDescriptor((java.lang.String, int, de.tud.cs.se.flashcards.model.learning.LearningStrategyInfo): void),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ private void <init>(java.lang.String,int,de.tud.cs.se.flashcards.model.learning.LearningStrategyInfo) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),toString,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ public java.lang.String toString() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),valueOf,MethodDescriptor((java.lang.String): de.tud.cs.se.flashcards.model.learning.LearningStrategies),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ public static de.tud.cs.se.flashcards.model.learning.LearningStrategies valueOf(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategies),values,MethodDescriptor((): de.tud.cs.se.flashcards.model.learning.LearningStrategies[]),de.tud.cs.se.flashcards.model.learning.LearningStrategies{ public static de.tud.cs.se.flashcards.model.learning.LearningStrategies[] values() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategiesTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.LearningStrategiesTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/LearningStrategiesTest),test,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.LearningStrategiesTest{ public void test() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ public boolean hasNext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategy{ public void next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/NewestFirstLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.NewestFirstLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ public boolean hasNext() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategy{ public void next() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/OldestFirstLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.OldestFirstLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/Permutation),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.Permutation{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/Permutation),<init>,MethodDescriptor((int): void),de.tud.cs.se.flashcards.model.learning.Permutation{ public void <init>(int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/Permutation),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.Permutation{ public boolean hasNext() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/Permutation),next,MethodDescriptor((): int),de.tud.cs.se.flashcards.model.learning.Permutation{ public int next() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/PermutationTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.PermutationTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/PermutationTest),testPermutation,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.PermutationTest{ public void testPermutation() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ public boolean hasNext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategy{ public void next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/QuizLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.QuizLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ public boolean hasNext() }) => CompileTimePure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategy{ public void next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomForeverLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomForeverLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ public boolean hasNext() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategy{ public void next() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/RandomLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.RandomLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy$1),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy$1{ void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy$1),create,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy$1{ public de.tud.cs.se.flashcards.model.learning.LearningStrategy create(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy$1),getShortDescription,MethodDescriptor((): java.lang.String),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy$1{ public java.lang.String getShortDescription() }) => Pure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ private void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries,de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),current,MethodDescriptor((): de.tud.cs.se.flashcards.model.Flashcard),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ public de.tud.cs.se.flashcards.model.Flashcard current() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),hasNext,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ public boolean hasNext() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategy),next,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategy{ public void next() }) => DExternallySideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategyTest),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategyTest{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategyTest),testLearningStrategy,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategyTest{ public void testLearningStrategy() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategyTest),testLearningStrategyInfoObject,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategyTest{ public void testLearningStrategyInfoObject() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/model/learning/SystematicLearningStrategyTest),testThatNotAllCardsAreShown,MethodDescriptor((): void),de.tud.cs.se.flashcards.model.learning.SystematicLearningStrategyTest{ public void testThatNotAllCardsAreShown() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/persistence/Store),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.persistence.Store{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/persistence/Store),openSeries,MethodDescriptor((java.io.File): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.persistence.Store{ public static de.tud.cs.se.flashcards.model.FlashcardSeries openSeries(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/persistence/Store),saveSeries,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries, java.io.File): void),de.tud.cs.se.flashcards.persistence.Store{ public static void saveSeries(de.tud.cs.se.flashcards.model.FlashcardSeries,java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardEditor): void),de.tud.cs.se.flashcards.ui.FlashcardEditor$1{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor$1),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardEditor$1{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor$2),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardEditor): void),de.tud.cs.se.flashcards.ui.FlashcardEditor$2{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor$2),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardEditor$2{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardEditor{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor),access$0,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardEditor, boolean): void),de.tud.cs.se.flashcards.ui.FlashcardEditor{ static void access$0(de.tud.cs.se.flashcards.ui.FlashcardEditor,boolean) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor),access$1,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardEditor): javax.swing.JDialog),de.tud.cs.se.flashcards.ui.FlashcardEditor{ static javax.swing.JDialog access$1(de.tud.cs.se.flashcards.ui.FlashcardEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardEditor),edit,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): de.tud.cs.se.flashcards.model.Command),de.tud.cs.se.flashcards.ui.FlashcardEditor{ public de.tud.cs.se.flashcards.model.Command edit(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardListCellRenderer),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardListCellRenderer{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardListCellRenderer),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardListCellRenderer{ public void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardListCellRenderer),getListCellRendererComponent,MethodDescriptor((javax.swing.JList, java.lang.Object, int, boolean, boolean): java.awt.Component),de.tud.cs.se.flashcards.ui.FlashcardListCellRenderer{ public java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$1{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$1),cardChanged,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$1{ public void cardChanged(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$10),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$10{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$10),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$10{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$11),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$11{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$11),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$11{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$12),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$12{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$12),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$12{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$13),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$13{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$13),historyChanged,MethodDescriptor((de.tud.cs.se.flashcards.model.CommandHistory): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$13{ public void historyChanged(de.tud.cs.se.flashcards.model.CommandHistory) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$14),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$14{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$14),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$14{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$15),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$15{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$15),changedUpdate,MethodDescriptor((javax.swing.event.DocumentEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$15{ public void changedUpdate(javax.swing.event.DocumentEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$15),insertUpdate,MethodDescriptor((javax.swing.event.DocumentEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$15{ public void insertUpdate(javax.swing.event.DocumentEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$15),removeUpdate,MethodDescriptor((javax.swing.event.DocumentEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$15{ public void removeUpdate(javax.swing.event.DocumentEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$16),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor, javax.swing.JMenuItem): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$16{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor,javax.swing.JMenuItem) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$16),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$16{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$17),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor, javax.swing.JMenuItem): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$17{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor,javax.swing.JMenuItem) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$17),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$17{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$18),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor, javax.swing.JMenuItem): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$18{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor,javax.swing.JMenuItem) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$18),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$18{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$19),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$19{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$19),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$19{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$2),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$2{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$2),accept,MethodDescriptor((java.io.File, java.lang.String): boolean),de.tud.cs.se.flashcards.ui.FlashcardsEditor$2{ public boolean accept(java.io.File,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$20),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$20{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$20),valueChanged,MethodDescriptor((javax.swing.event.ListSelectionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$20{ public void valueChanged(javax.swing.event.ListSelectionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$21$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor$21): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$21$1{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor$21) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$21$1),run,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$21$1{ public void run() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$21),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$21{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$21),windowClosed,MethodDescriptor((java.awt.event.WindowEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$21{ public void windowClosed(java.awt.event.WindowEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$21),windowClosing,MethodDescriptor((java.awt.event.WindowEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$21{ public void windowClosing(java.awt.event.WindowEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$22),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$22{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$22),contentsChanged,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$22{ public void contentsChanged(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$22),intervalAdded,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$22{ public void intervalAdded(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$22),intervalRemoved,MethodDescriptor((javax.swing.event.ListDataEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$22{ public void intervalRemoved(javax.swing.event.ListDataEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$3),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$3{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$3),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$3{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$4),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$4{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$4),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$4{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$5),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$5{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$5),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$5{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$6),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$6{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$6),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$6{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$7),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$7{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$7),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$7{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$8),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$8{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$8),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$8{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$9),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$9{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor$9),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor$9{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),<init>,MethodDescriptor((de.tud.cs.se.flashcards.model.FlashcardSeries): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public void <init>(de.tud.cs.se.flashcards.model.FlashcardSeries) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),<init>,MethodDescriptor((java.io.File): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void <init>(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$0,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JList),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JList access$0(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$1,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor, java.lang.Object[]): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static void access$1(de.tud.cs.se.flashcards.ui.FlashcardsEditor,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$10,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): java.awt.Dimension),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static java.awt.Dimension access$10(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$11,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$11(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$12,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$12(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$13,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor, boolean): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static void access$13(de.tud.cs.se.flashcards.ui.FlashcardsEditor,boolean) }) => DContextuallyPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$14,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JFrame),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JFrame access$14(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$15,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$15(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$16,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static de.tud.cs.se.flashcards.model.FlashcardSeries access$16(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$2,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): de.tud.cs.se.flashcards.model.CommandHistory),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static de.tud.cs.se.flashcards.model.CommandHistory access$2(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$3,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$3(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$4,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$4(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$5,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): de.tud.cs.se.flashcards.model.FlashcardSeriesFilter),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static de.tud.cs.se.flashcards.model.FlashcardSeriesFilter access$5(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$6,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JTextField),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JTextField access$6(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$7,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JButton),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JButton access$7(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$8,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): de.tud.cs.se.flashcards.model.SortedFlashcardSeries),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static de.tud.cs.se.flashcards.model.SortedFlashcardSeries access$8(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),access$9,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): javax.swing.JPopupMenu),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ static javax.swing.JPopupMenu access$9(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),closeFlashcardEditor,MethodDescriptor((): boolean),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected boolean closeFlashcardEditor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),createFlashcard,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void createFlashcard() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),createFlashcardsEditor,MethodDescriptor((java.io.File): boolean),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public static boolean createFlashcardsEditor(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),createInfoPaneLabel,MethodDescriptor((javax.swing.JPanel, java.lang.String): javax.swing.JLabel),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ private javax.swing.JLabel createInfoPaneLabel(javax.swing.JPanel,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),doSave,MethodDescriptor((java.io.File): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void doSave(java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),editFlashcard,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void editFlashcard() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),editFlashcard,MethodDescriptor((de.tud.cs.se.flashcards.model.Flashcard): boolean),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public boolean editFlashcard(de.tud.cs.se.flashcards.model.Flashcard) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),getFrame,MethodDescriptor((): javax.swing.JFrame),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public javax.swing.JFrame getFrame() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),getSortedFlashcards,MethodDescriptor((): de.tud.cs.se.flashcards.model.FlashcardSeries),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public de.tud.cs.se.flashcards.model.FlashcardSeries getSortedFlashcards() }) => SideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),learn,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public void learn() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),newFlashcardEditor,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ public static void newFlashcardEditor() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),openFlashcardSeries,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void openFlashcardSeries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),removeFlashcards,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void removeFlashcards() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),saveAsFlashcardSeries,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void saveAsFlashcardSeries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),saveFlashcardSeries,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ protected void saveFlashcardSeries() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/FlashcardsEditor),updateInfoPaneLabels,MethodDescriptor((java.lang.Object[]): void),de.tud.cs.se.flashcards.ui.FlashcardsEditor{ private void updateInfoPaneLabels(java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$1),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$1{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$1),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$1{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$2),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$2{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$2),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$2{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$3),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$3{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$3),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$3{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$4),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$4{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$4),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$4{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$5),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$5{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$5),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$5{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$6),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$6{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$6),windowClosed,MethodDescriptor((java.awt.event.WindowEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$6{ public void windowClosed(java.awt.event.WindowEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$7),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog$7{ void <init>(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$7),actionPerformed,MethodDescriptor((java.awt.event.ActionEvent): void),de.tud.cs.se.flashcards.ui.LearnDialog$7{ public void actionPerformed(java.awt.event.ActionEvent) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$State),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog$State{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$State),<init>,MethodDescriptor((java.lang.String, int): void),de.tud.cs.se.flashcards.ui.LearnDialog$State{ private void <init>(java.lang.String,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$State),valueOf,MethodDescriptor((java.lang.String): de.tud.cs.se.flashcards.ui.LearnDialog$State),de.tud.cs.se.flashcards.ui.LearnDialog$State{ public static de.tud.cs.se.flashcards.ui.LearnDialog$State valueOf(java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog$State),values,MethodDescriptor((): de.tud.cs.se.flashcards.ui.LearnDialog$State[]),de.tud.cs.se.flashcards.ui.LearnDialog$State{ public static de.tud.cs.se.flashcards.ui.LearnDialog$State[] values() }) => DPure
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),$SWITCH_TABLE$de$tud$cs$se$flashcards$ui$LearnDialog$State,MethodDescriptor((): int[]),de.tud.cs.se.flashcards.ui.LearnDialog{ static int[] $SWITCH_TABLE$de$tud$cs$se$flashcards$ui$LearnDialog$State() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),<clinit>,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),<init>,MethodDescriptor((de.tud.cs.se.flashcards.ui.FlashcardsEditor): void),de.tud.cs.se.flashcards.ui.LearnDialog{ void <init>(de.tud.cs.se.flashcards.ui.FlashcardsEditor) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$0,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): de.tud.cs.se.flashcards.ui.FlashcardsEditor),de.tud.cs.se.flashcards.ui.LearnDialog{ static de.tud.cs.se.flashcards.ui.FlashcardsEditor access$0(de.tud.cs.se.flashcards.ui.LearnDialog) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$1,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): de.tud.cs.se.flashcards.model.learning.LearningStrategy),de.tud.cs.se.flashcards.ui.LearnDialog{ static de.tud.cs.se.flashcards.model.learning.LearningStrategy access$1(de.tud.cs.se.flashcards.ui.LearnDialog) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$2,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog{ static void access$2(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$3,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog{ static void access$3(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$4,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): javax.swing.JDialog),de.tud.cs.se.flashcards.ui.LearnDialog{ static javax.swing.JDialog access$4(de.tud.cs.se.flashcards.ui.LearnDialog) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),access$5,MethodDescriptor((de.tud.cs.se.flashcards.ui.LearnDialog): void),de.tud.cs.se.flashcards.ui.LearnDialog{ static void access$5(de.tud.cs.se.flashcards.ui.LearnDialog) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),forgotten,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ protected void forgotten() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),remembered,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ protected void remembered() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),show,MethodDescriptor((de.tud.cs.se.flashcards.model.learning.LearningStrategy): void),de.tud.cs.se.flashcards.ui.LearnDialog{ public void show(de.tud.cs.se.flashcards.model.learning.LearningStrategy) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),showAnswer,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ private void showAnswer() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),showNextQuestion,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ protected void showNextQuestion() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),startElapsedTimeUpdater,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ private void startElapsedTimeUpdater() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),stopElapsedTimeUpdater,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ private void stopElapsedTimeUpdater() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/LearnDialog),updateContentLabel,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.LearnDialog{ private void updateContentLabel() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/Utilities),<init>,MethodDescriptor((): void),de.tud.cs.se.flashcards.ui.Utilities{ private void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/Utilities),createImageIcon,MethodDescriptor((java.lang.String, java.lang.String): javax.swing.ImageIcon),de.tud.cs.se.flashcards.ui.Utilities{ public static javax.swing.ImageIcon createImageIcon(java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/Utilities),createToolBarButton,MethodDescriptor((java.lang.String, java.lang.String, java.lang.String): javax.swing.JButton),de.tud.cs.se.flashcards.ui.Utilities{ public static javax.swing.JButton createToolBarButton(java.lang.String,java.lang.String,java.lang.String) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/se/flashcards/ui/Utilities),setFrameTitle,MethodDescriptor((javax.swing.JFrame, java.io.File): void),de.tud.cs.se.flashcards.ui.Utilities{ public static void setFrameTitle(javax.swing.JFrame,java.io.File) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),<clinit>,MethodDescriptor((): void),de.tud.cs.util.Arrays{ static void <clinit>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),<init>,MethodDescriptor((): void),de.tud.cs.util.Arrays{ private void <init>() }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),add,MethodDescriptor((int[], int, int): int[]),de.tud.cs.util.Arrays{ public static int[] add(int[],int,int) }) => DPure
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),add,MethodDescriptor((java.lang.Object[], java.lang.Object): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] add(java.lang.Object[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),add,MethodDescriptor((java.lang.Object[], java.lang.Object, int): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] add(java.lang.Object[],java.lang.Object,int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),add,MethodDescriptor((java.lang.Object[], java.lang.Object[]): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] add(java.lang.Object[],java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),append,MethodDescriptor((int[], int): int[]),de.tud.cs.util.Arrays{ public static int[] append(int[],int) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),append,MethodDescriptor((java.lang.Object[], java.lang.Object): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] append(java.lang.Object[],java.lang.Object) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),hasElement,MethodDescriptor((java.lang.Object[], java.lang.Object): boolean),de.tud.cs.util.Arrays{ public static boolean hasElement(java.lang.Object[],java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),indexOf,MethodDescriptor((java.lang.Object[], java.lang.Object): int),de.tud.cs.util.Arrays{ public static int indexOf(java.lang.Object[],java.lang.Object) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),remove,MethodDescriptor((int[], int): int[]),de.tud.cs.util.Arrays{ public static int[] remove(int[],int) }) => DSideEffectFree
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),remove,MethodDescriptor((java.lang.Object[], int, java.lang.Object[]): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] remove(java.lang.Object[],int,java.lang.Object[]) }) => ImpureByAnalysis
DefinedMethod(ObjectType(de/tud/cs/util/Arrays),remove,MethodDescriptor((java.lang.Object[], java.lang.Object, java.lang.Object[]): java.lang.Object[]),de.tud.cs.util.Arrays{ public static java.lang.Object[] remove(java.lang.Object[],java.lang.Object,java.lang.Object[]) }) => ImpureByAnalysis
